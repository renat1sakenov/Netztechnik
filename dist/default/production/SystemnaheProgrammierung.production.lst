

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Nov  4 23:17:54 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           ; Version 1.44
    69                           ; Generated 14/09/2017 GMT
    70                           ; 
    71                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4520 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     
   103                           	psect	idataBANK0
   104  0027EE                     __pidataBANK0:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _min_temp
   108  0027EE  00                 	db	0
   109  0027EF  90                 	db	144
   110  0027F0  41                 	db	65
   111                           
   112                           ;initializer for _max_temp
   113  0027F1  00                 	db	0
   114  0027F2  94                 	db	148
   115  0027F3  41                 	db	65
   116                           
   117                           ;initializer for _time_size
   118  0027F4  0003               	dw	3
   119                           
   120                           ;initializer for _temp_size
   121  0027F6  0003               	dw	3
   122                           
   123                           ;initializer for _block_size
   124  0027F8  0006               	dw	6
   125                           
   126                           	psect	smallconst
   127  000600                     __psmallconst:
   128                           	opt stack 0
   129  000600  00                 	db	0
   130  000601                     _dpowers:
   131                           	opt stack 0
   132  000601  0001               	dw	1
   133  000603  0000               	dw	0
   134  000605  000A               	dw	10
   135  000607  0000               	dw	0
   136  000609  0064               	dw	100
   137  00060B  0000               	dw	0
   138  00060D  03E8               	dw	1000
   139  00060F  0000               	dw	0
   140  000611  2710               	dw	10000
   141  000613  0000               	dw	0
   142  000615  86A0               	dw	34464
   143  000617  0001               	dw	1
   144  000619  4240               	dw	16960
   145  00061B  000F               	dw	15
   146  00061D  9680               	dw	38528
   147  00061F  0098               	dw	152
   148  000621  E100               	dw	57600
   149  000623  05F5               	dw	1525
   150  000625  CA00               	dw	51712
   151  000627  3B9A               	dw	15258
   152  000629                     __end_of_dpowers:
   153                           	opt stack 0
   154  000629                     __powers_:
   155                           	opt stack 0
   156  000629  00                 	db	0
   157  00062A  80                 	db	128
   158  00062B  3F                 	db	63
   159  00062C  00                 	db	0
   160  00062D  20                 	db	32
   161  00062E  41                 	db	65
   162  00062F  00                 	db	0
   163  000630  C8                 	db	200
   164  000631  42                 	db	66
   165  000632  00                 	db	0
   166  000633  7A                 	db	122
   167  000634  44                 	db	68
   168  000635  40                 	db	64
   169  000636  1C                 	db	28
   170  000637  46                 	db	70
   171  000638  50                 	db	80
   172  000639  C3                 	db	195
   173  00063A  47                 	db	71
   174  00063B  24                 	db	36
   175  00063C  74                 	db	116
   176  00063D  49                 	db	73
   177  00063E  97                 	db	151
   178  00063F  18                 	db	24
   179  000640  4B                 	db	75
   180  000641  BC                 	db	188
   181  000642  BE                 	db	190
   182  000643  4C                 	db	76
   183  000644  6B                 	db	107
   184  000645  6E                 	db	110
   185  000646  4E                 	db	78
   186  000647  03                 	db	3
   187  000648  15                 	db	21
   188  000649  50                 	db	80
   189  00064A  79                 	db	121
   190  00064B  AD                 	db	173
   191  00064C  60                 	db	96
   192  00064D  F3                 	db	243
   193  00064E  49                 	db	73
   194  00064F  71                 	db	113
   195  000650                     __end_of__powers_:
   196                           	opt stack 0
   197  000650                     __npowers_:
   198                           	opt stack 0
   199  000650  00                 	db	0
   200  000651  80                 	db	128
   201  000652  3F                 	db	63
   202  000653  CD                 	db	205
   203  000654  CC                 	db	204
   204  000655  3D                 	db	61
   205  000656  D7                 	db	215
   206  000657  23                 	db	35
   207  000658  3C                 	db	60
   208  000659  12                 	db	18
   209  00065A  83                 	db	131
   210  00065B  3A                 	db	58
   211  00065C  B7                 	db	183
   212  00065D  D1                 	db	209
   213  00065E  38                 	db	56
   214  00065F  C6                 	db	198
   215  000660  27                 	db	39
   216  000661  37                 	db	55
   217  000662  38                 	db	56
   218  000663  86                 	db	134
   219  000664  35                 	db	53
   220  000665  C0                 	db	192
   221  000666  D6                 	db	214
   222  000667  33                 	db	51
   223  000668  CC                 	db	204
   224  000669  2B                 	db	43
   225  00066A  32                 	db	50
   226  00066B  70                 	db	112
   227  00066C  89                 	db	137
   228  00066D  30                 	db	48
   229  00066E  E7                 	db	231
   230  00066F  DB                 	db	219
   231  000670  2E                 	db	46
   232  000671  E5                 	db	229
   233  000672  3C                 	db	60
   234  000673  1E                 	db	30
   235  000674  42                 	db	66
   236  000675  A2                 	db	162
   237  000676  0D                 	db	13
   238  000677                     __end_of__npowers_:
   239                           	opt stack 0
   240  0000                     _TMR1	set	4046
   241  0000                     _TRISDbits	set	3989
   242  0000                     _CCPR1L	set	4030
   243  0000                     _PR2	set	4043
   244  0000                     _T2CONbits	set	4042
   245  0000                     _CCP1CON	set	4029
   246  0000                     _TMR1L	set	4046
   247  0000                     _TMR1H	set	4047
   248  0000                     _T1CONbits	set	4045
   249  0000                     _SSPCON1bits	set	4038
   250  0000                     _TRISCbits	set	3988
   251  0000                     _SSPSTAT	set	4039
   252  0000                     _SSPCON2	set	4037
   253  0000                     _SSPBUF	set	4041
   254  0000                     _PIR2bits	set	4001
   255  0000                     _SSPSTATbits	set	4039
   256  0000                     _SSPCON1	set	4038
   257  0000                     _ADRESL	set	4035
   258  0000                     _ADRESH	set	4036
   259  0000                     _INTCONbits	set	4082
   260  0000                     _PIR1bits	set	3998
   261  0000                     _ADCON1	set	4033
   262  0000                     _ADCON2	set	4032
   263  0000                     _ADCON0	set	4034
   264  0000                     _PIE1bits	set	3997
   265  0000                     _ADCON0bits	set	4034
   266  0000                     _TRISB	set	3987
   267  0000                     _SSPADD	set	4040
   268  0000                     _TRISC	set	3988
   269  0000                     _LATB	set	3978
   270  0000                     _LATA	set	3977
   271  0000                     _T1CON	set	4045
   272  0000                     _TRISAbits	set	3986
   273  0000                     _SSPCON2bits	set	4037
   274  0000                     _PORTB	set	3969
   275  0000                     _LATAbits	set	3977
   276  0000                     _TMR1IF	set	31984
   277  0000                     _TMR0ON	set	32431
   278  0000                     _TMR0IE	set	32661
   279  0000                     _T08BIT	set	32430
   280  0000                     _T0CS	set	32429
   281  0000                     _PSA	set	32427
   282  0000                     _T0PS2	set	32426
   283  0000                     _T0PS1	set	32425
   284  0000                     _T0PS0	set	32424
   285  0000                     _PEIE	set	32662
   286  0000                     _GIE	set	32663
   287  0000                     _TMR1IE	set	31976
   288  000677  53                 	db	83	;'S'
   289  000678  48                 	db	72	;'H'
   290  000679  4F                 	db	79	;'O'
   291  00067A  57                 	db	87	;'W'
   292  00067B  20                 	db	32
   293  00067C  41                 	db	65	;'A'
   294  00067D  4C                 	db	76	;'L'
   295  00067E  4C                 	db	76	;'L'
   296  00067F  20                 	db	32
   297  000680  44                 	db	68	;'D'
   298  000681  41                 	db	65	;'A'
   299  000682  54                 	db	84	;'T'
   300  000683  41                 	db	65	;'A'
   301  000684  00                 	db	0
   302  000685                     STR_2:
   303  000685  25                 	db	37
   304  000686  73                 	db	115	;'s'
   305  000687  20                 	db	32
   306  000688  25                 	db	37
   307  000689  64                 	db	100	;'d'
   308  00068A  3A                 	db	58	;':'
   309  00068B  25                 	db	37
   310  00068C  64                 	db	100	;'d'
   311  00068D  3A                 	db	58	;':'
   312  00068E  25                 	db	37
   313  00068F  64                 	db	100	;'d'
   314  000690  00                 	db	0
   315  000691  53                 	db	83	;'S'
   316  000692  48                 	db	72	;'H'
   317  000693  4F                 	db	79	;'O'
   318  000694  57                 	db	87	;'W'
   319  000695  20                 	db	32
   320  000696  44                 	db	68	;'D'
   321  000697  41                 	db	65	;'A'
   322  000698  54                 	db	84	;'T'
   323  000699  41                 	db	65	;'A'
   324  00069A  00                 	db	0
   325  00069B                     STR_9:
   326  00069B  25                 	db	37
   327  00069C  2E                 	db	46
   328  00069D  32                 	db	50	;'2'
   329  00069E  66                 	db	102	;'f'
   330  00069F  20                 	db	32
   331  0006A0  25                 	db	37
   332  0006A1  73                 	db	115	;'s'
   333  0006A2  00                 	db	0
   334  0006A3                     STR_10:
   335  0006A3  28                 	db	40
   336  0006A4  6E                 	db	110	;'n'
   337  0006A5  75                 	db	117	;'u'
   338  0006A6  6C                 	db	108	;'l'
   339  0006A7  6C                 	db	108	;'l'
   340  0006A8  29                 	db	41
   341  0006A9  00                 	db	0
   342  0006AA  4E                 	db	78	;'N'
   343  0006AB  45                 	db	69	;'E'
   344  0006AC  58                 	db	88	;'X'
   345  0006AD  54                 	db	84	;'T'
   346  0006AE  00                 	db	0
   347  0006AF  25                 	db	37
   348  0006B0  2E                 	db	46
   349  0006B1  32                 	db	50	;'2'
   350  0006B2  66                 	db	102	;'f'
   351  0006B3  00                 	db	0
   352  0006B4                     STR_4:
   353  0006B4  45                 	db	69	;'E'
   354  0006B5  4E                 	db	78	;'N'
   355  0006B6  44                 	db	68	;'D'
   356  0006B7  00                 	db	0
   357  0000                     
   358                           ; #config settings
   359  0006B8  00                 	db	0	; dummy byte at the end
   360  0000                     
   361                           	psect	cinit
   362  00256C                     __pcinit:
   363                           	opt stack 0
   364  00256C                     start_initialization:
   365                           	opt stack 0
   366  00256C                     __initialization:
   367                           	opt stack 0
   368                           
   369                           ; Initialize objects allocated to BANK0 (12 bytes)
   370                           ; load TBLPTR registers with __pidataBANK0
   371  00256C  0EEE               	movlw	low __pidataBANK0
   372  00256E  6EF6               	movwf	tblptrl,c
   373  002570  0E27               	movlw	high __pidataBANK0
   374  002572  6EF7               	movwf	tblptrh,c
   375  002574  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   376  002576  6EF8               	movwf	tblptru,c
   377  002578  EE00  F0D2         	lfsr	0,__pdataBANK0
   378  00257C  EE10 F00C          	lfsr	1,12
   379  002580                     copy_data0:
   380  002580  0009               	tblrd		*+
   381  002582  CFF5 FFEE          	movff	tablat,postinc0
   382  002586  50E5               	movf	postdec1,w,c
   383  002588  50E1               	movf	fsr1l,w,c
   384  00258A  E1FA               	bnz	copy_data0
   385                           
   386                           ; Clear objects allocated to BANK0 (47 bytes)
   387  00258C  EE00  F080         	lfsr	0,__pbssBANK0
   388  002590  0E2F               	movlw	47
   389  002592                     clear_0:
   390  002592  6AEE               	clrf	postinc0,c
   391  002594  06E8               	decf	wreg,f,c
   392  002596  E1FD               	bnz	clear_0
   393  002598                     end_of_initialization:
   394                           	opt stack 0
   395  002598                     __end_of__initialization:
   396                           	opt stack 0
   397  002598  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   398  00259A  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   399  00259C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   400  00259E  6EF8               	movwf	tblptru,c
   401  0025A0  0100               	movlb	0
   402  0025A2  EF58  F013         	goto	_main	;jump to C main() function
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           postdec1	equ	0xFE5
   410                           fsr1l	equ	0xFE1
   411                           
   412                           	psect	bssBANK0
   413  000080                     __pbssBANK0:
   414                           	opt stack 0
   415  000080                     _time:
   416                           	opt stack 0
   417  000080                     	ds	20
   418  000094                     _str_tmp:
   419                           	opt stack 0
   420  000094                     	ds	10
   421  00009E                     _converted_temp:
   422                           	opt stack 0
   423  00009E                     	ds	3
   424  0000A1                     _counter:
   425                           	opt stack 0
   426  0000A1                     	ds	2
   427  0000A3                     _hour:
   428                           	opt stack 0
   429  0000A3                     	ds	1
   430  0000A4                     _min:
   431                           	opt stack 0
   432  0000A4                     	ds	1
   433  0000A5                     _sec:
   434                           	opt stack 0
   435  0000A5                     	ds	1
   436  0000A6                     _msec:
   437                           	opt stack 0
   438  0000A6                     	ds	1
   439  0000A7                     _eeprom_haddress:
   440                           	opt stack 0
   441  0000A7                     	ds	1
   442  0000A8                     _eeprom_laddress:
   443                           	opt stack 0
   444  0000A8                     	ds	1
   445  0000A9                     _result:
   446                           	opt stack 0
   447  0000A9                     	ds	6
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           postinc0	equ	0xFEE
   453                           wreg	equ	0xFE8
   454                           postdec1	equ	0xFE5
   455                           fsr1l	equ	0xFE1
   456                           
   457                           	psect	dataBANK0
   458  0000D2                     __pdataBANK0:
   459                           	opt stack 0
   460  0000D2                     _min_temp:
   461                           	opt stack 0
   462  0000D2                     	ds	3
   463  0000D5                     _max_temp:
   464                           	opt stack 0
   465  0000D5                     	ds	3
   466  0000D8                     _time_size:
   467                           	opt stack 0
   468  0000D8                     	ds	2
   469  0000DA                     _temp_size:
   470                           	opt stack 0
   471  0000DA                     	ds	2
   472  0000DC                     _block_size:
   473                           	opt stack 0
   474  0000DC                     	ds	2
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1l	equ	0xFE1
   483                           
   484                           	psect	cstackBANK1
   485  000100                     __pcstackBANK1:
   486                           	opt stack 0
   487  000100                     initADC@channel:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x0
   491  000100                     	ds	1
   492  000101                     initADC@config3:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x1
   496  000101                     	ds	1
   497  000102                     initADC@i:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x2
   501  000102                     	ds	1
   502  000103                     initADC@adc_config1:
   503                           	opt stack 0
   504                           
   505                           ; 1 bytes @ 0x3
   506  000103                     	ds	1
   507  000104                     initADC@adc_config2:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x4
   511  000104                     	ds	1
   512  000105                     initADC@portconfig:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x5
   516  000105                     	ds	1
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1l	equ	0xFE1
   525                           
   526                           	psect	cstackBANK0
   527  0000AF                     __pcstackBANK0:
   528                           	opt stack 0
   529  0000AF                     TIMER1@time:
   530                           	opt stack 0
   531                           
   532                           ; 20 bytes @ 0x0
   533  0000AF                     	ds	20
   534  0000C3                     TIMER1@str_tmp:
   535                           	opt stack 0
   536                           
   537                           ; 10 bytes @ 0x14
   538  0000C3                     	ds	10
   539  0000CD                     ??_Delay10KTCYx:
   540  0000CD                     ??_SetDDRamAddr:
   541  0000CD                     ??_DelayPORXLCD:
   542  0000CD                     WriteCmdXLCD@cmd:
   543                           	opt stack 0
   544  0000CD                     OpenADC@config2:
   545                           	opt stack 0
   546  0000CD                     OpenI2C@slew:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x1E
   550  0000CD                     	ds	1
   551  0000CE                     OpenADC@portconfig:
   552                           	opt stack 0
   553  0000CE                     OpenI2C@sync_mode:
   554                           	opt stack 0
   555  0000CE                     Delay10KTCYx@unit:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x1F
   559  0000CE                     	ds	1
   560  0000CF                     ??_OpenADC:
   561                           
   562                           ; 1 bytes @ 0x20
   563  0000CF                     	ds	1
   564  0000D0                     SetDDRamAddr@DDaddr:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x21
   568  0000D0                     	ds	1
   569  0000D1                     OpenXLCD@lcdtype:
   570                           	opt stack 0
   571  0000D1                     OpenADC@config:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x22
   575  0000D1                     	ds	1
   576  0000D2                     tblptru	equ	0xFF8
   577                           tblptrh	equ	0xFF7
   578                           tblptrl	equ	0xFF6
   579                           tablat	equ	0xFF5
   580                           postinc0	equ	0xFEE
   581                           wreg	equ	0xFE8
   582                           postdec1	equ	0xFE5
   583                           fsr1l	equ	0xFE1
   584                           
   585                           ; 1 bytes @ 0x23
   586                           
   587                           	psect	cstackCOMRAM
   588  000001                     __pcstackCOMRAM:
   589                           	opt stack 0
   590  000001                     ??_isdigit:
   591  000001                     ??i2_DelayPORXLCD:
   592  000001                     ??i2_SetDDRamAddr:
   593  000001                     ??i2_Delay10KTCYx:
   594  000001                     ?_ReadADC:
   595                           	opt stack 0
   596  000001                     ?___awmod:
   597                           	opt stack 0
   598  000001                     ?___ftpack:
   599                           	opt stack 0
   600  000001                     ?___ftneg:
   601                           	opt stack 0
   602  000001                     ?__tdiv_to_l_:
   603                           	opt stack 0
   604  000001                     ?__div_to_l_:
   605                           	opt stack 0
   606  000001                     ?___lldiv:
   607                           	opt stack 0
   608  000001                     WriteDataXLCD@data:
   609                           	opt stack 0
   610  000001                     i2WriteCmdXLCD@cmd:
   611                           	opt stack 0
   612  000001                     ___awmod@dividend:
   613                           	opt stack 0
   614  000001                     __div_to_l_@f1:
   615                           	opt stack 0
   616  000001                     ___ftpack@arg:
   617                           	opt stack 0
   618  000001                     __tdiv_to_l_@f1:
   619                           	opt stack 0
   620  000001                     ___ftge@ff1:
   621                           	opt stack 0
   622  000001                     ___ftneg@f1:
   623                           	opt stack 0
   624  000001                     ___lldiv@dividend:
   625                           	opt stack 0
   626                           
   627                           ; 4 bytes @ 0x0
   628  000001                     	ds	1
   629  000002                     _isdigit$2678:
   630                           	opt stack 0
   631  000002                     i2Delay10KTCYx@unit:
   632                           	opt stack 0
   633  000002                     putsXLCD@buffer:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x1
   637  000002                     	ds	1
   638  000003                     ??_ReadADC:
   639  000003                     isdigit@c:
   640                           	opt stack 0
   641  000003                     ___awmod@divisor:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x2
   645  000003                     	ds	1
   646  000004                     ___ftpack@exp:
   647                           	opt stack 0
   648  000004                     i2SetDDRamAddr@DDaddr:
   649                           	opt stack 0
   650  000004                     __div_to_l_@f2:
   651                           	opt stack 0
   652  000004                     __tdiv_to_l_@f2:
   653                           	opt stack 0
   654  000004                     ___ftge@ff2:
   655                           	opt stack 0
   656                           
   657                           ; 3 bytes @ 0x3
   658  000004                     	ds	1
   659  000005                     ___awmod@counter:
   660                           	opt stack 0
   661  000005                     ___ftpack@sign:
   662                           	opt stack 0
   663  000005                     i2OpenXLCD@lcdtype:
   664                           	opt stack 0
   665  000005                     ___lldiv@divisor:
   666                           	opt stack 0
   667                           
   668                           ; 4 bytes @ 0x4
   669  000005                     	ds	1
   670  000006                     ??___ftpack:
   671  000006                     ___awmod@sign:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x5
   675  000006                     	ds	1
   676  000007                     ??__tdiv_to_l_:
   677  000007                     ??___ftge:
   678  000007                     ?___awdiv:
   679                           	opt stack 0
   680  000007                     ___awdiv@dividend:
   681                           	opt stack 0
   682  000007                     __div_to_l_@quot:
   683                           	opt stack 0
   684                           
   685                           ; 4 bytes @ 0x6
   686  000007                     	ds	2
   687  000009                     ?___awtoft:
   688                           	opt stack 0
   689  000009                     ?___lltoft:
   690                           	opt stack 0
   691  000009                     ___awdiv@divisor:
   692                           	opt stack 0
   693  000009                     ___awtoft@c:
   694                           	opt stack 0
   695  000009                     ___lldiv@quotient:
   696                           	opt stack 0
   697  000009                     ___lltoft@c:
   698                           	opt stack 0
   699                           
   700                           ; 4 bytes @ 0x8
   701  000009                     	ds	1
   702  00000A                     __tdiv_to_l_@quot:
   703                           	opt stack 0
   704                           
   705                           ; 4 bytes @ 0x9
   706  00000A                     	ds	1
   707  00000B                     ___awdiv@counter:
   708                           	opt stack 0
   709  00000B                     __div_to_l_@cntr:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0xA
   713  00000B                     	ds	1
   714  00000C                     ___awdiv@sign:
   715                           	opt stack 0
   716  00000C                     ___awtoft@sign:
   717                           	opt stack 0
   718  00000C                     __div_to_l_@exp1:
   719                           	opt stack 0
   720                           
   721                           ; 1 bytes @ 0xB
   722  00000C                     	ds	1
   723  00000D                     ??___lltoft:
   724  00000D                     ___lldiv@counter:
   725                           	opt stack 0
   726  00000D                     ___awdiv@quotient:
   727                           	opt stack 0
   728                           
   729                           ; 2 bytes @ 0xC
   730  00000D                     	ds	1
   731  00000E                     ?___llmod:
   732                           	opt stack 0
   733  00000E                     __tdiv_to_l_@cntr:
   734                           	opt stack 0
   735  00000E                     ___llmod@dividend:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0xD
   739  00000E                     	ds	1
   740  00000F                     ?___wmul:
   741                           	opt stack 0
   742  00000F                     __tdiv_to_l_@exp1:
   743                           	opt stack 0
   744  00000F                     ___wmul@multiplier:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0xE
   748  00000F                     	ds	2
   749  000011                     ___lltoft@exp:
   750                           	opt stack 0
   751  000011                     ___wmul@multiplicand:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x10
   755  000011                     	ds	1
   756  000012                     ___llmod@divisor:
   757                           	opt stack 0
   758                           
   759                           ; 4 bytes @ 0x11
   760  000012                     	ds	1
   761  000013                     ___wmul@product:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x12
   765  000013                     	ds	2
   766  000015                     ?___ftmul:
   767                           	opt stack 0
   768  000015                     ___ftmul@f1:
   769                           	opt stack 0
   770                           
   771                           ; 3 bytes @ 0x14
   772  000015                     	ds	1
   773  000016                     ___llmod@counter:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x15
   777  000016                     	ds	2
   778  000018                     ___ftmul@f2:
   779                           	opt stack 0
   780                           
   781                           ; 3 bytes @ 0x17
   782  000018                     	ds	3
   783  00001B                     ??___ftmul:
   784                           
   785                           ; 1 bytes @ 0x1A
   786  00001B                     	ds	3
   787  00001E                     ___ftmul@exp:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x1D
   791  00001E                     	ds	1
   792  00001F                     ___ftmul@f3_as_product:
   793                           	opt stack 0
   794                           
   795                           ; 3 bytes @ 0x1E
   796  00001F                     	ds	3
   797  000022                     ___ftmul@cntr:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x21
   801  000022                     	ds	1
   802  000023                     ___ftmul@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x22
   806  000023                     	ds	1
   807  000024                     ?___ftdiv:
   808                           	opt stack 0
   809  000024                     ?_fround:
   810                           	opt stack 0
   811  000024                     ?_scale:
   812                           	opt stack 0
   813  000024                     ?___fttol:
   814                           	opt stack 0
   815  000024                     ___ftdiv@f1:
   816                           	opt stack 0
   817  000024                     ___fttol@f1:
   818                           	opt stack 0
   819                           
   820                           ; 3 bytes @ 0x23
   821  000024                     	ds	3
   822  000027                     ___ftdiv@f2:
   823                           	opt stack 0
   824  000027                     _fround$3118:
   825                           	opt stack 0
   826  000027                     _scale$3119:
   827                           	opt stack 0
   828                           
   829                           ; 3 bytes @ 0x26
   830  000027                     	ds	1
   831  000028                     ??___fttol:
   832                           
   833                           ; 1 bytes @ 0x27
   834  000028                     	ds	2
   835  00002A                     ??___ftdiv:
   836  00002A                     scale@scl:
   837                           	opt stack 0
   838  00002A                     _fround$3117:
   839                           	opt stack 0
   840                           
   841                           ; 3 bytes @ 0x29
   842  00002A                     	ds	3
   843  00002D                     fround@prec:
   844                           	opt stack 0
   845  00002D                     ___ftdiv@cntr:
   846                           	opt stack 0
   847  00002D                     ___fttol@sign1:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x2C
   851  00002D                     	ds	1
   852  00002E                     ?___ftadd:
   853                           	opt stack 0
   854  00002E                     ___ftadd@f1:
   855                           	opt stack 0
   856  00002E                     ___ftdiv@f3:
   857                           	opt stack 0
   858  00002E                     ___fttol@lval:
   859                           	opt stack 0
   860                           
   861                           ; 4 bytes @ 0x2D
   862  00002E                     	ds	3
   863  000031                     ___ftdiv@exp:
   864                           	opt stack 0
   865  000031                     ___ftadd@f2:
   866                           	opt stack 0
   867                           
   868                           ; 3 bytes @ 0x30
   869  000031                     	ds	1
   870  000032                     ___ftdiv@sign:
   871                           	opt stack 0
   872  000032                     ___fttol@exp1:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x31
   876  000032                     	ds	1
   877  000033                     
   878                           ; 1 bytes @ 0x32
   879  000033                     	ds	1
   880  000034                     ??___ftadd:
   881                           
   882                           ; 1 bytes @ 0x33
   883  000034                     	ds	3
   884  000037                     ___ftadd@sign:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x36
   888  000037                     	ds	1
   889  000038                     ___ftadd@exp2:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x37
   893  000038                     	ds	1
   894  000039                     ___ftadd@exp1:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x38
   898  000039                     	ds	1
   899  00003A                     ?___ftsub:
   900                           	opt stack 0
   901  00003A                     ___ftsub@f1:
   902                           	opt stack 0
   903                           
   904                           ; 3 bytes @ 0x39
   905  00003A                     	ds	3
   906  00003D                     ___ftsub@f2:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x3C
   910  00003D                     	ds	3
   911  000040                     ?_sprintf:
   912                           	opt stack 0
   913  000040                     sprintf@sp:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x3F
   917  000040                     	ds	2
   918  000042                     sprintf@f:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x41
   922  000042                     	ds	10
   923  00004C                     ??_sprintf:
   924                           
   925                           ; 1 bytes @ 0x4B
   926  00004C                     	ds	6
   927  000052                     _sprintf$3120:
   928                           	opt stack 0
   929                           
   930                           ; 3 bytes @ 0x51
   931  000052                     	ds	3
   932  000055                     sprintf@len:
   933                           	opt stack 0
   934                           
   935                           ; 2 bytes @ 0x54
   936  000055                     	ds	2
   937  000057                     sprintf@cp:
   938                           	opt stack 0
   939                           
   940                           ; 2 bytes @ 0x56
   941  000057                     	ds	2
   942  000059                     sprintf@ap:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x58
   946  000059                     	ds	2
   947  00005B                     sprintf@flag:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x5A
   951  00005B                     	ds	2
   952  00005D                     sprintf@exp:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x5C
   956  00005D                     	ds	2
   957  00005F                     sprintf@tmpval:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x5E
   961  00005F                     	ds	4
   962  000063                     sprintf@val:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x62
   966  000063                     	ds	4
   967  000067                     sprintf@fval:
   968                           	opt stack 0
   969                           
   970                           ; 3 bytes @ 0x66
   971  000067                     	ds	3
   972  00006A                     sprintf@prec:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x69
   976  00006A                     	ds	2
   977  00006C                     sprintf@c:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x6B
   981  00006C                     	ds	1
   982  00006D                     ??_TIMER1:
   983                           
   984                           ; 1 bytes @ 0x6C
   985  00006D                     	ds	18
   986                           tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           postinc0	equ	0xFEE
   991                           wreg	equ	0xFE8
   992                           postdec1	equ	0xFE5
   993                           fsr1l	equ	0xFE1
   994                           
   995 ;;
   996 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   997 ;;
   998 ;; *************** function _main *****************
   999 ;; Defined at:
  1000 ;;		line 482 in file "main.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;		None
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;		None
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  2  272[None  ] int 
  1007 ;; Registers used:
  1008 ;;		wreg, status,2, status,0, cstack
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1014 ;;      Params:         0       0       0       0       0       0       0
  1015 ;;      Locals:         0       0       0       0       0       0       0
  1016 ;;      Temps:          0       0       0       0       0       0       0
  1017 ;;      Totals:         0       0       0       0       0       0       0
  1018 ;;Total ram usage:        0 bytes
  1019 ;; Hardware stack levels required when called:    9
  1020 ;; This function calls:
  1021 ;;		_CloseTimer1
  1022 ;;		_OpenI2C
  1023 ;;		_initADC
  1024 ;;		_initTimer
  1025 ;;		_initXLCD
  1026 ;; This function is called by:
  1027 ;;		Startup code after reset
  1028 ;; This function uses a non-reentrant model
  1029 ;;
  1030                           
  1031                           	psect	text0
  1032  0026B0                     __ptext0:
  1033                           	opt stack 0
  1034  0026B0                     _main:
  1035                           	opt stack 22
  1036                           
  1037                           ;main.c: 484: LATA = 0xFF;
  1038                           
  1039                           ;incstack = 0
  1040  0026B0  6889               	setf	3977,c	;volatile
  1041                           
  1042                           ;main.c: 485: LATB = 0xFF;
  1043  0026B2  688A               	setf	3978,c	;volatile
  1044                           
  1045                           ;main.c: 486: TRISC = 0xFF;
  1046  0026B4  6894               	setf	3988,c	;volatile
  1047                           
  1048                           ;main.c: 487: SSPADD = 0x27;
  1049  0026B6  0E27               	movlw	39
  1050  0026B8  6EC8               	movwf	4040,c	;volatile
  1051                           
  1052                           ;main.c: 488: initTimer();
  1053  0026BA  ECDE  F013         	call	_initTimer	;wreg free
  1054                           
  1055                           ;main.c: 489: initADC();
  1056  0026BE  EC0D  F013         	call	_initADC	;wreg free
  1057                           
  1058                           ;main.c: 490: initXLCD();
  1059  0026C2  EC8D  F013         	call	_initXLCD	;wreg free
  1060                           
  1061                           ;main.c: 491: OpenI2C(0b00001000, 0b10000000);
  1062  0026C6  0E80               	movlw	128
  1063  0026C8  0100               	movlb	0	; () banked
  1064  0026CA  6FCD               	movwf	OpenI2C@slew& (0+255),b
  1065  0026CC  0E08               	movlw	8
  1066  0026CE  EC7C  F013         	call	_OpenI2C
  1067  0026D2                     l273:
  1068  0026D2  D7FF               	goto	l273
  1069  0026D4                     __end_of_main:
  1070                           	opt stack 0
  1071                           tblptru	equ	0xFF8
  1072                           tblptrh	equ	0xFF7
  1073                           tblptrl	equ	0xFF6
  1074                           tablat	equ	0xFF5
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           postdec1	equ	0xFE5
  1078                           fsr1l	equ	0xFE1
  1079                           
  1080 ;; *************** function _initXLCD *****************
  1081 ;; Defined at:
  1082 ;;		line 117 in file "main.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;		None
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  1    wreg      void 
  1089 ;; Registers used:
  1090 ;;		wreg, status,2, status,0, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1096 ;;      Params:         0       0       0       0       0       0       0
  1097 ;;      Locals:         0       0       0       0       0       0       0
  1098 ;;      Temps:          0       0       0       0       0       0       0
  1099 ;;      Totals:         0       0       0       0       0       0       0
  1100 ;;Total ram usage:        0 bytes
  1101 ;; Hardware stack levels used:    1
  1102 ;; Hardware stack levels required when called:    8
  1103 ;; This function calls:
  1104 ;;		_BusyXLCD
  1105 ;;		_OpenXLCD
  1106 ;;		_WriteCmdXLCD
  1107 ;; This function is called by:
  1108 ;;		_main
  1109 ;;		_print_data
  1110 ;;		_test_readwrite
  1111 ;;		_print_all_data
  1112 ;;		_testmain
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           	psect	text1
  1117  00271A                     __ptext1:
  1118                           	opt stack 0
  1119  00271A                     _initXLCD:
  1120                           	opt stack 22
  1121                           
  1122                           ;main.c: 119: OpenXLCD( 0b00101100 & 0b00111000 );
  1123                           
  1124                           ;incstack = 0
  1125  00271A  0E28               	movlw	40
  1126  00271C  EC46  F00F         	call	_OpenXLCD
  1127  002720  ECD3  F012         	call	_BusyXLCD	;wreg free
  1128  002724  0900               	iorlw	0
  1129  002726  A4D8               	btfss	status,2,c
  1130  002728  D7FB               	goto	l184
  1131                           
  1132                           ;main.c: 121: WriteCmdXLCD(0x06);
  1133  00272A  0E06               	movlw	6
  1134  00272C  EC36  F012         	call	_WriteCmdXLCD
  1135                           
  1136                           ;main.c: 122: WriteCmdXLCD(0x0C);
  1137  002730  0E0C               	movlw	12
  1138  002732  EC36  F012         	call	_WriteCmdXLCD
  1139  002736  0012               	return		;funcret
  1140  002738                     __end_of_initXLCD:
  1141                           	opt stack 0
  1142                           tblptru	equ	0xFF8
  1143                           tblptrh	equ	0xFF7
  1144                           tblptrl	equ	0xFF6
  1145                           tablat	equ	0xFF5
  1146                           postinc0	equ	0xFEE
  1147                           wreg	equ	0xFE8
  1148                           postdec1	equ	0xFE5
  1149                           fsr1l	equ	0xFE1
  1150                           status	equ	0xFD8
  1151                           
  1152 ;; *************** function _OpenXLCD *****************
  1153 ;; Defined at:
  1154 ;;		line 20 in file "openxlcd.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  lcdtype         1    wreg     unsigned char 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;  lcdtype         1   34[BANK0 ] unsigned char 
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, status,2, status,0, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1168 ;;      Params:         0       0       0       0       0       0       0
  1169 ;;      Locals:         0       1       0       0       0       0       0
  1170 ;;      Temps:          0       0       0       0       0       0       0
  1171 ;;      Totals:         0       1       0       0       0       0       0
  1172 ;;Total ram usage:        1 bytes
  1173 ;; Hardware stack levels used:    1
  1174 ;; Hardware stack levels required when called:    7
  1175 ;; This function calls:
  1176 ;;		_BusyXLCD
  1177 ;;		_Delay10KTCYx
  1178 ;;		_DelayPORXLCD
  1179 ;;		_SetDDRamAddr
  1180 ;;		_WriteCmdXLCD
  1181 ;; This function is called by:
  1182 ;;		_initXLCD
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           	psect	text2
  1187  001E8C                     __ptext2:
  1188                           	opt stack 0
  1189  001E8C                     _OpenXLCD:
  1190                           	opt stack 22
  1191                           
  1192                           ;incstack = 0
  1193                           ;OpenXLCD@lcdtype stored from wreg
  1194  001E8C  0100               	movlb	0	; () banked
  1195  001E8E  6FD1               	movwf	OpenXLCD@lcdtype& (0+255),b
  1196                           
  1197                           ;openxlcd.c: 32: PORTB &= 0xf0;
  1198  001E90  0EF0               	movlw	240
  1199  001E92  1681               	andwf	3969,f,c	;volatile
  1200                           
  1201                           ;openxlcd.c: 33: TRISB &= 0xF0;
  1202  001E94  0EF0               	movlw	240
  1203  001E96  1693               	andwf	3987,f,c	;volatile
  1204                           
  1205                           ;openxlcd.c: 36: TRISAbits.TRISA2 = 0;
  1206  001E98  9492               	bcf	3986,2,c	;volatile
  1207                           
  1208                           ;openxlcd.c: 37: TRISAbits.TRISA3 = 0;
  1209  001E9A  9692               	bcf	3986,3,c	;volatile
  1210                           
  1211                           ;openxlcd.c: 38: TRISAbits.TRISA1 = 0;
  1212  001E9C  9292               	bcf	3986,1,c	;volatile
  1213                           
  1214                           ;openxlcd.c: 39: LATAbits.LATA2 = 0;
  1215  001E9E  9489               	bcf	3977,2,c	;volatile
  1216                           
  1217                           ;openxlcd.c: 40: LATAbits.LATA3 = 0;
  1218  001EA0  9689               	bcf	3977,3,c	;volatile
  1219                           
  1220                           ;openxlcd.c: 41: LATAbits.LATA1 = 0;
  1221  001EA2  9289               	bcf	3977,1,c	;volatile
  1222                           
  1223                           ;openxlcd.c: 44: DelayPORXLCD();
  1224  001EA4  ECD4  F013         	call	_DelayPORXLCD	;wreg free
  1225                           
  1226                           ;openxlcd.c: 46: WriteCmdXLCD(0x30);
  1227  001EA8  0E30               	movlw	48
  1228  001EAA  EC36  F012         	call	_WriteCmdXLCD
  1229                           
  1230                           ;openxlcd.c: 47: Delay10KTCYx(0x05);
  1231  001EAE  0E05               	movlw	5
  1232  001EB0  EC9C  F013         	call	_Delay10KTCYx
  1233                           
  1234                           ;openxlcd.c: 49: WriteCmdXLCD(0x30);
  1235  001EB4  0E30               	movlw	48
  1236  001EB6  EC36  F012         	call	_WriteCmdXLCD
  1237                           
  1238                           ;openxlcd.c: 50: Delay10KTCYx(0x01);
  1239  001EBA  0E01               	movlw	1
  1240  001EBC  EC9C  F013         	call	_Delay10KTCYx
  1241                           
  1242                           ;openxlcd.c: 53: WriteCmdXLCD(0x32);
  1243  001EC0  0E32               	movlw	50
  1244  001EC2  EC36  F012         	call	_WriteCmdXLCD
  1245  001EC6  ECD3  F012         	call	_BusyXLCD	;wreg free
  1246  001ECA  0900               	iorlw	0
  1247  001ECC  A4D8               	btfss	status,2,c
  1248  001ECE  D7FB               	goto	l298
  1249  001ED0                     u4110:
  1250                           
  1251                           ;openxlcd.c: 59: while(BusyXLCD());
  1252  001ED0  ECD3  F012         	call	_BusyXLCD	;wreg free
  1253  001ED4  0900               	iorlw	0
  1254  001ED6  A4D8               	btfss	status,2,c
  1255  001ED8  D7FB               	goto	u4110
  1256                           
  1257                           ;openxlcd.c: 60: WriteCmdXLCD(lcdtype);
  1258  001EDA  0100               	movlb	0	; () banked
  1259  001EDC  51D1               	movf	OpenXLCD@lcdtype& (0+255),w,b
  1260  001EDE  EC36  F012         	call	_WriteCmdXLCD
  1261  001EE2  ECD3  F012         	call	_BusyXLCD	;wreg free
  1262  001EE6  0900               	iorlw	0
  1263  001EE8  A4D8               	btfss	status,2,c
  1264  001EEA  D7FB               	goto	l304
  1265                           
  1266                           ;openxlcd.c: 64: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  1267  001EEC  0E08               	movlw	8
  1268  001EEE  EC36  F012         	call	_WriteCmdXLCD
  1269  001EF2  ECD3  F012         	call	_BusyXLCD	;wreg free
  1270  001EF6  0900               	iorlw	0
  1271  001EF8  A4D8               	btfss	status,2,c
  1272  001EFA  D7FB               	goto	l307
  1273                           
  1274                           ;openxlcd.c: 66: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  1275  001EFC  0E0F               	movlw	15
  1276  001EFE  EC36  F012         	call	_WriteCmdXLCD
  1277  001F02  ECD3  F012         	call	_BusyXLCD	;wreg free
  1278  001F06  0900               	iorlw	0
  1279  001F08  A4D8               	btfss	status,2,c
  1280  001F0A  D7FB               	goto	l310
  1281                           
  1282                           ;openxlcd.c: 70: WriteCmdXLCD(0x01);
  1283  001F0C  0E01               	movlw	1
  1284  001F0E  EC36  F012         	call	_WriteCmdXLCD
  1285  001F12  ECD3  F012         	call	_BusyXLCD	;wreg free
  1286  001F16  0900               	iorlw	0
  1287  001F18  A4D8               	btfss	status,2,c
  1288  001F1A  D7FB               	goto	l313
  1289                           
  1290                           ;openxlcd.c: 74: WriteCmdXLCD(0b00000100);
  1291  001F1C  0E04               	movlw	4
  1292  001F1E  EC36  F012         	call	_WriteCmdXLCD
  1293  001F22  ECD3  F012         	call	_BusyXLCD	;wreg free
  1294  001F26  0900               	iorlw	0
  1295  001F28  A4D8               	btfss	status,2,c
  1296  001F2A  D7FB               	goto	l316
  1297                           
  1298                           ;openxlcd.c: 78: SetDDRamAddr(0x80);
  1299  001F2C  0E80               	movlw	128
  1300  001F2E  ECE1  F011         	call	_SetDDRamAddr
  1301  001F32  0012               	return	
  1302  001F34                     __end_of_OpenXLCD:
  1303                           	opt stack 0
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           postinc0	equ	0xFEE
  1309                           wreg	equ	0xFE8
  1310                           postdec1	equ	0xFE5
  1311                           fsr1l	equ	0xFE1
  1312                           status	equ	0xFD8
  1313                           
  1314 ;; *************** function _WriteCmdXLCD *****************
  1315 ;; Defined at:
  1316 ;;		line 14 in file "wcmdxlcd.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  cmd             1    wreg     unsigned char 
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  cmd             1   30[BANK0 ] unsigned char 
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1330 ;;      Params:         0       0       0       0       0       0       0
  1331 ;;      Locals:         0       1       0       0       0       0       0
  1332 ;;      Temps:          0       0       0       0       0       0       0
  1333 ;;      Totals:         0       1       0       0       0       0       0
  1334 ;;Total ram usage:        1 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    6
  1337 ;; This function calls:
  1338 ;;		_DelayFor18TCY
  1339 ;; This function is called by:
  1340 ;;		_initXLCD
  1341 ;;		_OpenXLCD
  1342 ;; This function uses a non-reentrant model
  1343 ;;
  1344                           
  1345                           	psect	text3
  1346  00246C                     __ptext3:
  1347                           	opt stack 0
  1348  00246C                     _WriteCmdXLCD:
  1349                           	opt stack 23
  1350                           
  1351                           ;incstack = 0
  1352                           ;WriteCmdXLCD@cmd stored from wreg
  1353  00246C  0100               	movlb	0	; () banked
  1354  00246E  6FCD               	movwf	WriteCmdXLCD@cmd& (0+255),b
  1355                           
  1356                           ;wcmdxlcd.c: 33: TRISB &= 0xf0;
  1357  002470  0EF0               	movlw	240
  1358  002472  1693               	andwf	3987,f,c	;volatile
  1359                           
  1360                           ;wcmdxlcd.c: 34: PORTB &= 0xf0;
  1361  002474  0EF0               	movlw	240
  1362  002476  1681               	andwf	3969,f,c	;volatile
  1363                           
  1364                           ;wcmdxlcd.c: 35: PORTB |= (cmd>>4)&0x0f;
  1365  002478  0100               	movlb	0	; () banked
  1366  00247A  39CD               	swapf	WriteCmdXLCD@cmd& (0+255),w,b
  1367  00247C  0B0F               	andlw	15
  1368  00247E  0B0F               	andlw	15
  1369  002480  1281               	iorwf	3969,f,c	;volatile
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;wcmdxlcd.c: 37: LATAbits.LATA2 = 0;
  1373  002482  9489               	bcf	3977,2,c	;volatile
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;wcmdxlcd.c: 38: LATAbits.LATA3 = 0;
  1377  002484  9689               	bcf	3977,3,c	;volatile
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;wcmdxlcd.c: 39: DelayFor18TCY();
  1381  002486  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1382                           
  1383                           ;wcmdxlcd.c: 40: LATAbits.LATA1 = 1;
  1384  00248A  8289               	bsf	3977,1,c	;volatile
  1385                           
  1386                           ;wcmdxlcd.c: 41: DelayFor18TCY();
  1387  00248C  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1388                           
  1389                           ;wcmdxlcd.c: 42: LATAbits.LATA1 = 0;
  1390  002490  9289               	bcf	3977,1,c	;volatile
  1391                           
  1392                           ;wcmdxlcd.c: 47: PORTB &= 0xf0;
  1393  002492  0EF0               	movlw	240
  1394  002494  1681               	andwf	3969,f,c	;volatile
  1395                           
  1396                           ;wcmdxlcd.c: 48: PORTB |= cmd&0x0f;
  1397  002496  0100               	movlb	0	; () banked
  1398  002498  51CD               	movf	WriteCmdXLCD@cmd& (0+255),w,b
  1399  00249A  0B0F               	andlw	15
  1400  00249C  1281               	iorwf	3969,f,c	;volatile
  1401                           
  1402                           ; BSR set to: 0
  1403                           ;wcmdxlcd.c: 50: DelayFor18TCY();
  1404  00249E  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1405                           
  1406                           ;wcmdxlcd.c: 51: LATAbits.LATA1 = 1;
  1407  0024A2  8289               	bsf	3977,1,c	;volatile
  1408                           
  1409                           ;wcmdxlcd.c: 52: DelayFor18TCY();
  1410  0024A4  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1411                           
  1412                           ;wcmdxlcd.c: 53: LATAbits.LATA1 = 0;
  1413  0024A8  9289               	bcf	3977,1,c	;volatile
  1414                           
  1415                           ;wcmdxlcd.c: 57: TRISB |= 0x0f;
  1416  0024AA  0E0F               	movlw	15
  1417  0024AC  1293               	iorwf	3987,f,c	;volatile
  1418  0024AE  0012               	return	
  1419  0024B0                     __end_of_WriteCmdXLCD:
  1420                           	opt stack 0
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           postinc0	equ	0xFEE
  1426                           wreg	equ	0xFE8
  1427                           postdec1	equ	0xFE5
  1428                           fsr1l	equ	0xFE1
  1429                           status	equ	0xFD8
  1430                           
  1431 ;; *************** function _SetDDRamAddr *****************
  1432 ;; Defined at:
  1433 ;;		line 14 in file "setddram.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;  DDaddr          1    wreg     unsigned char 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  DDaddr          1   33[BANK0 ] unsigned char 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1447 ;;      Params:         0       0       0       0       0       0       0
  1448 ;;      Locals:         0       1       0       0       0       0       0
  1449 ;;      Temps:          0       3       0       0       0       0       0
  1450 ;;      Totals:         0       4       0       0       0       0       0
  1451 ;;Total ram usage:        4 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    6
  1454 ;; This function calls:
  1455 ;;		_DelayFor18TCY
  1456 ;; This function is called by:
  1457 ;;		_OpenXLCD
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           	psect	text4
  1462  0023C2                     __ptext4:
  1463                           	opt stack 0
  1464  0023C2                     _SetDDRamAddr:
  1465                           	opt stack 22
  1466                           
  1467                           ;incstack = 0
  1468                           ;SetDDRamAddr@DDaddr stored from wreg
  1469  0023C2  0100               	movlb	0	; () banked
  1470  0023C4  6FD0               	movwf	SetDDRamAddr@DDaddr& (0+255),b
  1471                           
  1472                           ;setddram.c: 33: TRISB &= 0xf0;
  1473  0023C6  0EF0               	movlw	240
  1474  0023C8  1693               	andwf	3987,f,c	;volatile
  1475                           
  1476                           ;setddram.c: 34: PORTB &= 0xf0;
  1477  0023CA  0EF0               	movlw	240
  1478  0023CC  1681               	andwf	3969,f,c	;volatile
  1479                           
  1480                           ;setddram.c: 35: PORTB |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  1481  0023CE  0100               	movlb	0	; () banked
  1482  0023D0  51D0               	movf	SetDDRamAddr@DDaddr& (0+255),w,b
  1483  0023D2  6FCD               	movwf	??_SetDDRamAddr& (0+255),b
  1484  0023D4  6BCE               	clrf	(??_SetDDRamAddr+1)& (0+255),b
  1485  0023D6  8FCD               	bsf	??_SetDDRamAddr& (0+255),7,b
  1486  0023D8  0E04               	movlw	4
  1487  0023DA  6FCF               	movwf	(??_SetDDRamAddr+2)& (0+255),b
  1488  0023DC                     u3555:
  1489  0023DC  35CE               	rlcf	(??_SetDDRamAddr+1)& (0+255),w,b
  1490  0023DE  33CE               	rrcf	(??_SetDDRamAddr+1)& (0+255),f,b
  1491  0023E0  33CD               	rrcf	??_SetDDRamAddr& (0+255),f,b
  1492  0023E2  2FCF               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,b
  1493  0023E4  D7FB               	goto	u3555
  1494  0023E6  51CD               	movf	??_SetDDRamAddr& (0+255),w,b
  1495  0023E8  0B0F               	andlw	15
  1496  0023EA  1281               	iorwf	3969,f,c	;volatile
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;setddram.c: 37: LATAbits.LATA2 = 0;
  1500  0023EC  9489               	bcf	3977,2,c	;volatile
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;setddram.c: 38: LATAbits.LATA3 = 0;
  1504  0023EE  9689               	bcf	3977,3,c	;volatile
  1505                           
  1506                           ; BSR set to: 0
  1507                           ;setddram.c: 39: DelayFor18TCY();
  1508  0023F0  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1509                           
  1510                           ;setddram.c: 40: LATAbits.LATA1 = 1;
  1511  0023F4  8289               	bsf	3977,1,c	;volatile
  1512                           
  1513                           ;setddram.c: 41: DelayFor18TCY();
  1514  0023F6  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1515                           
  1516                           ;setddram.c: 42: LATAbits.LATA1 = 0;
  1517  0023FA  9289               	bcf	3977,1,c	;volatile
  1518                           
  1519                           ;setddram.c: 47: PORTB &= 0xf0;
  1520  0023FC  0EF0               	movlw	240
  1521  0023FE  1681               	andwf	3969,f,c	;volatile
  1522                           
  1523                           ;setddram.c: 48: PORTB |= (DDaddr&0x0f);
  1524  002400  0100               	movlb	0	; () banked
  1525  002402  51D0               	movf	SetDDRamAddr@DDaddr& (0+255),w,b
  1526  002404  0B0F               	andlw	15
  1527  002406  1281               	iorwf	3969,f,c	;volatile
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;setddram.c: 50: DelayFor18TCY();
  1531  002408  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1532                           
  1533                           ;setddram.c: 51: LATAbits.LATA1 = 1;
  1534  00240C  8289               	bsf	3977,1,c	;volatile
  1535                           
  1536                           ;setddram.c: 52: DelayFor18TCY();
  1537  00240E  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1538                           
  1539                           ;setddram.c: 53: LATAbits.LATA1 = 0;
  1540  002412  9289               	bcf	3977,1,c	;volatile
  1541                           
  1542                           ;setddram.c: 57: TRISB |= 0x0f;
  1543  002414  0E0F               	movlw	15
  1544  002416  1293               	iorwf	3987,f,c	;volatile
  1545  002418  0012               	return	
  1546  00241A                     __end_of_SetDDRamAddr:
  1547                           	opt stack 0
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           postdec1	equ	0xFE5
  1555                           fsr1l	equ	0xFE1
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _DelayPORXLCD *****************
  1559 ;; Defined at:
  1560 ;;		line 107 in file "main.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;		None
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;		None
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  1    wreg      void 
  1567 ;; Registers used:
  1568 ;;		wreg
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1574 ;;      Params:         0       0       0       0       0       0       0
  1575 ;;      Locals:         0       0       0       0       0       0       0
  1576 ;;      Temps:          0       1       0       0       0       0       0
  1577 ;;      Totals:         0       1       0       0       0       0       0
  1578 ;;Total ram usage:        1 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:    5
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_OpenXLCD
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text5
  1589  0027A8                     __ptext5:
  1590                           	opt stack 0
  1591  0027A8                     _DelayPORXLCD:
  1592                           	opt stack 23
  1593                           
  1594                           ;main.c: 109: _delay((unsigned long)((15)*(4000000/4000.0)));
  1595                           
  1596                           ;incstack = 0
  1597  0027A8  0E14               	movlw	20
  1598  0027AA  0100               	movlb	0	; () banked
  1599  0027AC  6FCD               	movwf	??_DelayPORXLCD& (0+255),b
  1600  0027AE  0E79               	movlw	121
  1601  0027B0                     u6857:
  1602  0027B0  2EE8               	decfsz	wreg,f,c
  1603  0027B2  D7FE               	bra	u6857
  1604  0027B4  2FCD               	decfsz	??_DelayPORXLCD& (0+255),f,b
  1605  0027B6  D7FC               	bra	u6857
  1606  0027B8  D000               	nop2	
  1607  0027BA  0012               	return		;funcret
  1608  0027BC                     __end_of_DelayPORXLCD:
  1609                           	opt stack 0
  1610                           tblptru	equ	0xFF8
  1611                           tblptrh	equ	0xFF7
  1612                           tblptrl	equ	0xFF6
  1613                           tablat	equ	0xFF5
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           postdec1	equ	0xFE5
  1617                           fsr1l	equ	0xFE1
  1618                           status	equ	0xFD8
  1619                           
  1620 ;; *************** function _Delay10KTCYx *****************
  1621 ;; Defined at:
  1622 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/pic18/d10ktcyx.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;  unit            1    wreg     unsigned char 
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;  unit            1   31[BANK0 ] unsigned char 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      void 
  1629 ;; Registers used:
  1630 ;;		wreg
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1636 ;;      Params:         0       0       0       0       0       0       0
  1637 ;;      Locals:         0       1       0       0       0       0       0
  1638 ;;      Temps:          0       1       0       0       0       0       0
  1639 ;;      Totals:         0       2       0       0       0       0       0
  1640 ;;Total ram usage:        2 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:    5
  1643 ;; This function calls:
  1644 ;;		Nothing
  1645 ;; This function is called by:
  1646 ;;		_OpenXLCD
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text6
  1651  002738                     __ptext6:
  1652                           	opt stack 0
  1653  002738                     _Delay10KTCYx:
  1654                           	opt stack 23
  1655                           
  1656                           ;incstack = 0
  1657                           ;Delay10KTCYx@unit stored from wreg
  1658  002738  0100               	movlb	0	; () banked
  1659  00273A  6FCE               	movwf	Delay10KTCYx@unit& (0+255),b
  1660  00273C                     l1339:
  1661  00273C  0E0D               	movlw	13
  1662  00273E  0100               	movlb	0	; () banked
  1663  002740  6FCD               	movwf	??_Delay10KTCYx& (0+255),b
  1664  002742  0EFB               	movlw	251
  1665  002744                     u6867:
  1666  002744  2EE8               	decfsz	wreg,f,c
  1667  002746  D7FE               	bra	u6867
  1668  002748  2FCD               	decfsz	??_Delay10KTCYx& (0+255),f,b
  1669  00274A  D7FC               	bra	u6867
  1670  00274C  D000               	nop2	
  1671  00274E  0100               	movlb	0	; () banked
  1672  002750  2FCE               	decfsz	Delay10KTCYx@unit& (0+255),f,b
  1673  002752  D7F4               	goto	l1339
  1674  002754  0012               	return	
  1675  002756                     __end_of_Delay10KTCYx:
  1676                           	opt stack 0
  1677                           tblptru	equ	0xFF8
  1678                           tblptrh	equ	0xFF7
  1679                           tblptrl	equ	0xFF6
  1680                           tablat	equ	0xFF5
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           postdec1	equ	0xFE5
  1684                           fsr1l	equ	0xFE1
  1685                           status	equ	0xFD8
  1686                           
  1687 ;; *************** function _BusyXLCD *****************
  1688 ;; Defined at:
  1689 ;;		line 12 in file "busyxlcd.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;		None
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      unsigned char 
  1696 ;; Registers used:
  1697 ;;		wreg, cstack
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1703 ;;      Params:         0       0       0       0       0       0       0
  1704 ;;      Locals:         0       0       0       0       0       0       0
  1705 ;;      Temps:          0       0       0       0       0       0       0
  1706 ;;      Totals:         0       0       0       0       0       0       0
  1707 ;;Total ram usage:        0 bytes
  1708 ;; Hardware stack levels used:    1
  1709 ;; Hardware stack levels required when called:    6
  1710 ;; This function calls:
  1711 ;;		_DelayFor18TCY
  1712 ;; This function is called by:
  1713 ;;		_initXLCD
  1714 ;;		_OpenXLCD
  1715 ;;		_putrsXLCD
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           
  1719                           	psect	text7
  1720  0025A6                     __ptext7:
  1721                           	opt stack 0
  1722  0025A6                     _BusyXLCD:
  1723                           	opt stack 22
  1724                           
  1725                           ;busyxlcd.c: 14: LATAbits.LATA2 = 1;
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;incstack = 0
  1729  0025A6  8489               	bsf	3977,2,c	;volatile
  1730                           
  1731                           ;busyxlcd.c: 15: LATAbits.LATA3 = 0;
  1732  0025A8  9689               	bcf	3977,3,c	;volatile
  1733                           
  1734                           ;busyxlcd.c: 16: DelayFor18TCY();
  1735  0025AA  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1736                           
  1737                           ;busyxlcd.c: 17: LATAbits.LATA1 = 1;
  1738  0025AE  8289               	bsf	3977,1,c	;volatile
  1739                           
  1740                           ;busyxlcd.c: 18: DelayFor18TCY();
  1741  0025B0  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1742                           
  1743                           ;busyxlcd.c: 36: if(PORTB&0x08)
  1744  0025B4  A681               	btfss	3969,3,c	;volatile
  1745  0025B6  D00A               	goto	l9
  1746                           
  1747                           ;busyxlcd.c: 38: {
  1748                           ;busyxlcd.c: 39: LATAbits.LATA1 = 0;
  1749  0025B8  9289               	bcf	3977,1,c	;volatile
  1750                           
  1751                           ;busyxlcd.c: 40: DelayFor18TCY();
  1752  0025BA  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1753                           
  1754                           ;busyxlcd.c: 41: LATAbits.LATA1 = 1;
  1755  0025BE  8289               	bsf	3977,1,c	;volatile
  1756                           
  1757                           ;busyxlcd.c: 42: DelayFor18TCY();
  1758  0025C0  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1759                           
  1760                           ;busyxlcd.c: 43: LATAbits.LATA1 = 0;
  1761  0025C4  9289               	bcf	3977,1,c	;volatile
  1762                           
  1763                           ;busyxlcd.c: 44: LATAbits.LATA2 = 0;
  1764  0025C6  9489               	bcf	3977,2,c	;volatile
  1765                           
  1766                           ;busyxlcd.c: 45: return 1;
  1767  0025C8  0E01               	movlw	1
  1768                           
  1769                           ;busyxlcd.c: 46: }
  1770  0025CA  0012               	return	
  1771  0025CC                     l9:
  1772                           
  1773                           ;busyxlcd.c: 47: else
  1774                           ;busyxlcd.c: 48: {
  1775                           ;busyxlcd.c: 49: LATAbits.LATA1 = 0;
  1776  0025CC  9289               	bcf	3977,1,c	;volatile
  1777                           
  1778                           ;busyxlcd.c: 50: DelayFor18TCY();
  1779  0025CE  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1780                           
  1781                           ;busyxlcd.c: 51: LATAbits.LATA1 = 1;
  1782  0025D2  8289               	bsf	3977,1,c	;volatile
  1783                           
  1784                           ;busyxlcd.c: 52: DelayFor18TCY();
  1785  0025D4  EC03  F014         	call	_DelayFor18TCY	;wreg free
  1786                           
  1787                           ;busyxlcd.c: 53: LATAbits.LATA1 = 0;
  1788  0025D8  9289               	bcf	3977,1,c	;volatile
  1789                           
  1790                           ;busyxlcd.c: 54: LATAbits.LATA2 = 0;
  1791  0025DA  9489               	bcf	3977,2,c	;volatile
  1792                           
  1793                           ;busyxlcd.c: 55: return 0;
  1794  0025DC  0E00               	movlw	0
  1795  0025DE  0012               	return	
  1796  0025E0                     __end_of_BusyXLCD:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           postinc0	equ	0xFEE
  1803                           wreg	equ	0xFE8
  1804                           postdec1	equ	0xFE5
  1805                           fsr1l	equ	0xFE1
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _DelayFor18TCY *****************
  1809 ;; Defined at:
  1810 ;;		line 102 in file "main.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		wreg
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1824 ;;      Params:         0       0       0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0
  1827 ;;      Totals:         0       0       0       0       0       0       0
  1828 ;;Total ram usage:        0 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    5
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_BusyXLCD
  1835 ;;		_SetDDRamAddr
  1836 ;;		_WriteCmdXLCD
  1837 ;;		_ReadAddrXLCD
  1838 ;;		_ReadDataXLCD
  1839 ;;		_SetCGRamAddr
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text8
  1844  002806                     __ptext8:
  1845                           	opt stack 0
  1846  002806                     _DelayFor18TCY:
  1847                           	opt stack 23
  1848                           
  1849                           ;main.c: 104: _delay((unsigned long)((20)*(4000000/4000000.0)));
  1850                           
  1851                           ;incstack = 0
  1852  002806  0E06               	movlw	6
  1853  002808                     u6877:
  1854  002808  2EE8               	decfsz	wreg,f,c
  1855  00280A  D7FE               	bra	u6877
  1856  00280C  D000               	nop2	
  1857  00280E  0012               	return		;funcret
  1858  002810                     __end_of_DelayFor18TCY:
  1859                           	opt stack 0
  1860                           tblptru	equ	0xFF8
  1861                           tblptrh	equ	0xFF7
  1862                           tblptrl	equ	0xFF6
  1863                           tablat	equ	0xFF5
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           postdec1	equ	0xFE5
  1867                           fsr1l	equ	0xFE1
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function _initTimer *****************
  1871 ;; Defined at:
  1872 ;;		line 135 in file "main.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, status,2
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1886 ;;      Params:         0       0       0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0
  1889 ;;      Totals:         0       0       0       0       0       0       0
  1890 ;;Total ram usage:        0 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    5
  1893 ;; This function calls:
  1894 ;;		Nothing
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text9
  1901  0027BC                     __ptext9:
  1902                           	opt stack 0
  1903  0027BC                     _initTimer:
  1904                           	opt stack 25
  1905                           
  1906                           ;main.c: 138: T1CON = 0x8F;
  1907                           
  1908                           ;incstack = 0
  1909  0027BC  0E8F               	movlw	143
  1910  0027BE  6ECD               	movwf	4045,c	;volatile
  1911                           
  1912                           ;main.c: 140: TMR1 = 0x8000;
  1913  0027C0  0E80               	movlw	128
  1914  0027C2  6ECF               	movwf	4047,c	;volatile
  1915  0027C4  0E00               	movlw	0
  1916  0027C6  6ECE               	movwf	4046,c	;volatile
  1917                           
  1918                           ;main.c: 141: TMR1IE = 1;
  1919  0027C8  809D               	bsf	3997,0,c	;volatile
  1920                           
  1921                           ;main.c: 143: GIE = 1;
  1922  0027CA  8EF2               	bsf	intcon,7,c	;volatile
  1923                           
  1924                           ;main.c: 144: PEIE = 1;
  1925  0027CC  8CF2               	bsf	intcon,6,c	;volatile
  1926  0027CE  0012               	return		;funcret
  1927  0027D0                     __end_of_initTimer:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           intcon	equ	0xFF2
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postdec1	equ	0xFE5
  1937                           fsr1l	equ	0xFE1
  1938                           status	equ	0xFD8
  1939                           
  1940 ;; *************** function _initADC *****************
  1941 ;; Defined at:
  1942 ;;		line 125 in file "main.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;		None
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;  portconfig      1    5[BANK1 ] unsigned char 
  1947 ;;  adc_config2     1    4[BANK1 ] unsigned char 
  1948 ;;  adc_config1     1    3[BANK1 ] unsigned char 
  1949 ;;  i               1    2[BANK1 ] unsigned char 
  1950 ;;  config3         1    1[BANK1 ] unsigned char 
  1951 ;;  channel         1    0[BANK1 ] unsigned char 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      void 
  1954 ;; Registers used:
  1955 ;;		wreg, status,2, status,0, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1961 ;;      Params:         0       0       0       0       0       0       0
  1962 ;;      Locals:         0       0       6       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0       0       0
  1964 ;;      Totals:         0       0       6       0       0       0       0
  1965 ;;Total ram usage:        6 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    6
  1968 ;; This function calls:
  1969 ;;		_OpenADC
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text10
  1976  00261A                     __ptext10:
  1977                           	opt stack 0
  1978  00261A                     _initADC:
  1979                           	opt stack 24
  1980                           
  1981                           ;main.c: 127: unsigned char channel=0x00,adc_config1=0x00,adc_config2=0x00,config3=0x00,
      +                          portconfig=0x00,i=0;
  1982                           
  1983                           ;incstack = 0
  1984  00261A  0E00               	movlw	0
  1985  00261C  0101               	movlb	1	; () banked
  1986  00261E  6F00               	movwf	initADC@channel& (0+255),b
  1987  002620  0E00               	movlw	0
  1988  002622  6F03               	movwf	initADC@adc_config1& (0+255),b
  1989  002624  0E00               	movlw	0
  1990  002626  6F04               	movwf	initADC@adc_config2& (0+255),b
  1991  002628  0E00               	movlw	0
  1992  00262A  6F01               	movwf	initADC@config3& (0+255),b
  1993  00262C  0E00               	movlw	0
  1994  00262E  6F05               	movwf	initADC@portconfig& (0+255),b
  1995  002630  0E00               	movlw	0
  1996  002632  6F02               	movwf	initADC@i& (0+255),b
  1997                           
  1998                           ; BSR set to: 1
  1999                           ;main.c: 128: TRISAbits.RA0 = 1;
  2000  002634  8092               	bsf	3986,0,c	;volatile
  2001                           
  2002                           ;main.c: 129: adc_config1 = 0b11001111 & 0b11111111 & 0b11110101 ;
  2003  002636  0EC5               	movlw	197
  2004  002638  6F03               	movwf	initADC@adc_config1& (0+255),b
  2005                           
  2006                           ;main.c: 130: adc_config2 = 0b10000111 & 0b01111111 & 0b11111100 ;
  2007  00263A  0E04               	movlw	4
  2008  00263C  6F04               	movwf	initADC@adc_config2& (0+255),b
  2009                           
  2010                           ;main.c: 131: portconfig = 0b11111110 ;
  2011  00263E  0EFE               	movlw	254
  2012  002640  6F05               	movwf	initADC@portconfig& (0+255),b
  2013                           
  2014                           ; BSR set to: 1
  2015                           ;main.c: 132: OpenADC(adc_config1,adc_config2,portconfig);
  2016  002642  C104  F0CD         	movff	initADC@adc_config2,OpenADC@config2
  2017  002646  C105  F0CE         	movff	initADC@portconfig,OpenADC@portconfig
  2018  00264A  5103               	movf	initADC@adc_config1& (0+255),w,b
  2019  00264C  EC54  F011         	call	_OpenADC
  2020  002650  0012               	return		;funcret
  2021  002652                     __end_of_initADC:
  2022                           	opt stack 0
  2023                           tblptru	equ	0xFF8
  2024                           tblptrh	equ	0xFF7
  2025                           tblptrl	equ	0xFF6
  2026                           tablat	equ	0xFF5
  2027                           intcon	equ	0xFF2
  2028                           postinc0	equ	0xFEE
  2029                           wreg	equ	0xFE8
  2030                           postdec1	equ	0xFE5
  2031                           fsr1l	equ	0xFE1
  2032                           status	equ	0xFD8
  2033                           
  2034 ;; *************** function _OpenADC *****************
  2035 ;; Defined at:
  2036 ;;		line 68 in file "adcopen.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;  config          1    wreg     unsigned char 
  2039 ;;  config2         1   30[BANK0 ] unsigned char 
  2040 ;;  portconfig      1   31[BANK0 ] unsigned char 
  2041 ;; Auto vars:     Size  Location     Type
  2042 ;;  config          1   34[BANK0 ] unsigned char 
  2043 ;; Return value:  Size  Location     Type
  2044 ;;                  1    wreg      void 
  2045 ;; Registers used:
  2046 ;;		wreg, status,2, status,0
  2047 ;; Tracked objects:
  2048 ;;		On entry : 0/0
  2049 ;;		On exit  : 0/0
  2050 ;;		Unchanged: 0/0
  2051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2052 ;;      Params:         0       2       0       0       0       0       0
  2053 ;;      Locals:         0       1       0       0       0       0       0
  2054 ;;      Temps:          0       2       0       0       0       0       0
  2055 ;;      Totals:         0       5       0       0       0       0       0
  2056 ;;Total ram usage:        5 bytes
  2057 ;; Hardware stack levels used:    1
  2058 ;; Hardware stack levels required when called:    5
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		_initADC
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           	psect	text11
  2067  0022A8                     __ptext11:
  2068                           	opt stack 0
  2069  0022A8                     _OpenADC:
  2070                           	opt stack 24
  2071                           
  2072                           ;incstack = 0
  2073                           ;OpenADC@config stored from wreg
  2074  0022A8  0100               	movlb	0	; () banked
  2075  0022AA  6FD1               	movwf	OpenADC@config& (0+255),b
  2076                           
  2077                           ;adcopen.c: 72: ADCON0 = 0;
  2078  0022AC  0E00               	movlw	0
  2079  0022AE  6EC2               	movwf	4034,c	;volatile
  2080                           
  2081                           ;adcopen.c: 73: ADCON2 = 0;
  2082  0022B0  0E00               	movlw	0
  2083  0022B2  6EC0               	movwf	4032,c	;volatile
  2084                           
  2085                           ;adcopen.c: 75: ADCON0 = (config2 >> 1) & 0b00111100;
  2086  0022B4  0100               	movlb	0	; () banked
  2087  0022B6  90D8               	bcf	status,0,c
  2088  0022B8  31CD               	rrcf	OpenADC@config2& (0+255),w,b
  2089  0022BA  0B3C               	andlw	60
  2090  0022BC  6EC2               	movwf	4034,c	;volatile
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;adcopen.c: 76: ADCON1 = (portconfig & 0b00001111) |
  2094                           ;adcopen.c: 77: ((config2 << 4) & 0b00110000);
  2095  0022BE  C0CD  F0CF         	movff	OpenADC@config2,??_OpenADC
  2096  0022C2  3BCF               	swapf	??_OpenADC& (0+255),f,b
  2097  0022C4  0EF0               	movlw	240
  2098  0022C6  17CF               	andwf	??_OpenADC& (0+255),f,b
  2099  0022C8  0E30               	movlw	48
  2100  0022CA  17CF               	andwf	??_OpenADC& (0+255),f,b
  2101  0022CC  51CE               	movf	OpenADC@portconfig& (0+255),w,b
  2102  0022CE  0B0F               	andlw	15
  2103  0022D0  11CF               	iorwf	??_OpenADC& (0+255),w,b
  2104  0022D2  6EC1               	movwf	4033,c	;volatile
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;adcopen.c: 78: ADCON2 = (config & 0b10000000) |
  2108                           ;adcopen.c: 79: ((config >> 4) & 0b00000111) |
  2109                           ;adcopen.c: 80: ((config << 2) & 0b00111000);
  2110  0022D4  C0D1  F0CF         	movff	OpenADC@config,??_OpenADC
  2111  0022D8  90D8               	bcf	status,0,c
  2112  0022DA  37CF               	rlcf	??_OpenADC& (0+255),f,b
  2113  0022DC  90D8               	bcf	status,0,c
  2114  0022DE  37CF               	rlcf	??_OpenADC& (0+255),f,b
  2115  0022E0  0E38               	movlw	56
  2116  0022E2  17CF               	andwf	??_OpenADC& (0+255),f,b
  2117  0022E4  C0D1  F0D0         	movff	OpenADC@config,??_OpenADC+1
  2118  0022E8  3BD0               	swapf	(??_OpenADC+1)& (0+255),f,b
  2119  0022EA  0E0F               	movlw	15
  2120  0022EC  17D0               	andwf	(??_OpenADC+1)& (0+255),f,b
  2121  0022EE  0E07               	movlw	7
  2122  0022F0  17D0               	andwf	(??_OpenADC+1)& (0+255),f,b
  2123  0022F2  51D1               	movf	OpenADC@config& (0+255),w,b
  2124  0022F4  0B80               	andlw	128
  2125  0022F6  11D0               	iorwf	(??_OpenADC+1)& (0+255),w,b
  2126  0022F8  11CF               	iorwf	??_OpenADC& (0+255),w,b
  2127  0022FA  6EC0               	movwf	4032,c	;volatile
  2128                           
  2129                           ; BSR set to: 0
  2130                           ;adcopen.c: 82: if( config2 & 0b10000000 )
  2131  0022FC  AFCD               	btfss	OpenADC@config2& (0+255),7,b
  2132  0022FE  D003               	goto	l440
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;adcopen.c: 83: {
  2136                           ;adcopen.c: 84: PIR1bits.ADIF = 0;
  2137  002300  9C9E               	bcf	3998,6,c	;volatile
  2138                           
  2139                           ;adcopen.c: 85: PIE1bits.ADIE = 1;
  2140  002302  8C9D               	bsf	3997,6,c	;volatile
  2141                           
  2142                           ;adcopen.c: 86: INTCONbits.PEIE = 1;
  2143  002304  8CF2               	bsf	intcon,6,c	;volatile
  2144  002306                     l440:
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;adcopen.c: 87: }
  2148                           ;adcopen.c: 88: ADCON0bits.ADON = 1;
  2149  002306  80C2               	bsf	4034,0,c	;volatile
  2150                           
  2151                           ; BSR set to: 0
  2152  002308  0012               	return		;funcret
  2153  00230A                     __end_of_OpenADC:
  2154                           	opt stack 0
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           intcon	equ	0xFF2
  2160                           postinc0	equ	0xFEE
  2161                           wreg	equ	0xFE8
  2162                           postdec1	equ	0xFE5
  2163                           fsr1l	equ	0xFE1
  2164                           status	equ	0xFD8
  2165                           
  2166 ;; *************** function _OpenI2C *****************
  2167 ;; Defined at:
  2168 ;;		line 14 in file "i2c_open.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;  sync_mode       1    wreg     unsigned char 
  2171 ;;  slew            1   30[BANK0 ] unsigned char 
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;  sync_mode       1   31[BANK0 ] unsigned char 
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  1    wreg      void 
  2176 ;; Registers used:
  2177 ;;		wreg, status,2, status,0
  2178 ;; Tracked objects:
  2179 ;;		On entry : 0/0
  2180 ;;		On exit  : 0/0
  2181 ;;		Unchanged: 0/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2183 ;;      Params:         0       1       0       0       0       0       0
  2184 ;;      Locals:         0       1       0       0       0       0       0
  2185 ;;      Temps:          0       0       0       0       0       0       0
  2186 ;;      Totals:         0       2       0       0       0       0       0
  2187 ;;Total ram usage:        2 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; Hardware stack levels required when called:    5
  2190 ;; This function calls:
  2191 ;;		Nothing
  2192 ;; This function is called by:
  2193 ;;		_main
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text12
  2198  0026F8                     __ptext12:
  2199                           	opt stack 0
  2200  0026F8                     _OpenI2C:
  2201                           	opt stack 25
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;incstack = 0
  2205                           ;OpenI2C@sync_mode stored from wreg
  2206  0026F8  0100               	movlb	0	; () banked
  2207  0026FA  6FCE               	movwf	OpenI2C@sync_mode& (0+255),b
  2208                           
  2209                           ;i2c_open.c: 16: SSPSTAT &= 0x3F;
  2210  0026FC  0E3F               	movlw	63
  2211  0026FE  16C7               	andwf	4039,f,c	;volatile
  2212                           
  2213                           ;i2c_open.c: 17: SSPCON1 = 0x00;
  2214  002700  0E00               	movlw	0
  2215  002702  6EC6               	movwf	4038,c	;volatile
  2216                           
  2217                           ;i2c_open.c: 18: SSPCON2 = 0x00;
  2218  002704  0E00               	movlw	0
  2219  002706  6EC5               	movwf	4037,c	;volatile
  2220                           
  2221                           ;i2c_open.c: 19: SSPCON1 |= sync_mode;
  2222  002708  0100               	movlb	0	; () banked
  2223  00270A  51CE               	movf	OpenI2C@sync_mode& (0+255),w,b
  2224  00270C  12C6               	iorwf	4038,f,c	;volatile
  2225                           
  2226                           ;i2c_open.c: 20: SSPSTAT |= slew;
  2227  00270E  51CD               	movf	OpenI2C@slew& (0+255),w,b
  2228  002710  12C7               	iorwf	4039,f,c	;volatile
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;i2c_open.c: 22: TRISCbits.TRISC3 = 1;
  2232  002712  8694               	bsf	3988,3,c	;volatile
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;i2c_open.c: 23: TRISCbits.TRISC4 = 1;
  2236  002714  8894               	bsf	3988,4,c	;volatile
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;i2c_open.c: 24: SSPCON1 |= 0b00100000;
  2240  002716  8AC6               	bsf	4038,5,c	;volatile
  2241                           
  2242                           ; BSR set to: 0
  2243  002718  0012               	return		;funcret
  2244  00271A                     __end_of_OpenI2C:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           intcon	equ	0xFF2
  2251                           postinc0	equ	0xFEE
  2252                           wreg	equ	0xFE8
  2253                           postdec1	equ	0xFE5
  2254                           fsr1l	equ	0xFE1
  2255                           status	equ	0xFD8
  2256                           
  2257 ;; *************** function _CloseTimer1 *****************
  2258 ;; Defined at:
  2259 ;;		line 15 in file "t1close.c"
  2260 ;; Parameters:    Size  Location     Type
  2261 ;;		None
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;		None
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		None
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2273 ;;      Params:         0       0       0       0       0       0       0
  2274 ;;      Locals:         0       0       0       0       0       0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0
  2276 ;;      Totals:         0       0       0       0       0       0       0
  2277 ;;Total ram usage:        0 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    5
  2280 ;; This function calls:
  2281 ;;		Nothing
  2282 ;; This function is called by:
  2283 ;;		_main
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text13
  2288  00281A                     __ptext13:
  2289                           	opt stack 0
  2290  00281A                     _CloseTimer1:
  2291                           	opt stack 25
  2292                           
  2293                           ;t1close.c: 17: T1CONbits.TMR1ON = 0;
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;incstack = 0
  2297  00281A  90CD               	bcf	4045,0,c	;volatile
  2298                           
  2299                           ;t1close.c: 18: PIE1bits.TMR1IE = 0;
  2300  00281C  909D               	bcf	3997,0,c	;volatile
  2301  00281E  0012               	return		;funcret
  2302  002820                     __end_of_CloseTimer1:
  2303                           	opt stack 0
  2304                           tblptru	equ	0xFF8
  2305                           tblptrh	equ	0xFF7
  2306                           tblptrl	equ	0xFF6
  2307                           tablat	equ	0xFF5
  2308                           intcon	equ	0xFF2
  2309                           postinc0	equ	0xFEE
  2310                           wreg	equ	0xFE8
  2311                           postdec1	equ	0xFE5
  2312                           fsr1l	equ	0xFE1
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _TIMER1 *****************
  2316 ;; Defined at:
  2317 ;;		line 420 in file "main.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  time           20    0[BANK0 ] unsigned char [20]
  2322 ;;  str_tmp        10   20[BANK0 ] unsigned char [10]
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2332 ;;      Params:         0       0       0       0       0       0       0
  2333 ;;      Locals:         0      30       0       0       0       0       0
  2334 ;;      Temps:         18       0       0       0       0       0       0
  2335 ;;      Totals:        18      30       0       0       0       0       0
  2336 ;;Total ram usage:       48 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    4
  2339 ;; This function calls:
  2340 ;;		_putsXLCD
  2341 ;;		_read_temperature
  2342 ;;		_sprintf
  2343 ;;		i2_initXLCD
  2344 ;; This function is called by:
  2345 ;;		Interrupt level 2
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	intcode
  2350  000008                     __pintcode:
  2351                           	opt stack 0
  2352  000008                     _TIMER1:
  2353                           	opt stack 22
  2354                           
  2355                           ;incstack = 0
  2356  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2357  00000A  EDF5  F00C         	call	int_func,f	;refresh shadow registers
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           intcon	equ	0xFF2
  2363                           postinc0	equ	0xFEE
  2364                           wreg	equ	0xFE8
  2365                           postdec1	equ	0xFE5
  2366                           fsr1l	equ	0xFE1
  2367                           status	equ	0xFD8
  2368                           
  2369                           	psect	intcode_body
  2370  0019EA                     __pintcode_body:
  2371                           	opt stack 22
  2372  0019EA                     int_func:
  2373                           	opt stack 22
  2374  0019EA  0006               	pop		; remove dummy address from shadow register refresh
  2375  0019EC  CFFA F06D          	movff	pclath,??_TIMER1
  2376  0019F0  CFFB F06E          	movff	pclatu,??_TIMER1+1
  2377  0019F4  CFE9 F06F          	movff	fsr0l,??_TIMER1+2
  2378  0019F8  CFEA F070          	movff	fsr0h,??_TIMER1+3
  2379  0019FC  CFE1 F071          	movff	fsr1l,??_TIMER1+4
  2380  001A00  CFE2 F072          	movff	fsr1h,??_TIMER1+5
  2381  001A04  CFD9 F073          	movff	fsr2l,??_TIMER1+6
  2382  001A08  CFDA F074          	movff	fsr2h,??_TIMER1+7
  2383  001A0C  CFF3 F075          	movff	prodl,??_TIMER1+8
  2384  001A10  CFF4 F076          	movff	prodh,??_TIMER1+9
  2385  001A14  CFF6 F077          	movff	tblptrl,??_TIMER1+10
  2386  001A18  CFF7 F078          	movff	tblptrh,??_TIMER1+11
  2387  001A1C  CFF8 F079          	movff	tblptru,??_TIMER1+12
  2388  001A20  CFF5 F07A          	movff	tablat,??_TIMER1+13
  2389  001A24  C07F  F07B         	movff	btemp,??_TIMER1+14
  2390  001A28  C080  F07C         	movff	btemp+1,??_TIMER1+15
  2391  001A2C  C081  F07D         	movff	btemp+2,??_TIMER1+16
  2392  001A30  C082  F07E         	movff	btemp+3,??_TIMER1+17
  2393                           
  2394                           ;main.c: 421: char str_tmp[10];
  2395                           ;main.c: 422: char time[20];
  2396                           ;main.c: 424: if(TMR1IF == 1){
  2397  001A34  A09E               	btfss	3998,0,c	;volatile
  2398  001A36  D046               	goto	i2l267
  2399                           
  2400                           ;main.c: 425: initXLCD();
  2401  001A38  ECAB  F013         	call	i2_initXLCD	;wreg free
  2402                           
  2403                           ;main.c: 426: TMR1IF = 0;
  2404  001A3C  909E               	bcf	3998,0,c	;volatile
  2405                           
  2406                           ;main.c: 427: TMR1 = 0x8000;
  2407  001A3E  0E80               	movlw	128
  2408  001A40  6ECF               	movwf	4047,c	;volatile
  2409  001A42  0E00               	movlw	0
  2410  001A44  6ECE               	movwf	4046,c	;volatile
  2411                           
  2412                           ;main.c: 428: sec++;
  2413  001A46  0100               	movlb	0	; () banked
  2414  001A48  2BA5               	incf	_sec& (0+255),f,b
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;main.c: 431: read_temperature();
  2418  001A4A  EC22  F011         	call	_read_temperature	;wreg free
  2419                           
  2420                           ;main.c: 433: sprintf(time, "%d:%d:%d", hour,min,sec);
  2421  001A4E  0EAF               	movlw	low TIMER1@time
  2422  001A50  6E40               	movwf	sprintf@sp,c
  2423  001A52  0E00               	movlw	high TIMER1@time
  2424  001A54  6E41               	movwf	sprintf@sp+1,c
  2425  001A56  0E88               	movlw	low (STR_2+3)
  2426  001A58  6E42               	movwf	sprintf@f,c
  2427  001A5A  0E06               	movlw	high (STR_2+3)
  2428  001A5C  6E43               	movwf	sprintf@f+1,c
  2429  001A5E  C0A3  F044         	movff	_hour,?_sprintf+4
  2430  001A62  6A45               	clrf	?_sprintf+5,c
  2431  001A64  C0A4  F046         	movff	_min,?_sprintf+6
  2432  001A68  6A47               	clrf	?_sprintf+7,c
  2433  001A6A  C0A5  F048         	movff	_sec,?_sprintf+8
  2434  001A6E  6A49               	clrf	?_sprintf+9,c
  2435  001A70  EC5D  F003         	call	_sprintf	;wreg free
  2436                           
  2437                           ;main.c: 434: sprintf(str_tmp, "%.2f %s",converted_temp.number, time);
  2438  001A74  0EC3               	movlw	low TIMER1@str_tmp
  2439  001A76  6E40               	movwf	sprintf@sp,c
  2440  001A78  0E00               	movlw	high TIMER1@str_tmp
  2441  001A7A  6E41               	movwf	sprintf@sp+1,c
  2442  001A7C  0E9B               	movlw	low STR_9
  2443  001A7E  6E42               	movwf	sprintf@f,c
  2444  001A80  0E06               	movlw	high STR_9
  2445  001A82  6E43               	movwf	sprintf@f+1,c
  2446  001A84  C09E  F044         	movff	_converted_temp,?_sprintf+4
  2447  001A88  C09F  F045         	movff	_converted_temp+1,?_sprintf+5
  2448  001A8C  C0A0  F046         	movff	_converted_temp+2,?_sprintf+6
  2449  001A90  0EAF               	movlw	low TIMER1@time
  2450  001A92  6E47               	movwf	?_sprintf+7,c
  2451  001A94  0E00               	movlw	high TIMER1@time
  2452  001A96  6E48               	movwf	?_sprintf+8,c
  2453  001A98  EC5D  F003         	call	_sprintf	;wreg free
  2454                           
  2455                           ;main.c: 435: putsXLCD(str_tmp);
  2456  001A9C  0EC3               	movlw	low TIMER1@str_tmp
  2457  001A9E  6E02               	movwf	putsXLCD@buffer,c
  2458  001AA0  0E00               	movlw	high TIMER1@str_tmp
  2459  001AA2  6E03               	movwf	putsXLCD@buffer+1,c
  2460  001AA4  ECB3  F011         	call	_putsXLCD	;wreg free
  2461                           
  2462                           ;main.c: 445: if(sec==60)
  2463  001AA8  0E3C               	movlw	60
  2464  001AAA  0100               	movlb	0	; () banked
  2465  001AAC  19A5               	xorwf	_sec& (0+255),w,b
  2466  001AAE  A4D8               	btfss	status,2,c
  2467  001AB0  D009               	goto	i2l267
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;main.c: 446: {
  2471                           ;main.c: 469: min++;
  2472  001AB2  2BA4               	incf	_min& (0+255),f,b
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;main.c: 470: sec=0;
  2476  001AB4  0E00               	movlw	0
  2477  001AB6  6FA5               	movwf	_sec& (0+255),b
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;main.c: 471: if(min>=60)
  2481  001AB8  0E3B               	movlw	59
  2482  001ABA  65A4               	cpfsgt	_min& (0+255),b
  2483  001ABC  D003               	goto	i2l267
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;main.c: 472: {
  2487                           ;main.c: 473: hour++;
  2488  001ABE  2BA3               	incf	_hour& (0+255),f,b
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;main.c: 474: min=0;
  2492  001AC0  0E00               	movlw	0
  2493  001AC2  6FA4               	movwf	_min& (0+255),b
  2494  001AC4                     i2l267:
  2495                           
  2496                           ; BSR set to: 0
  2497                           
  2498                           ; BSR set to: 0
  2499                           
  2500                           ; BSR set to: 0
  2501  001AC4  C07E  F082         	movff	??_TIMER1+17,btemp+3
  2502  001AC8  C07D  F081         	movff	??_TIMER1+16,btemp+2
  2503  001ACC  C07C  F080         	movff	??_TIMER1+15,btemp+1
  2504  001AD0  C07B  F07F         	movff	??_TIMER1+14,btemp
  2505  001AD4  C07A  FFF5         	movff	??_TIMER1+13,tablat
  2506  001AD8  C079  FFF8         	movff	??_TIMER1+12,tblptru
  2507  001ADC  C078  FFF7         	movff	??_TIMER1+11,tblptrh
  2508  001AE0  C077  FFF6         	movff	??_TIMER1+10,tblptrl
  2509  001AE4  C076  FFF4         	movff	??_TIMER1+9,prodh
  2510  001AE8  C075  FFF3         	movff	??_TIMER1+8,prodl
  2511  001AEC  C074  FFDA         	movff	??_TIMER1+7,fsr2h
  2512  001AF0  C073  FFD9         	movff	??_TIMER1+6,fsr2l
  2513  001AF4  C072  FFE2         	movff	??_TIMER1+5,fsr1h
  2514  001AF8  C071  FFE1         	movff	??_TIMER1+4,fsr1l
  2515  001AFC  C070  FFEA         	movff	??_TIMER1+3,fsr0h
  2516  001B00  C06F  FFE9         	movff	??_TIMER1+2,fsr0l
  2517  001B04  C06E  FFFB         	movff	??_TIMER1+1,pclatu
  2518  001B08  C06D  FFFA         	movff	??_TIMER1,pclath
  2519  001B0C  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2520  001B0E  0011               	retfie		f
  2521  001B10                     __end_of_TIMER1:
  2522                           	opt stack 0
  2523                           pclatu	equ	0xFFB
  2524                           pclath	equ	0xFFA
  2525                           tblptru	equ	0xFF8
  2526                           tblptrh	equ	0xFF7
  2527                           tblptrl	equ	0xFF6
  2528                           tablat	equ	0xFF5
  2529                           prodh	equ	0xFF4
  2530                           prodl	equ	0xFF3
  2531                           intcon	equ	0xFF2
  2532                           postinc0	equ	0xFEE
  2533                           fsr0h	equ	0xFEA
  2534                           fsr0l	equ	0xFE9
  2535                           wreg	equ	0xFE8
  2536                           postdec1	equ	0xFE5
  2537                           fsr1h	equ	0xFE2
  2538                           fsr1l	equ	0xFE1
  2539                           fsr2h	equ	0xFDA
  2540                           fsr2l	equ	0xFD9
  2541                           status	equ	0xFD8
  2542                           
  2543 ;; *************** function i2_initXLCD *****************
  2544 ;; Defined at:
  2545 ;;		line 117 in file "main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2559 ;;      Params:         0       0       0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0
  2562 ;;      Totals:         0       0       0       0       0       0       0
  2563 ;;Total ram usage:        0 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    3
  2566 ;; This function calls:
  2567 ;;		i2_BusyXLCD
  2568 ;;		i2_OpenXLCD
  2569 ;;		i2_WriteCmdXLCD
  2570 ;; This function is called by:
  2571 ;;		_TIMER1
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text15
  2576  002756                     __ptext15:
  2577                           	opt stack 0
  2578  002756                     i2_initXLCD:
  2579                           	opt stack 22
  2580                           
  2581                           ;main.c: 119: OpenXLCD( 0b00101100 & 0b00111000 );
  2582                           
  2583                           ;incstack = 0
  2584  002756  0E28               	movlw	40
  2585  002758  EC9A  F00F         	call	i2_OpenXLCD
  2586  00275C  ECF0  F012         	call	i2_BusyXLCD	;wreg free
  2587  002760  0900               	iorlw	0
  2588  002762  A4D8               	btfss	status,2,c
  2589  002764  D7FB               	goto	i2l184
  2590                           
  2591                           ;main.c: 121: WriteCmdXLCD(0x06);
  2592  002766  0E06               	movlw	6
  2593  002768  EC78  F012         	call	i2_WriteCmdXLCD
  2594                           
  2595                           ;main.c: 122: WriteCmdXLCD(0x0C);
  2596  00276C  0E0C               	movlw	12
  2597  00276E  EC78  F012         	call	i2_WriteCmdXLCD
  2598  002772  0012               	return		;funcret
  2599  002774                     __end_ofi2_initXLCD:
  2600                           	opt stack 0
  2601                           pclatu	equ	0xFFB
  2602                           pclath	equ	0xFFA
  2603                           tblptru	equ	0xFF8
  2604                           tblptrh	equ	0xFF7
  2605                           tblptrl	equ	0xFF6
  2606                           tablat	equ	0xFF5
  2607                           prodh	equ	0xFF4
  2608                           prodl	equ	0xFF3
  2609                           intcon	equ	0xFF2
  2610                           postinc0	equ	0xFEE
  2611                           fsr0h	equ	0xFEA
  2612                           fsr0l	equ	0xFE9
  2613                           wreg	equ	0xFE8
  2614                           postdec1	equ	0xFE5
  2615                           fsr1h	equ	0xFE2
  2616                           fsr1l	equ	0xFE1
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function i2_OpenXLCD *****************
  2622 ;; Defined at:
  2623 ;;		line 20 in file "openxlcd.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  lcdtype         1    wreg     unsigned char 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;  lcdtype         1    4[COMRAM] unsigned char 
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      void 
  2630 ;; Registers used:
  2631 ;;		wreg, status,2, status,0, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2637 ;;      Params:         0       0       0       0       0       0       0
  2638 ;;      Locals:         1       0       0       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0       0       0
  2640 ;;      Totals:         1       0       0       0       0       0       0
  2641 ;;Total ram usage:        1 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    2
  2644 ;; This function calls:
  2645 ;;		i2_BusyXLCD
  2646 ;;		i2_Delay10KTCYx
  2647 ;;		i2_DelayPORXLCD
  2648 ;;		i2_SetDDRamAddr
  2649 ;;		i2_WriteCmdXLCD
  2650 ;; This function is called by:
  2651 ;;		i2_initXLCD
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           	psect	text16
  2656  001F34                     __ptext16:
  2657                           	opt stack 0
  2658  001F34                     i2_OpenXLCD:
  2659                           	opt stack 22
  2660                           
  2661                           ;incstack = 0
  2662                           ;i2OpenXLCD@lcdtype stored from wreg
  2663  001F34  6E05               	movwf	i2OpenXLCD@lcdtype,c
  2664                           
  2665                           ;openxlcd.c: 32: PORTB &= 0xf0;
  2666  001F36  0EF0               	movlw	240
  2667  001F38  1681               	andwf	3969,f,c	;volatile
  2668                           
  2669                           ;openxlcd.c: 33: TRISB &= 0xF0;
  2670  001F3A  0EF0               	movlw	240
  2671  001F3C  1693               	andwf	3987,f,c	;volatile
  2672                           
  2673                           ;openxlcd.c: 36: TRISAbits.TRISA2 = 0;
  2674  001F3E  9492               	bcf	3986,2,c	;volatile
  2675                           
  2676                           ;openxlcd.c: 37: TRISAbits.TRISA3 = 0;
  2677  001F40  9692               	bcf	3986,3,c	;volatile
  2678                           
  2679                           ;openxlcd.c: 38: TRISAbits.TRISA1 = 0;
  2680  001F42  9292               	bcf	3986,1,c	;volatile
  2681                           
  2682                           ;openxlcd.c: 39: LATAbits.LATA2 = 0;
  2683  001F44  9489               	bcf	3977,2,c	;volatile
  2684                           
  2685                           ;openxlcd.c: 40: LATAbits.LATA3 = 0;
  2686  001F46  9689               	bcf	3977,3,c	;volatile
  2687                           
  2688                           ;openxlcd.c: 41: LATAbits.LATA1 = 0;
  2689  001F48  9289               	bcf	3977,1,c	;volatile
  2690                           
  2691                           ;openxlcd.c: 44: DelayPORXLCD();
  2692  001F4A  ECE8  F013         	call	i2_DelayPORXLCD	;wreg free
  2693                           
  2694                           ;openxlcd.c: 46: WriteCmdXLCD(0x30);
  2695  001F4E  0E30               	movlw	48
  2696  001F50  EC78  F012         	call	i2_WriteCmdXLCD
  2697                           
  2698                           ;openxlcd.c: 47: Delay10KTCYx(0x05);
  2699  001F54  0E05               	movlw	5
  2700  001F56  ECC9  F013         	call	i2_Delay10KTCYx
  2701                           
  2702                           ;openxlcd.c: 49: WriteCmdXLCD(0x30);
  2703  001F5A  0E30               	movlw	48
  2704  001F5C  EC78  F012         	call	i2_WriteCmdXLCD
  2705                           
  2706                           ;openxlcd.c: 50: Delay10KTCYx(0x01);
  2707  001F60  0E01               	movlw	1
  2708  001F62  ECC9  F013         	call	i2_Delay10KTCYx
  2709                           
  2710                           ;openxlcd.c: 53: WriteCmdXLCD(0x32);
  2711  001F66  0E32               	movlw	50
  2712  001F68  EC78  F012         	call	i2_WriteCmdXLCD
  2713  001F6C  ECF0  F012         	call	i2_BusyXLCD	;wreg free
  2714  001F70  0900               	iorlw	0
  2715  001F72  A4D8               	btfss	status,2,c
  2716  001F74  D7FB               	goto	i2l298
  2717  001F76                     i2u471_40:
  2718                           
  2719                           ;openxlcd.c: 59: while(BusyXLCD());
  2720  001F76  ECF0  F012         	call	i2_BusyXLCD	;wreg free
  2721  001F7A  0900               	iorlw	0
  2722  001F7C  A4D8               	btfss	status,2,c
  2723  001F7E  D7FB               	goto	i2u471_40
  2724                           
  2725                           ;openxlcd.c: 60: WriteCmdXLCD(lcdtype);
  2726  001F80  5005               	movf	i2OpenXLCD@lcdtype,w,c
  2727  001F82  EC78  F012         	call	i2_WriteCmdXLCD
  2728  001F86  ECF0  F012         	call	i2_BusyXLCD	;wreg free
  2729  001F8A  0900               	iorlw	0
  2730  001F8C  A4D8               	btfss	status,2,c
  2731  001F8E  D7FB               	goto	i2l304
  2732                           
  2733                           ;openxlcd.c: 64: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  2734  001F90  0E08               	movlw	8
  2735  001F92  EC78  F012         	call	i2_WriteCmdXLCD
  2736  001F96  ECF0  F012         	call	i2_BusyXLCD	;wreg free
  2737  001F9A  0900               	iorlw	0
  2738  001F9C  A4D8               	btfss	status,2,c
  2739  001F9E  D7FB               	goto	i2l307
  2740                           
  2741                           ;openxlcd.c: 66: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  2742  001FA0  0E0F               	movlw	15
  2743  001FA2  EC78  F012         	call	i2_WriteCmdXLCD
  2744  001FA6  ECF0  F012         	call	i2_BusyXLCD	;wreg free
  2745  001FAA  0900               	iorlw	0
  2746  001FAC  A4D8               	btfss	status,2,c
  2747  001FAE  D7FB               	goto	i2l310
  2748                           
  2749                           ;openxlcd.c: 70: WriteCmdXLCD(0x01);
  2750  001FB0  0E01               	movlw	1
  2751  001FB2  EC78  F012         	call	i2_WriteCmdXLCD
  2752  001FB6  ECF0  F012         	call	i2_BusyXLCD	;wreg free
  2753  001FBA  0900               	iorlw	0
  2754  001FBC  A4D8               	btfss	status,2,c
  2755  001FBE  D7FB               	goto	i2l313
  2756                           
  2757                           ;openxlcd.c: 74: WriteCmdXLCD(0b00000100);
  2758  001FC0  0E04               	movlw	4
  2759  001FC2  EC78  F012         	call	i2_WriteCmdXLCD
  2760  001FC6  ECF0  F012         	call	i2_BusyXLCD	;wreg free
  2761  001FCA  0900               	iorlw	0
  2762  001FCC  A4D8               	btfss	status,2,c
  2763  001FCE  D7FB               	goto	i2l316
  2764                           
  2765                           ;openxlcd.c: 78: SetDDRamAddr(0x80);
  2766  001FD0  0E80               	movlw	128
  2767  001FD2  EC0D  F012         	call	i2_SetDDRamAddr
  2768  001FD6  0012               	return	
  2769  001FD8                     __end_ofi2_OpenXLCD:
  2770                           	opt stack 0
  2771                           pclatu	equ	0xFFB
  2772                           pclath	equ	0xFFA
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           prodh	equ	0xFF4
  2778                           prodl	equ	0xFF3
  2779                           intcon	equ	0xFF2
  2780                           postinc0	equ	0xFEE
  2781                           fsr0h	equ	0xFEA
  2782                           fsr0l	equ	0xFE9
  2783                           wreg	equ	0xFE8
  2784                           postdec1	equ	0xFE5
  2785                           fsr1h	equ	0xFE2
  2786                           fsr1l	equ	0xFE1
  2787                           fsr2h	equ	0xFDA
  2788                           fsr2l	equ	0xFD9
  2789                           status	equ	0xFD8
  2790                           
  2791 ;; *************** function i2_WriteCmdXLCD *****************
  2792 ;; Defined at:
  2793 ;;		line 14 in file "wcmdxlcd.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  cmd             1    wreg     unsigned char 
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  cmd             1    0[COMRAM] unsigned char 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		wreg, status,2, status,0, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2807 ;;      Params:         0       0       0       0       0       0       0
  2808 ;;      Locals:         1       0       0       0       0       0       0
  2809 ;;      Temps:          0       0       0       0       0       0       0
  2810 ;;      Totals:         1       0       0       0       0       0       0
  2811 ;;Total ram usage:        1 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    1
  2814 ;; This function calls:
  2815 ;;		i2_DelayFor18TCY
  2816 ;; This function is called by:
  2817 ;;		i2_initXLCD
  2818 ;;		i2_OpenXLCD
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text17
  2823  0024F0                     __ptext17:
  2824                           	opt stack 0
  2825  0024F0                     i2_WriteCmdXLCD:
  2826                           	opt stack 23
  2827                           
  2828                           ;incstack = 0
  2829                           ;i2WriteCmdXLCD@cmd stored from wreg
  2830  0024F0  6E01               	movwf	i2WriteCmdXLCD@cmd,c
  2831                           
  2832                           ;wcmdxlcd.c: 33: TRISB &= 0xf0;
  2833  0024F2  0EF0               	movlw	240
  2834  0024F4  1693               	andwf	3987,f,c	;volatile
  2835                           
  2836                           ;wcmdxlcd.c: 34: PORTB &= 0xf0;
  2837  0024F6  0EF0               	movlw	240
  2838  0024F8  1681               	andwf	3969,f,c	;volatile
  2839                           
  2840                           ;wcmdxlcd.c: 35: PORTB |= (cmd>>4)&0x0f;
  2841  0024FA  3801               	swapf	i2WriteCmdXLCD@cmd,w,c
  2842  0024FC  0B0F               	andlw	15
  2843  0024FE  0B0F               	andlw	15
  2844  002500  1281               	iorwf	3969,f,c	;volatile
  2845                           
  2846                           ;wcmdxlcd.c: 37: LATAbits.LATA2 = 0;
  2847  002502  9489               	bcf	3977,2,c	;volatile
  2848                           
  2849                           ;wcmdxlcd.c: 38: LATAbits.LATA3 = 0;
  2850  002504  9689               	bcf	3977,3,c	;volatile
  2851                           
  2852                           ;wcmdxlcd.c: 39: DelayFor18TCY();
  2853  002506  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  2854                           
  2855                           ;wcmdxlcd.c: 40: LATAbits.LATA1 = 1;
  2856  00250A  8289               	bsf	3977,1,c	;volatile
  2857                           
  2858                           ;wcmdxlcd.c: 41: DelayFor18TCY();
  2859  00250C  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  2860                           
  2861                           ;wcmdxlcd.c: 42: LATAbits.LATA1 = 0;
  2862  002510  9289               	bcf	3977,1,c	;volatile
  2863                           
  2864                           ;wcmdxlcd.c: 47: PORTB &= 0xf0;
  2865  002512  0EF0               	movlw	240
  2866  002514  1681               	andwf	3969,f,c	;volatile
  2867                           
  2868                           ;wcmdxlcd.c: 48: PORTB |= cmd&0x0f;
  2869  002516  5001               	movf	i2WriteCmdXLCD@cmd,w,c
  2870  002518  0B0F               	andlw	15
  2871  00251A  1281               	iorwf	3969,f,c	;volatile
  2872                           
  2873                           ;wcmdxlcd.c: 50: DelayFor18TCY();
  2874  00251C  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  2875                           
  2876                           ;wcmdxlcd.c: 51: LATAbits.LATA1 = 1;
  2877  002520  8289               	bsf	3977,1,c	;volatile
  2878                           
  2879                           ;wcmdxlcd.c: 52: DelayFor18TCY();
  2880  002522  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  2881                           
  2882                           ;wcmdxlcd.c: 53: LATAbits.LATA1 = 0;
  2883  002526  9289               	bcf	3977,1,c	;volatile
  2884                           
  2885                           ;wcmdxlcd.c: 57: TRISB |= 0x0f;
  2886  002528  0E0F               	movlw	15
  2887  00252A  1293               	iorwf	3987,f,c	;volatile
  2888  00252C  0012               	return	
  2889  00252E                     __end_ofi2_WriteCmdXLCD:
  2890                           	opt stack 0
  2891                           pclatu	equ	0xFFB
  2892                           pclath	equ	0xFFA
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           prodh	equ	0xFF4
  2898                           prodl	equ	0xFF3
  2899                           intcon	equ	0xFF2
  2900                           postinc0	equ	0xFEE
  2901                           fsr0h	equ	0xFEA
  2902                           fsr0l	equ	0xFE9
  2903                           wreg	equ	0xFE8
  2904                           postdec1	equ	0xFE5
  2905                           fsr1h	equ	0xFE2
  2906                           fsr1l	equ	0xFE1
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8
  2910                           
  2911 ;; *************** function i2_SetDDRamAddr *****************
  2912 ;; Defined at:
  2913 ;;		line 14 in file "setddram.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;  DDaddr          1    wreg     unsigned char 
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;  DDaddr          1    3[COMRAM] unsigned char 
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      void 
  2920 ;; Registers used:
  2921 ;;		wreg, status,2, status,0, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2927 ;;      Params:         0       0       0       0       0       0       0
  2928 ;;      Locals:         1       0       0       0       0       0       0
  2929 ;;      Temps:          3       0       0       0       0       0       0
  2930 ;;      Totals:         4       0       0       0       0       0       0
  2931 ;;Total ram usage:        4 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:    1
  2934 ;; This function calls:
  2935 ;;		i2_DelayFor18TCY
  2936 ;; This function is called by:
  2937 ;;		i2_OpenXLCD
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text18
  2942  00241A                     __ptext18:
  2943                           	opt stack 0
  2944  00241A                     i2_SetDDRamAddr:
  2945                           	opt stack 22
  2946                           
  2947                           ;incstack = 0
  2948                           ;i2SetDDRamAddr@DDaddr stored from wreg
  2949  00241A  6E04               	movwf	i2SetDDRamAddr@DDaddr,c
  2950                           
  2951                           ;setddram.c: 33: TRISB &= 0xf0;
  2952  00241C  0EF0               	movlw	240
  2953  00241E  1693               	andwf	3987,f,c	;volatile
  2954                           
  2955                           ;setddram.c: 34: PORTB &= 0xf0;
  2956  002420  0EF0               	movlw	240
  2957  002422  1681               	andwf	3969,f,c	;volatile
  2958                           
  2959                           ;setddram.c: 35: PORTB |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  2960  002424  5004               	movf	i2SetDDRamAddr@DDaddr,w,c
  2961  002426  6E01               	movwf	??i2_SetDDRamAddr& (0+255),c
  2962  002428  6A02               	clrf	(??i2_SetDDRamAddr+1)& (0+255),c
  2963  00242A  8E01               	bsf	??i2_SetDDRamAddr,7,c
  2964  00242C  0E04               	movlw	4
  2965  00242E  6E03               	movwf	(??i2_SetDDRamAddr+2)& (0+255),c
  2966  002430                     i2u396_45:
  2967  002430  3402               	rlcf	??i2_SetDDRamAddr+1,w,c
  2968  002432  3202               	rrcf	??i2_SetDDRamAddr+1,f,c
  2969  002434  3201               	rrcf	??i2_SetDDRamAddr,f,c
  2970  002436  2E03               	decfsz	(??i2_SetDDRamAddr+2)& (0+255),f,c
  2971  002438  D7FB               	goto	i2u396_45
  2972  00243A  5001               	movf	??i2_SetDDRamAddr,w,c
  2973  00243C  0B0F               	andlw	15
  2974  00243E  1281               	iorwf	3969,f,c	;volatile
  2975                           
  2976                           ;setddram.c: 37: LATAbits.LATA2 = 0;
  2977  002440  9489               	bcf	3977,2,c	;volatile
  2978                           
  2979                           ;setddram.c: 38: LATAbits.LATA3 = 0;
  2980  002442  9689               	bcf	3977,3,c	;volatile
  2981                           
  2982                           ;setddram.c: 39: DelayFor18TCY();
  2983  002444  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  2984                           
  2985                           ;setddram.c: 40: LATAbits.LATA1 = 1;
  2986  002448  8289               	bsf	3977,1,c	;volatile
  2987                           
  2988                           ;setddram.c: 41: DelayFor18TCY();
  2989  00244A  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  2990                           
  2991                           ;setddram.c: 42: LATAbits.LATA1 = 0;
  2992  00244E  9289               	bcf	3977,1,c	;volatile
  2993                           
  2994                           ;setddram.c: 47: PORTB &= 0xf0;
  2995  002450  0EF0               	movlw	240
  2996  002452  1681               	andwf	3969,f,c	;volatile
  2997                           
  2998                           ;setddram.c: 48: PORTB |= (DDaddr&0x0f);
  2999  002454  5004               	movf	i2SetDDRamAddr@DDaddr,w,c
  3000  002456  0B0F               	andlw	15
  3001  002458  1281               	iorwf	3969,f,c	;volatile
  3002                           
  3003                           ;setddram.c: 50: DelayFor18TCY();
  3004  00245A  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  3005                           
  3006                           ;setddram.c: 51: LATAbits.LATA1 = 1;
  3007  00245E  8289               	bsf	3977,1,c	;volatile
  3008                           
  3009                           ;setddram.c: 52: DelayFor18TCY();
  3010  002460  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  3011                           
  3012                           ;setddram.c: 53: LATAbits.LATA1 = 0;
  3013  002464  9289               	bcf	3977,1,c	;volatile
  3014                           
  3015                           ;setddram.c: 57: TRISB |= 0x0f;
  3016  002466  0E0F               	movlw	15
  3017  002468  1293               	iorwf	3987,f,c	;volatile
  3018  00246A  0012               	return	
  3019  00246C                     __end_ofi2_SetDDRamAddr:
  3020                           	opt stack 0
  3021                           pclatu	equ	0xFFB
  3022                           pclath	equ	0xFFA
  3023                           tblptru	equ	0xFF8
  3024                           tblptrh	equ	0xFF7
  3025                           tblptrl	equ	0xFF6
  3026                           tablat	equ	0xFF5
  3027                           prodh	equ	0xFF4
  3028                           prodl	equ	0xFF3
  3029                           intcon	equ	0xFF2
  3030                           postinc0	equ	0xFEE
  3031                           fsr0h	equ	0xFEA
  3032                           fsr0l	equ	0xFE9
  3033                           wreg	equ	0xFE8
  3034                           postdec1	equ	0xFE5
  3035                           fsr1h	equ	0xFE2
  3036                           fsr1l	equ	0xFE1
  3037                           fsr2h	equ	0xFDA
  3038                           fsr2l	equ	0xFD9
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function i2_DelayPORXLCD *****************
  3042 ;; Defined at:
  3043 ;;		line 107 in file "main.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;		None
  3048 ;; Return value:  Size  Location     Type
  3049 ;;                  1    wreg      void 
  3050 ;; Registers used:
  3051 ;;		wreg
  3052 ;; Tracked objects:
  3053 ;;		On entry : 0/0
  3054 ;;		On exit  : 0/0
  3055 ;;		Unchanged: 0/0
  3056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3057 ;;      Params:         0       0       0       0       0       0       0
  3058 ;;      Locals:         0       0       0       0       0       0       0
  3059 ;;      Temps:          1       0       0       0       0       0       0
  3060 ;;      Totals:         1       0       0       0       0       0       0
  3061 ;;Total ram usage:        1 bytes
  3062 ;; Hardware stack levels used:    1
  3063 ;; This function calls:
  3064 ;;		Nothing
  3065 ;; This function is called by:
  3066 ;;		i2_OpenXLCD
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text19
  3071  0027D0                     __ptext19:
  3072                           	opt stack 0
  3073  0027D0                     i2_DelayPORXLCD:
  3074                           	opt stack 23
  3075                           
  3076                           ;main.c: 109: _delay((unsigned long)((15)*(4000000/4000.0)));
  3077                           
  3078                           ;incstack = 0
  3079  0027D0  0E14               	movlw	20
  3080  0027D2  6E01               	movwf	??i2_DelayPORXLCD& (0+255),c
  3081  0027D4  0E7A               	movlw	122
  3082  0027D6                     i2u688_47:
  3083  0027D6  2EE8               	decfsz	wreg,f,c
  3084  0027D8  D7FE               	bra	i2u688_47
  3085  0027DA  2E01               	decfsz	??i2_DelayPORXLCD& (0+255),f,c
  3086  0027DC  D7FC               	bra	i2u688_47
  3087  0027DE  0012               	return		;funcret
  3088  0027E0                     __end_ofi2_DelayPORXLCD:
  3089                           	opt stack 0
  3090                           pclatu	equ	0xFFB
  3091                           pclath	equ	0xFFA
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           intcon	equ	0xFF2
  3099                           postinc0	equ	0xFEE
  3100                           fsr0h	equ	0xFEA
  3101                           fsr0l	equ	0xFE9
  3102                           wreg	equ	0xFE8
  3103                           postdec1	equ	0xFE5
  3104                           fsr1h	equ	0xFE2
  3105                           fsr1l	equ	0xFE1
  3106                           fsr2h	equ	0xFDA
  3107                           fsr2l	equ	0xFD9
  3108                           status	equ	0xFD8
  3109                           
  3110 ;; *************** function i2_Delay10KTCYx *****************
  3111 ;; Defined at:
  3112 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/pic18/d10ktcyx.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;  unit            1    wreg     unsigned char 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  unit            1    1[COMRAM] unsigned char 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3126 ;;      Params:         0       0       0       0       0       0       0
  3127 ;;      Locals:         1       0       0       0       0       0       0
  3128 ;;      Temps:          1       0       0       0       0       0       0
  3129 ;;      Totals:         2       0       0       0       0       0       0
  3130 ;;Total ram usage:        2 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; This function calls:
  3133 ;;		Nothing
  3134 ;; This function is called by:
  3135 ;;		i2_OpenXLCD
  3136 ;; This function uses a non-reentrant model
  3137 ;;
  3138                           
  3139                           	psect	text20
  3140  002792                     __ptext20:
  3141                           	opt stack 0
  3142  002792                     i2_Delay10KTCYx:
  3143                           	opt stack 23
  3144                           
  3145                           ;incstack = 0
  3146                           ;i2Delay10KTCYx@unit stored from wreg
  3147  002792  6E02               	movwf	i2Delay10KTCYx@unit,c
  3148  002794                     i2l1339:
  3149  002794  0E0D               	movlw	13
  3150  002796  6E01               	movwf	??i2_Delay10KTCYx& (0+255),c
  3151  002798  0EFC               	movlw	252
  3152  00279A                     i2u689_47:
  3153  00279A  2EE8               	decfsz	wreg,f,c
  3154  00279C  D7FE               	bra	i2u689_47
  3155  00279E  2E01               	decfsz	??i2_Delay10KTCYx& (0+255),f,c
  3156  0027A0  D7FC               	bra	i2u689_47
  3157  0027A2  2E02               	decfsz	i2Delay10KTCYx@unit,f,c
  3158  0027A4  D7F7               	goto	i2l1339
  3159  0027A6  0012               	return	
  3160  0027A8                     __end_ofi2_Delay10KTCYx:
  3161                           	opt stack 0
  3162                           pclatu	equ	0xFFB
  3163                           pclath	equ	0xFFA
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           intcon	equ	0xFF2
  3171                           postinc0	equ	0xFEE
  3172                           fsr0h	equ	0xFEA
  3173                           fsr0l	equ	0xFE9
  3174                           wreg	equ	0xFE8
  3175                           postdec1	equ	0xFE5
  3176                           fsr1h	equ	0xFE2
  3177                           fsr1l	equ	0xFE1
  3178                           fsr2h	equ	0xFDA
  3179                           fsr2l	equ	0xFD9
  3180                           status	equ	0xFD8
  3181                           
  3182 ;; *************** function _sprintf *****************
  3183 ;; Defined at:
  3184 ;;		line 492 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;  sp              2   63[COMRAM] PTR unsigned char 
  3187 ;;		 -> TIMER1@str_tmp(10), TIMER1@time(20), print_data@str_temp2(3), print_data@temp(3), 
  3188 ;;  f               2   65[COMRAM] PTR const unsigned char 
  3189 ;;		 -> STR_9(8), STR_8(9), STR_2(12), STR_1(5), 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  val             4   98[COMRAM] unsigned long 
  3192 ;;  tmpval          4   94[COMRAM] struct .
  3193 ;;  fval            3  102[COMRAM] struct .
  3194 ;;  prec            2  105[COMRAM] int 
  3195 ;;  exp             2   92[COMRAM] int 
  3196 ;;  flag            2   90[COMRAM] unsigned short 
  3197 ;;  ap              2   88[COMRAM] PTR void [1]
  3198 ;;		 -> ?_sprintf(2), 
  3199 ;;  cp              2   86[COMRAM] PTR const unsigned char 
  3200 ;;		 -> STR_10(7), TIMER1@time(20), print_data@temp(3), 
  3201 ;;  len             2   84[COMRAM] unsigned int 
  3202 ;;  width           2    0        int 
  3203 ;;  c               1  107[COMRAM] char 
  3204 ;;  d               1    0        unsigned char 
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  2   63[COMRAM] int 
  3207 ;; Registers used:
  3208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3214 ;;      Params:        12       0       0       0       0       0       0
  3215 ;;      Locals:        27       0       0       0       0       0       0
  3216 ;;      Temps:          6       0       0       0       0       0       0
  3217 ;;      Totals:        45       0       0       0       0       0       0
  3218 ;;Total ram usage:       45 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    3
  3221 ;; This function calls:
  3222 ;;		___awdiv
  3223 ;;		___ftadd
  3224 ;;		___ftge
  3225 ;;		___ftmul
  3226 ;;		___ftneg
  3227 ;;		___ftsub
  3228 ;;		___fttol
  3229 ;;		___lldiv
  3230 ;;		___llmod
  3231 ;;		___lltoft
  3232 ;;		___wmul
  3233 ;;		__div_to_l_
  3234 ;;		__tdiv_to_l_
  3235 ;;		_fround
  3236 ;;		_isdigit
  3237 ;;		_scale
  3238 ;; This function is called by:
  3239 ;;		_TIMER1
  3240 ;;		_print_data
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text21
  3245  0006BA                     __ptext21:
  3246                           	opt stack 0
  3247  0006BA                     _sprintf:
  3248                           	opt stack 22
  3249                           
  3250                           ;doprnt.c: 494: va_list ap;
  3251                           ;doprnt.c: 499: signed char c;
  3252                           ;doprnt.c: 501: int width;
  3253                           ;doprnt.c: 504: int prec;
  3254                           ;doprnt.c: 508: unsigned short flag;
  3255                           ;doprnt.c: 515: char d;
  3256                           ;doprnt.c: 516: double fval;
  3257                           ;doprnt.c: 517: int exp;
  3258                           ;doprnt.c: 523: union {
  3259                           ;doprnt.c: 524: unsigned long vd;
  3260                           ;doprnt.c: 525: double integ;
  3261                           ;doprnt.c: 526: } tmpval;
  3262                           ;doprnt.c: 528: unsigned long val;
  3263                           ;doprnt.c: 529: unsigned len;
  3264                           ;doprnt.c: 530: const char * cp;
  3265                           ;doprnt.c: 533: *ap = __va_start();
  3266                           
  3267                           ;incstack = 0
  3268  0006BA  0E44               	movlw	low (?_sprintf+4)
  3269  0006BC  6E59               	movwf	sprintf@ap,c
  3270  0006BE  0E00               	movlw	high (?_sprintf+4)
  3271  0006C0  6E5A               	movwf	sprintf@ap+1,c
  3272                           
  3273                           ;doprnt.c: 536: while(c = *f++) {
  3274  0006C2  EFB1  F007         	goto	i2u540_40
  3275  0006C6                     
  3276                           ;doprnt.c: 538: if(c != '%')
  3277  0006C6  0E25               	movlw	37
  3278  0006C8  186C               	xorwf	sprintf@c,w,c
  3279  0006CA  B4D8               	btfsc	status,2,c
  3280  0006CC  D00A               	goto	i2l1063
  3281                           
  3282                           ;doprnt.c: 540: {
  3283                           ;doprnt.c: 541: ((*sp++ = (c)));
  3284  0006CE  C040  FFD9         	movff	sprintf@sp,fsr2l
  3285  0006D2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3286  0006D6  C06C  FFDF         	movff	sprintf@c,indf2
  3287  0006DA  4A40               	infsnz	sprintf@sp,f,c
  3288  0006DC  2A41               	incf	sprintf@sp+1,f,c
  3289                           
  3290                           ;doprnt.c: 542: continue;
  3291  0006DE  EFB1  F007         	goto	i2u540_40
  3292  0006E2                     i2l1063:
  3293                           
  3294                           ;doprnt.c: 543: }
  3295                           ;doprnt.c: 548: flag = 0;
  3296  0006E2  0E00               	movlw	0
  3297  0006E4  6E5C               	movwf	sprintf@flag+1,c
  3298  0006E6  0E00               	movlw	0
  3299  0006E8  6E5B               	movwf	sprintf@flag,c
  3300                           
  3301                           ;doprnt.c: 611: if(*f == '.') {
  3302  0006EA  C042  FFF6         	movff	sprintf@f,tblptrl
  3303  0006EE  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3304  0006F2                     	if	0	;tblptru may be non-zero
  3305  0006F2                     	endif
  3306  0006F2                     	if	0	;tblptru may be non-zero
  3307  0006F2                     	endif
  3308  0006F2  0008               	tblrd		*
  3309  0006F4  50F5               	movf	tablat,w,c
  3310  0006F6  0A2E               	xorlw	46
  3311  0006F8  A4D8               	btfss	status,2,c
  3312  0006FA  D02E               	goto	i2l1064
  3313                           
  3314                           ;doprnt.c: 612: flag |= 0x4000;
  3315  0006FC  8C5C               	bsf	sprintf@flag+1,6,c
  3316                           
  3317                           ;doprnt.c: 613: f++;
  3318  0006FE  4A42               	infsnz	sprintf@f,f,c
  3319  000700  2A43               	incf	sprintf@f+1,f,c
  3320                           
  3321                           ;doprnt.c: 620: {
  3322                           ;doprnt.c: 621: prec = 0;
  3323  000702  0E00               	movlw	0
  3324  000704  6E6B               	movwf	sprintf@prec+1,c
  3325  000706  0E00               	movlw	0
  3326  000708  6E6A               	movwf	sprintf@prec,c
  3327                           
  3328                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3329  00070A  D01B               	goto	i2l1065
  3330  00070C                     
  3331                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3332  00070C  C06A  F00F         	movff	sprintf@prec,___wmul@multiplier
  3333  000710  C06B  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  3334  000714  0E00               	movlw	0
  3335  000716  6E12               	movwf	___wmul@multiplicand+1,c
  3336  000718  0E0A               	movlw	10
  3337  00071A  6E11               	movwf	___wmul@multiplicand,c
  3338  00071C  EC45  F013         	call	___wmul	;wreg free
  3339  000720  C042  FFF6         	movff	sprintf@f,tblptrl
  3340  000724  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3341  000728                     	if	0	;tblptru may be non-zero
  3342  000728                     	endif
  3343  000728                     	if	0	;tblptru may be non-zero
  3344  000728                     	endif
  3345  000728  0008               	tblrd		*
  3346  00072A  50F5               	movf	tablat,w,c
  3347  00072C  260F               	addwf	?___wmul,f,c
  3348  00072E  0E00               	movlw	0
  3349  000730  2210               	addwfc	?___wmul+1,f,c
  3350  000732  0ED0               	movlw	208
  3351  000734  240F               	addwf	?___wmul,w,c
  3352  000736  6E6A               	movwf	sprintf@prec,c
  3353  000738  0EFF               	movlw	255
  3354  00073A  2010               	addwfc	?___wmul+1,w,c
  3355  00073C  6E6B               	movwf	sprintf@prec+1,c
  3356  00073E  4A42               	infsnz	sprintf@f,f,c
  3357  000740  2A43               	incf	sprintf@f+1,f,c
  3358  000742                     i2l1065:
  3359  000742  C042  FFF6         	movff	sprintf@f,tblptrl
  3360  000746  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3361  00074A                     	if	0	;tblptru may be non-zero
  3362  00074A                     	endif
  3363  00074A                     	if	0	;tblptru may be non-zero
  3364  00074A                     	endif
  3365  00074A  0008               	tblrd		*
  3366  00074C  50F5               	movf	tablat,w,c
  3367  00074E  ECBA  F013         	call	_isdigit
  3368  000752  A0D8               	btfss	status,0,c
  3369  000754  D06E               	goto	i2l1069
  3370  000756  D7DA               	goto	i2l1066
  3371  000758                     i2l1064:
  3372                           
  3373                           ;doprnt.c: 626: prec = 0;
  3374  000758  0E00               	movlw	0
  3375  00075A  6E6B               	movwf	sprintf@prec+1,c
  3376  00075C  0E00               	movlw	0
  3377  00075E  6E6A               	movwf	sprintf@prec,c
  3378                           
  3379                           ;doprnt.c: 628: flag |= 0x1000;
  3380  000760  885C               	bsf	sprintf@flag+1,4,c
  3381                           
  3382                           ;doprnt.c: 630: }
  3383                           ;doprnt.c: 635: switch(c = *f++) {
  3384  000762  D067               	goto	i2l1069
  3385  000764                     
  3386                           ;doprnt.c: 663: flag |= 0x400;
  3387  000764  845C               	bsf	sprintf@flag+1,2,c
  3388                           
  3389                           ;doprnt.c: 698: case 'i':
  3390                           ;doprnt.c: 699: break;
  3391                           
  3392                           ;doprnt.c: 697: case 'd':
  3393                           
  3394                           ;doprnt.c: 664: break;
  3395  000766  D07F               	goto	i2l1073
  3396  000768                     
  3397                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3398  000768  C059  FFD9         	movff	sprintf@ap,fsr2l
  3399  00076C  C05A  FFDA         	movff	sprintf@ap+1,fsr2h
  3400  000770  CFDE F057          	movff	postinc2,sprintf@cp
  3401  000774  CFDD F058          	movff	postdec2,sprintf@cp+1
  3402  000778  0E02               	movlw	2
  3403  00077A  2659               	addwf	sprintf@ap,f,c
  3404  00077C  0E00               	movlw	0
  3405  00077E  225A               	addwfc	sprintf@ap+1,f,c
  3406                           
  3407                           ;doprnt.c: 740: if(!cp)
  3408  000780  5057               	movf	sprintf@cp,w,c
  3409  000782  1058               	iorwf	sprintf@cp+1,w,c
  3410  000784  A4D8               	btfss	status,2,c
  3411  000786  D004               	goto	i2l1077
  3412                           
  3413                           ;doprnt.c: 741: cp = "(null)";
  3414  000788  0EA3               	movlw	low STR_10
  3415  00078A  6E57               	movwf	sprintf@cp,c
  3416  00078C  0E06               	movlw	high STR_10
  3417  00078E  6E58               	movwf	sprintf@cp+1,c
  3418  000790                     i2l1077:
  3419                           
  3420                           ;doprnt.c: 745: len = 0;
  3421  000790  0E00               	movlw	0
  3422  000792  6E56               	movwf	sprintf@len+1,c
  3423  000794  0E00               	movlw	0
  3424  000796  6E55               	movwf	sprintf@len,c
  3425                           
  3426                           ;doprnt.c: 746: while(cp[len])
  3427  000798  D002               	goto	i2l1078
  3428  00079A                     
  3429                           ;doprnt.c: 747: len++;
  3430  00079A  4A55               	infsnz	sprintf@len,f,c
  3431  00079C  2A56               	incf	sprintf@len+1,f,c
  3432  00079E                     i2l1078:
  3433  00079E  5055               	movf	sprintf@len,w,c
  3434  0007A0  2457               	addwf	sprintf@cp,w,c
  3435  0007A2  6E4C               	movwf	??_sprintf& (0+255),c
  3436  0007A4  5056               	movf	sprintf@len+1,w,c
  3437  0007A6  2058               	addwfc	sprintf@cp+1,w,c
  3438  0007A8  6E4D               	movwf	(??_sprintf+1)& (0+255),c
  3439  0007AA  C04C  FFF6         	movff	??_sprintf,tblptrl
  3440  0007AE  C04D  FFF7         	movff	??_sprintf+1,tblptrh
  3441  0007B2  6AF8               	clrf	tblptru,c
  3442  0007B4  0E05               	movlw	(high __ramtop+-1)
  3443  0007B6  64F7               	cpfsgt	tblptrh,c
  3444  0007B8  D003               	bra	i2u501_47
  3445  0007BA  0008               	tblrd		*
  3446  0007BC  50F5               	movf	tablat,w,c
  3447  0007BE  D005               	bra	i2u501_40
  3448  0007C0                     i2u501_47:
  3449  0007C0  CFF6 FFE9          	movff	tblptrl,fsr0l
  3450  0007C4  CFF7 FFEA          	movff	tblptrh,fsr0h
  3451  0007C8  50EF               	movf	indf0,w,c
  3452  0007CA                     i2u501_40:
  3453  0007CA  0900               	iorlw	0
  3454  0007CC  A4D8               	btfss	status,2,c
  3455  0007CE  D7E5               	goto	i2l1079
  3456                           
  3457                           ;doprnt.c: 753: if(prec && prec < len)
  3458  0007D0  506A               	movf	sprintf@prec,w,c
  3459  0007D2  106B               	iorwf	sprintf@prec+1,w,c
  3460  0007D4  B4D8               	btfsc	status,2,c
  3461  0007D6  D024               	goto	i2l1082
  3462  0007D8  5055               	movf	sprintf@len,w,c
  3463  0007DA  5C6A               	subwf	sprintf@prec,w,c
  3464  0007DC  5056               	movf	sprintf@len+1,w,c
  3465  0007DE  586B               	subwfb	sprintf@prec+1,w,c
  3466  0007E0  B0D8               	btfsc	status,0,c
  3467  0007E2  D01E               	goto	i2l1082
  3468                           
  3469                           ;doprnt.c: 754: len = prec;
  3470  0007E4  C06A  F055         	movff	sprintf@prec,sprintf@len
  3471  0007E8  C06B  F056         	movff	sprintf@prec+1,sprintf@len+1
  3472                           
  3473                           ;doprnt.c: 767: while(len--)
  3474  0007EC  D019               	goto	i2l1082
  3475  0007EE                     i2l4923:
  3476                           
  3477                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  3478  0007EE  C057  FFF6         	movff	sprintf@cp,tblptrl
  3479  0007F2  C058  FFF7         	movff	sprintf@cp+1,tblptrh
  3480  0007F6  6AF8               	clrf	tblptru,c
  3481  0007F8  C040  FFD9         	movff	sprintf@sp,fsr2l
  3482  0007FC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3483  000800  0E05               	movlw	(high __ramtop+-1)
  3484  000802  64F7               	cpfsgt	tblptrh,c
  3485  000804  D003               	bra	i2u505_47
  3486  000806  0008               	tblrd		*
  3487  000808  50F5               	movf	tablat,w,c
  3488  00080A  D005               	bra	i2u505_40
  3489  00080C                     i2u505_47:
  3490  00080C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3491  000810  CFF7 FFEA          	movff	tblptrh,fsr0h
  3492  000814  50EF               	movf	indf0,w,c
  3493  000816                     i2u505_40:
  3494  000816  6EDF               	movwf	indf2,c
  3495  000818  4A57               	infsnz	sprintf@cp,f,c
  3496  00081A  2A58               	incf	sprintf@cp+1,f,c
  3497  00081C  4A40               	infsnz	sprintf@sp,f,c
  3498  00081E  2A41               	incf	sprintf@sp+1,f,c
  3499  000820                     i2l1082:
  3500  000820  0655               	decf	sprintf@len,f,c
  3501  000822  A0D8               	btfss	status,0,c
  3502  000824  0656               	decf	sprintf@len+1,f,c
  3503  000826  2855               	incf	sprintf@len,w,c
  3504  000828  E1E2               	bnz	i2l4923
  3505  00082A  2856               	incf	sprintf@len+1,w,c
  3506  00082C  B4D8               	btfsc	status,2,c
  3507  00082E  D399               	goto	i2u540_40
  3508  000830  D7DE               	goto	i2l1083
  3509  000832                     i2l1069:
  3510  000832  C042  FFF6         	movff	sprintf@f,tblptrl
  3511  000836  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3512  00083A  4A42               	infsnz	sprintf@f,f,c
  3513  00083C  2A43               	incf	sprintf@f+1,f,c
  3514  00083E                     	if	0	;tblptru may be non-zero
  3515  00083E                     	endif
  3516  00083E                     	if	0	;tblptru may be non-zero
  3517  00083E                     	endif
  3518  00083E  0008               	tblrd		*
  3519  000840  CFF5 F06C          	movff	tablat,sprintf@c
  3520  000844  506C               	movf	sprintf@c,w,c
  3521                           
  3522                           ; Switch size 1, requested type "space"
  3523                           ; Number of cases is 5, Range of values is 0 to 115
  3524                           ; switch strategies available:
  3525                           ; Name         Instructions Cycles
  3526                           ; simple_byte           16     9 (average)
  3527                           ;	Chosen strategy is simple_byte
  3528  000846  0A00               	xorlw	0	; case 0
  3529  000848  B4D8               	btfsc	status,2,c
  3530  00084A  D398               	goto	i2u541_40
  3531  00084C  0A64               	xorlw	100	; case 100
  3532  00084E  B4D8               	btfsc	status,2,c
  3533  000850  D00A               	goto	i2l1073
  3534  000852  0A02               	xorlw	2	; case 102
  3535  000854  B4D8               	btfsc	status,2,c
  3536  000856  D786               	goto	i2l1072
  3537  000858  0A0F               	xorlw	15	; case 105
  3538  00085A  B4D8               	btfsc	status,2,c
  3539  00085C  D004               	goto	i2l1073
  3540  00085E  0A1A               	xorlw	26	; case 115
  3541  000860  B4D8               	btfsc	status,2,c
  3542  000862  D782               	goto	i2l1076
  3543  000864  D37E               	goto	i2u540_40
  3544  000866                     i2l1073:
  3545                           
  3546                           ;doprnt.c: 825: if(flag & (0x700)) {
  3547  000866  0E07               	movlw	7
  3548  000868  145C               	andwf	sprintf@flag+1,w,c
  3549  00086A  B4D8               	btfsc	status,2,c
  3550  00086C  D2B9               	goto	i2l1086
  3551                           
  3552                           ;doprnt.c: 827: if(flag & 0x1000)
  3553  00086E  A85C               	btfss	sprintf@flag+1,4,c
  3554  000870  D004               	goto	i2l1087
  3555                           
  3556                           ;doprnt.c: 829: prec = 6;
  3557  000872  0E00               	movlw	0
  3558  000874  6E6B               	movwf	sprintf@prec+1,c
  3559  000876  0E06               	movlw	6
  3560  000878  6E6A               	movwf	sprintf@prec,c
  3561  00087A                     i2l1087:
  3562                           
  3563                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3564  00087A  C059  FFD9         	movff	sprintf@ap,fsr2l
  3565  00087E  C05A  FFDA         	movff	sprintf@ap+1,fsr2h
  3566  000882  CFDE F067          	movff	postinc2,sprintf@fval
  3567  000886  CFDE F068          	movff	postinc2,sprintf@fval+1
  3568  00088A  CFDD F069          	movff	postdec2,sprintf@fval+2
  3569  00088E  0E03               	movlw	3
  3570  000890  2659               	addwf	sprintf@ap,f,c
  3571  000892  0E00               	movlw	0
  3572  000894  225A               	addwfc	sprintf@ap+1,f,c
  3573                           
  3574                           ;doprnt.c: 831: if(fval < 0.0) {
  3575  000896  AE69               	btfss	sprintf@fval+2,7,c
  3576  000898  D010               	goto	i2l1088
  3577                           
  3578                           ;doprnt.c: 832: fval = -fval;
  3579  00089A  C067  F001         	movff	sprintf@fval,___ftneg@f1
  3580  00089E  C068  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  3581  0008A2  C069  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  3582  0008A6  EC6A  F013         	call	___ftneg	;wreg free
  3583  0008AA  C001  F067         	movff	?___ftneg,sprintf@fval
  3584  0008AE  C002  F068         	movff	?___ftneg+1,sprintf@fval+1
  3585  0008B2  C003  F069         	movff	?___ftneg+2,sprintf@fval+2
  3586                           
  3587                           ;doprnt.c: 833: flag |= 0x03;
  3588  0008B6  0E03               	movlw	3
  3589  0008B8  125B               	iorwf	sprintf@flag,f,c
  3590  0008BA                     i2l1088:
  3591                           
  3592                           ;doprnt.c: 834: }
  3593                           ;doprnt.c: 835: exp = 0;
  3594  0008BA  0E00               	movlw	0
  3595  0008BC  6E5E               	movwf	sprintf@exp+1,c
  3596  0008BE  0E00               	movlw	0
  3597  0008C0  6E5D               	movwf	sprintf@exp,c
  3598                           
  3599                           ;doprnt.c: 836: if( fval!=0) {
  3600  0008C2  5067               	movf	sprintf@fval,w,c
  3601  0008C4  1068               	iorwf	sprintf@fval+1,w,c
  3602  0008C6  1069               	iorwf	sprintf@fval+2,w,c
  3603  0008C8  B4D8               	btfsc	status,2,c
  3604  0008CA  D083               	goto	i2l1093
  3605                           
  3606                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3607  0008CC  0E82               	movlw	130
  3608  0008CE  6E4C               	movwf	??_sprintf& (0+255),c
  3609  0008D0  0EFF               	movlw	255
  3610  0008D2  6E4D               	movwf	(??_sprintf+1)& (0+255),c
  3611  0008D4  C067  F04E         	movff	sprintf@fval,??_sprintf+2
  3612  0008D8  C068  F04F         	movff	sprintf@fval+1,??_sprintf+3
  3613  0008DC  C069  F050         	movff	sprintf@fval+2,??_sprintf+4
  3614  0008E0  C06A  F051         	movff	sprintf@fval+3,??_sprintf+5
  3615  0008E4  0E10               	movlw	16
  3616  0008E6  D005               	goto	i2u511_40
  3617  0008E8                     i2u511_45:
  3618  0008E8  90D8               	bcf	status,0,c
  3619  0008EA  3251               	rrcf	??_sprintf+5,f,c
  3620  0008EC  3250               	rrcf	??_sprintf+4,f,c
  3621  0008EE  324F               	rrcf	??_sprintf+3,f,c
  3622  0008F0  324E               	rrcf	??_sprintf+2,f,c
  3623  0008F2                     i2u511_40:
  3624  0008F2  2EE8               	decfsz	wreg,f,c
  3625  0008F4  D7F9               	goto	i2u511_45
  3626  0008F6  504E               	movf	??_sprintf+2,w,c
  3627  0008F8  244C               	addwf	??_sprintf,w,c
  3628  0008FA  6E5D               	movwf	sprintf@exp,c
  3629  0008FC  0E00               	movlw	0
  3630  0008FE  204D               	addwfc	??_sprintf+1,w,c
  3631  000900  6E5E               	movwf	sprintf@exp+1,c
  3632                           
  3633                           ;doprnt.c: 838: exp--;
  3634  000902  065D               	decf	sprintf@exp,f,c
  3635  000904  A0D8               	btfss	status,0,c
  3636  000906  065E               	decf	sprintf@exp+1,f,c
  3637                           
  3638                           ;doprnt.c: 839: exp *= 3;
  3639  000908  C05D  F00F         	movff	sprintf@exp,___wmul@multiplier
  3640  00090C  C05E  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  3641  000910  0E00               	movlw	0
  3642  000912  6E12               	movwf	___wmul@multiplicand+1,c
  3643  000914  0E03               	movlw	3
  3644  000916  6E11               	movwf	___wmul@multiplicand,c
  3645  000918  EC45  F013         	call	___wmul	;wreg free
  3646  00091C  C00F  F05D         	movff	?___wmul,sprintf@exp
  3647  000920  C010  F05E         	movff	?___wmul+1,sprintf@exp+1
  3648                           
  3649                           ;doprnt.c: 840: exp /= 10;
  3650  000924  C05D  F007         	movff	sprintf@exp,___awdiv@dividend
  3651  000928  C05E  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  3652  00092C  0E00               	movlw	0
  3653  00092E  6E0A               	movwf	___awdiv@divisor+1,c
  3654  000930  0E0A               	movlw	10
  3655  000932  6E09               	movwf	___awdiv@divisor,c
  3656  000934  EC34  F010         	call	___awdiv	;wreg free
  3657  000938  C007  F05D         	movff	?___awdiv,sprintf@exp
  3658  00093C  C008  F05E         	movff	?___awdiv+1,sprintf@exp+1
  3659                           
  3660                           ;doprnt.c: 841: if(exp < 0)
  3661  000940  AE5E               	btfss	sprintf@exp+1,7,c
  3662  000942  D003               	goto	i2l1090
  3663                           
  3664                           ;doprnt.c: 842: exp--;
  3665  000944  065D               	decf	sprintf@exp,f,c
  3666  000946  A0D8               	btfss	status,0,c
  3667  000948  065E               	decf	sprintf@exp+1,f,c
  3668  00094A                     i2l1090:
  3669                           
  3670                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3671  00094A  505D               	movf	sprintf@exp,w,c
  3672  00094C  0800               	sublw	0
  3673  00094E  ECC5  F007         	call	_scale
  3674  000952  C024  F05F         	movff	?_scale,sprintf@tmpval
  3675  000956  C025  F060         	movff	?_scale+1,sprintf@tmpval+1
  3676  00095A  C026  F061         	movff	?_scale+2,sprintf@tmpval+2
  3677                           
  3678                           ;doprnt.c: 847: tmpval.integ *= fval;
  3679  00095E  C05F  F015         	movff	sprintf@tmpval,___ftmul@f1
  3680  000962  C060  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3681  000966  C061  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3682  00096A  C067  F018         	movff	sprintf@fval,___ftmul@f2
  3683  00096E  C068  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  3684  000972  C069  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  3685  000976  EC02  F00E         	call	___ftmul	;wreg free
  3686  00097A  C015  F05F         	movff	?___ftmul,sprintf@tmpval
  3687  00097E  C016  F060         	movff	?___ftmul+1,sprintf@tmpval+1
  3688  000982  C017  F061         	movff	?___ftmul+2,sprintf@tmpval+2
  3689                           
  3690                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3691  000986  C05F  F001         	movff	sprintf@tmpval,___ftge@ff1
  3692  00098A  C060  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3693  00098E  C061  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3694  000992  0E00               	movlw	0
  3695  000994  6E04               	movwf	___ftge@ff2,c
  3696  000996  0E80               	movlw	128
  3697  000998  6E05               	movwf	___ftge@ff2+1,c
  3698  00099A  0E3F               	movlw	63
  3699  00099C  6E06               	movwf	___ftge@ff2+2,c
  3700  00099E  ECEC  F00F         	call	___ftge	;wreg free
  3701  0009A2  B0D8               	btfsc	status,0,c
  3702  0009A4  D004               	goto	i2l1091
  3703                           
  3704                           ;doprnt.c: 849: exp--;
  3705  0009A6  065D               	decf	sprintf@exp,f,c
  3706  0009A8  A0D8               	btfss	status,0,c
  3707  0009AA  065E               	decf	sprintf@exp+1,f,c
  3708  0009AC  D012               	goto	i2l1093
  3709  0009AE                     i2l1091:
  3710                           
  3711                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3712  0009AE  C05F  F001         	movff	sprintf@tmpval,___ftge@ff1
  3713  0009B2  C060  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3714  0009B6  C061  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3715  0009BA  0E00               	movlw	0
  3716  0009BC  6E04               	movwf	___ftge@ff2,c
  3717  0009BE  0E20               	movlw	32
  3718  0009C0  6E05               	movwf	___ftge@ff2+1,c
  3719  0009C2  0E41               	movlw	65
  3720  0009C4  6E06               	movwf	___ftge@ff2+2,c
  3721  0009C6  ECEC  F00F         	call	___ftge	;wreg free
  3722  0009CA  A0D8               	btfss	status,0,c
  3723  0009CC  D002               	goto	i2l1093
  3724                           
  3725                           ;doprnt.c: 851: exp++;
  3726  0009CE  4A5D               	infsnz	sprintf@exp,f,c
  3727  0009D0  2A5E               	incf	sprintf@exp+1,f,c
  3728  0009D2                     i2l1093:
  3729                           
  3730                           ;doprnt.c: 852: }
  3731                           ;doprnt.c: 1112: if(prec <= 12)
  3732  0009D2  BE6B               	btfsc	sprintf@prec+1,7,c
  3733  0009D4  D006               	goto	i2u515_40
  3734  0009D6  506B               	movf	sprintf@prec+1,w,c
  3735  0009D8  E11B               	bnz	i2l4983
  3736  0009DA  0E0D               	movlw	13
  3737  0009DC  5C6A               	subwf	sprintf@prec,w,c
  3738  0009DE  B0D8               	btfsc	status,0,c
  3739  0009E0  D017               	goto	i2l1094
  3740  0009E2                     i2u515_40:
  3741                           
  3742                           ;doprnt.c: 1113: fval += fround(prec);
  3743  0009E2  C067  F02E         	movff	sprintf@fval,___ftadd@f1
  3744  0009E6  C068  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  3745  0009EA  C069  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  3746  0009EE  506A               	movf	sprintf@prec,w,c
  3747  0009F0  ECC9  F009         	call	_fround
  3748  0009F4  C024  F031         	movff	?_fround,___ftadd@f2
  3749  0009F8  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  3750  0009FC  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  3751  000A00  ECF2  F00A         	call	___ftadd	;wreg free
  3752  000A04  C02E  F067         	movff	?___ftadd,sprintf@fval
  3753  000A08  C02F  F068         	movff	?___ftadd+1,sprintf@fval+1
  3754  000A0C  C030  F069         	movff	?___ftadd+2,sprintf@fval+2
  3755  000A10                     i2l1094:
  3756  000A10                     i2l4983:
  3757                           
  3758                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3759  000A10  BE5E               	btfsc	sprintf@exp+1,7,c
  3760  000A12  D006               	goto	i2u516_40
  3761  000A14  505E               	movf	sprintf@exp+1,w,c
  3762  000A16  E11E               	bnz	i2l4991
  3763  000A18  0E0A               	movlw	10
  3764  000A1A  5C5D               	subwf	sprintf@exp,w,c
  3765  000A1C  B0D8               	btfsc	status,0,c
  3766  000A1E  D01A               	goto	i2u519_40
  3767  000A20                     i2u516_40:
  3768  000A20  5067               	movf	sprintf@fval,w,c
  3769  000A22  1068               	iorwf	sprintf@fval+1,w,c
  3770  000A24  1069               	iorwf	sprintf@fval+2,w,c
  3771  000A26  B4D8               	btfsc	status,2,c
  3772  000A28  D051               	goto	i2l1095
  3773  000A2A  C067  F024         	movff	sprintf@fval,___fttol@f1
  3774  000A2E  C068  F025         	movff	sprintf@fval+1,___fttol@f1+1
  3775  000A32  C069  F026         	movff	sprintf@fval+2,___fttol@f1+2
  3776  000A36  EC88  F00D         	call	___fttol	;wreg free
  3777  000A3A  5024               	movf	?___fttol,w,c
  3778  000A3C  1025               	iorwf	?___fttol+1,w,c
  3779  000A3E  1026               	iorwf	?___fttol+2,w,c
  3780  000A40  1027               	iorwf	?___fttol+3,w,c
  3781  000A42  B4D8               	btfsc	status,2,c
  3782  000A44  BE5E               	btfsc	sprintf@exp+1,7,c
  3783  000A46  D042               	goto	i2l1095
  3784  000A48  505E               	movf	sprintf@exp+1,w,c
  3785  000A4A  E104               	bnz	i2l4991
  3786  000A4C  0E02               	movlw	2
  3787  000A4E  5C5D               	subwf	sprintf@exp,w,c
  3788  000A50  A0D8               	btfss	status,0,c
  3789  000A52  D03C               	goto	i2l1095
  3790  000A54                     i2u519_40:
  3791  000A54                     i2l4991:
  3792                           
  3793                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3794  000A54  C05F  F001         	movff	sprintf@tmpval,___ftge@ff1
  3795  000A58  C060  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3796  000A5C  C061  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3797  000A60  0E70               	movlw	112
  3798  000A62  6E04               	movwf	___ftge@ff2,c
  3799  000A64  0E89               	movlw	137
  3800  000A66  6E05               	movwf	___ftge@ff2+1,c
  3801  000A68  0E40               	movlw	64
  3802  000A6A  6E06               	movwf	___ftge@ff2+2,c
  3803  000A6C  ECEC  F00F         	call	___ftge	;wreg free
  3804  000A70  B0D8               	btfsc	status,0,c
  3805  000A72  D002               	goto	i2l1098
  3806                           
  3807                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3808  000A74  0EF7               	movlw	247
  3809  000A76  D001               	goto	L1
  3810  000A78                     i2l1098:
  3811                           
  3812                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3813  000A78  0EF8               	movlw	248
  3814  000A7A                     L1:
  3815  000A7A  265D               	addwf	sprintf@exp,f,c
  3816  000A7C  0EFF               	movlw	255
  3817  000A7E  225E               	addwfc	sprintf@exp+1,f,c
  3818                           
  3819                           ;doprnt.c: 1124: }
  3820                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3821  000A80  505D               	movf	sprintf@exp,w,c
  3822  000A82  ECC5  F007         	call	_scale
  3823  000A86  C024  F05F         	movff	?_scale,sprintf@tmpval
  3824  000A8A  C025  F060         	movff	?_scale+1,sprintf@tmpval+1
  3825  000A8E  C026  F061         	movff	?_scale+2,sprintf@tmpval+2
  3826                           
  3827                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3828  000A92  C067  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  3829  000A96  C068  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3830  000A9A  C069  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3831  000A9E  C05F  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3832  000AA2  C060  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3833  000AA6  C061  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3834  000AAA  ECC8  F00B         	call	__tdiv_to_l_	;wreg free
  3835  000AAE  C001  F063         	movff	?__tdiv_to_l_,sprintf@val
  3836  000AB2  C002  F064         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3837  000AB6  C003  F065         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3838  000ABA  C004  F066         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3839                           
  3840                           ;doprnt.c: 1129: fval = 0.0;
  3841  000ABE  0E00               	movlw	0
  3842  000AC0  6E67               	movwf	sprintf@fval,c
  3843  000AC2  0E00               	movlw	0
  3844  000AC4  6E68               	movwf	sprintf@fval+1,c
  3845  000AC6  0E00               	movlw	0
  3846  000AC8  6E69               	movwf	sprintf@fval+2,c
  3847                           
  3848                           ;doprnt.c: 1130: } else {
  3849  000ACA  D032               	goto	i2l1104
  3850  000ACC                     i2l1095:
  3851                           
  3852                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3853  000ACC  C067  F024         	movff	sprintf@fval,___fttol@f1
  3854  000AD0  C068  F025         	movff	sprintf@fval+1,___fttol@f1+1
  3855  000AD4  C069  F026         	movff	sprintf@fval+2,___fttol@f1+2
  3856  000AD8  EC88  F00D         	call	___fttol	;wreg free
  3857  000ADC  C024  F063         	movff	?___fttol,sprintf@val
  3858  000AE0  C025  F064         	movff	?___fttol+1,sprintf@val+1
  3859  000AE4  C026  F065         	movff	?___fttol+2,sprintf@val+2
  3860  000AE8  C027  F066         	movff	?___fttol+3,sprintf@val+3
  3861                           
  3862                           ;doprnt.c: 1132: fval -= (double)val;
  3863  000AEC  C067  F03A         	movff	sprintf@fval,___ftsub@f1
  3864  000AF0  C068  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  3865  000AF4  C069  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  3866  000AF8  C063  F009         	movff	sprintf@val,___lltoft@c
  3867  000AFC  C064  F00A         	movff	sprintf@val+1,___lltoft@c+1
  3868  000B00  C065  F00B         	movff	sprintf@val+2,___lltoft@c+2
  3869  000B04  C066  F00C         	movff	sprintf@val+3,___lltoft@c+3
  3870  000B08  EC85  F011         	call	___lltoft	;wreg free
  3871  000B0C  C009  F03D         	movff	?___lltoft,___ftsub@f2
  3872  000B10  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  3873  000B14  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  3874  000B18  EC58  F012         	call	___ftsub	;wreg free
  3875  000B1C  C03A  F067         	movff	?___ftsub,sprintf@fval
  3876  000B20  C03B  F068         	movff	?___ftsub+1,sprintf@fval+1
  3877  000B24  C03C  F069         	movff	?___ftsub+2,sprintf@fval+2
  3878                           
  3879                           ;doprnt.c: 1133: exp = 0;
  3880  000B28  0E00               	movlw	0
  3881  000B2A  6E5E               	movwf	sprintf@exp+1,c
  3882  000B2C  0E00               	movlw	0
  3883  000B2E  6E5D               	movwf	sprintf@exp,c
  3884  000B30                     i2l1104:
  3885                           
  3886                           ;doprnt.c: 1134: }
  3887                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3888  000B30  0E01               	movlw	1
  3889  000B32  6E6C               	movwf	sprintf@c,c
  3890  000B34                     i2l5011:
  3891  000B34  0E0A               	movlw	10
  3892  000B36  186C               	xorwf	sprintf@c,w,c
  3893  000B38  B4D8               	btfsc	status,2,c
  3894  000B3A  D018               	goto	i2u523_40
  3895                           
  3896                           ;doprnt.c: 1137: if(val < dpowers[c])
  3897  000B3C  506C               	movf	sprintf@c,w,c
  3898  000B3E  0D04               	mullw	4
  3899  000B40  0E01               	movlw	low _dpowers
  3900  000B42  24F3               	addwf	prodl,w,c
  3901  000B44  6EF6               	movwf	tblptrl,c
  3902  000B46  0E06               	movlw	high _dpowers
  3903  000B48  20F4               	addwfc	prodh,w,c
  3904  000B4A  6EF7               	movwf	tblptrh,c
  3905  000B4C                     	if	0	;There are less than 3 active tblptr bytes
  3906  000B4C                     	endif
  3907  000B4C  0009               	tblrd		*+
  3908  000B4E  50F5               	movf	tablat,w,c
  3909  000B50  5C63               	subwf	sprintf@val,w,c
  3910  000B52  0009               	tblrd		*+
  3911  000B54  50F5               	movf	tablat,w,c
  3912  000B56  5864               	subwfb	sprintf@val+1,w,c
  3913  000B58  0009               	tblrd		*+
  3914  000B5A  50F5               	movf	tablat,w,c
  3915  000B5C  5865               	subwfb	sprintf@val+2,w,c
  3916  000B5E  0009               	tblrd		*+
  3917  000B60  50F5               	movf	tablat,w,c
  3918  000B62  5866               	subwfb	sprintf@val+3,w,c
  3919  000B64  A0D8               	btfss	status,0,c
  3920  000B66  D002               	goto	i2u523_40
  3921                           
  3922                           ;doprnt.c: 1138: break;
  3923  000B68  2A6C               	incf	sprintf@c,f,c
  3924  000B6A  D7E4               	goto	i2l5011
  3925  000B6C                     i2u523_40:
  3926                           
  3927                           ;doprnt.c: 1175: {
  3928                           ;doprnt.c: 1188: if(flag & 0x03)
  3929  000B6C  0E03               	movlw	3
  3930  000B6E  145B               	andwf	sprintf@flag,w,c
  3931  000B70  6E4C               	movwf	??_sprintf& (0+255),c
  3932  000B72  0E00               	movlw	0
  3933  000B74  145C               	andwf	sprintf@flag+1,w,c
  3934  000B76  6E4D               	movwf	(??_sprintf+1)& (0+255),c
  3935  000B78  504C               	movf	??_sprintf,w,c
  3936  000B7A  104D               	iorwf	??_sprintf+1,w,c
  3937  000B7C  B4D8               	btfsc	status,2,c
  3938  000B7E  D04F               	goto	i2l1109
  3939                           
  3940                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3941  000B80  C040  FFD9         	movff	sprintf@sp,fsr2l
  3942  000B84  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3943  000B88  0E2D               	movlw	45
  3944  000B8A  D046               	goto	L2
  3945  000B8C                     
  3946                           ;doprnt.c: 1200: {
  3947                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3948  000B8C  C063  F001         	movff	sprintf@val,___lldiv@dividend
  3949  000B90  C064  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3950  000B94  C065  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3951  000B98  C066  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3952  000B9C  506C               	movf	sprintf@c,w,c
  3953  000B9E  0D04               	mullw	4
  3954  000BA0  0E01               	movlw	low _dpowers
  3955  000BA2  24F3               	addwf	prodl,w,c
  3956  000BA4  6EF6               	movwf	tblptrl,c
  3957  000BA6  0E06               	movlw	high _dpowers
  3958  000BA8  20F4               	addwfc	prodh,w,c
  3959  000BAA  6EF7               	movwf	tblptrh,c
  3960  000BAC                     	if	0	;There are less than 3 active tblptr bytes
  3961  000BAC                     	endif
  3962  000BAC  0009               	tblrd		*+
  3963  000BAE  CFF5 F005          	movff	tablat,___lldiv@divisor
  3964  000BB2  0009               	tblrd		*+
  3965  000BB4  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3966  000BB8  0009               	tblrd		*+
  3967  000BBA  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3968  000BBE  000A               	tblrd		*-
  3969  000BC0  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3970  000BC4  EC76  F010         	call	___lldiv	;wreg free
  3971  000BC8  C001  F05F         	movff	?___lldiv,sprintf@tmpval
  3972  000BCC  C002  F060         	movff	?___lldiv+1,sprintf@tmpval+1
  3973  000BD0  C003  F061         	movff	?___lldiv+2,sprintf@tmpval+2
  3974  000BD4  C004  F062         	movff	?___lldiv+3,sprintf@tmpval+3
  3975                           
  3976                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3977  000BD8  C05F  F00E         	movff	sprintf@tmpval,___llmod@dividend
  3978  000BDC  C060  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3979  000BE0  C061  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3980  000BE4  C062  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3981  000BE8  0E0A               	movlw	10
  3982  000BEA  6E12               	movwf	___llmod@divisor,c
  3983  000BEC  0E00               	movlw	0
  3984  000BEE  6E13               	movwf	___llmod@divisor+1,c
  3985  000BF0  0E00               	movlw	0
  3986  000BF2  6E14               	movwf	___llmod@divisor+2,c
  3987  000BF4  0E00               	movlw	0
  3988  000BF6  6E15               	movwf	___llmod@divisor+3,c
  3989  000BF8  ECEF  F010         	call	___llmod	;wreg free
  3990  000BFC  C00E  F05F         	movff	?___llmod,sprintf@tmpval
  3991  000C00  C00F  F060         	movff	?___llmod+1,sprintf@tmpval+1
  3992  000C04  C010  F061         	movff	?___llmod+2,sprintf@tmpval+2
  3993  000C08  C011  F062         	movff	?___llmod+3,sprintf@tmpval+3
  3994                           
  3995                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3996  000C0C  505F               	movf	sprintf@tmpval,w,c
  3997  000C0E  0F30               	addlw	48
  3998  000C10  C040  FFD9         	movff	sprintf@sp,fsr2l
  3999  000C14  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4000  000C18                     L2:
  4001  000C18  6EDF               	movwf	indf2,c
  4002  000C1A  4A40               	infsnz	sprintf@sp,f,c
  4003  000C1C  2A41               	incf	sprintf@sp+1,f,c
  4004  000C1E                     i2l1109:
  4005  000C1E  066C               	decf	sprintf@c,f,c
  4006  000C20  286C               	incf	sprintf@c,w,c
  4007  000C22  B4D8               	btfsc	status,2,c
  4008  000C24  D00C               	goto	i2l1112
  4009  000C26  D7B2               	goto	i2l1110
  4010  000C28                     i2l5039:
  4011                           
  4012                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4013  000C28  C040  FFD9         	movff	sprintf@sp,fsr2l
  4014  000C2C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4015  000C30  0E30               	movlw	48
  4016  000C32  6EDF               	movwf	indf2,c
  4017  000C34  4A40               	infsnz	sprintf@sp,f,c
  4018  000C36  2A41               	incf	sprintf@sp+1,f,c
  4019                           
  4020                           ;doprnt.c: 1209: exp--;
  4021  000C38  065D               	decf	sprintf@exp,f,c
  4022  000C3A  A0D8               	btfss	status,0,c
  4023  000C3C  065E               	decf	sprintf@exp+1,f,c
  4024  000C3E                     i2l1112:
  4025  000C3E  BE5E               	btfsc	sprintf@exp+1,7,c
  4026  000C40  D005               	goto	i2u526_40
  4027  000C42  505E               	movf	sprintf@exp+1,w,c
  4028  000C44  E1F1               	bnz	i2l5039
  4029  000C46  045D               	decf	sprintf@exp,w,c
  4030  000C48  B0D8               	btfsc	status,0,c
  4031  000C4A  D7EE               	goto	i2l1113
  4032  000C4C                     i2u526_40:
  4033                           
  4034                           ;doprnt.c: 1210: }
  4035                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4036  000C4C  BE6B               	btfsc	sprintf@prec+1,7,c
  4037  000C4E  D009               	goto	i2l1115
  4038  000C50  506B               	movf	sprintf@prec+1,w,c
  4039  000C52  E104               	bnz	i2u527_40
  4040  000C54  0E09               	movlw	9
  4041  000C56  5C6A               	subwf	sprintf@prec,w,c
  4042  000C58  A0D8               	btfss	status,0,c
  4043  000C5A  D003               	goto	i2l1115
  4044  000C5C                     i2u527_40:
  4045                           
  4046                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4047  000C5C  0E08               	movlw	8
  4048  000C5E  6E6C               	movwf	sprintf@c,c
  4049  000C60  D002               	goto	i2l1116
  4050  000C62                     i2l1115:
  4051                           
  4052                           ;doprnt.c: 1213: else
  4053                           ;doprnt.c: 1214: c = prec;
  4054  000C62  C06A  F06C         	movff	sprintf@prec,sprintf@c
  4055  000C66                     i2l1116:
  4056                           
  4057                           ;doprnt.c: 1215: prec -= c;
  4058  000C66  506C               	movf	sprintf@c,w,c
  4059  000C68  5E6A               	subwf	sprintf@prec,f,c
  4060  000C6A  0E00               	movlw	0
  4061  000C6C  BE6C               	btfsc	sprintf@c,7,c
  4062  000C6E  0EFF               	movlw	255
  4063  000C70  5A6B               	subwfb	sprintf@prec+1,f,c
  4064                           
  4065                           ;doprnt.c: 1219: if(c)
  4066  000C72  506C               	movf	sprintf@c,w,c
  4067  000C74  B4D8               	btfsc	status,2,c
  4068  000C76  D008               	goto	i2l1117
  4069                           
  4070                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4071  000C78  C040  FFD9         	movff	sprintf@sp,fsr2l
  4072  000C7C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4073  000C80  0E2E               	movlw	46
  4074  000C82  6EDF               	movwf	indf2,c
  4075  000C84  4A40               	infsnz	sprintf@sp,f,c
  4076  000C86  2A41               	incf	sprintf@sp+1,f,c
  4077  000C88                     i2l1117:
  4078                           
  4079                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4080  000C88  506C               	movf	sprintf@c,w,c
  4081  000C8A  ECC5  F007         	call	_scale
  4082  000C8E  C024  F052         	movff	?_scale,_sprintf$3120
  4083  000C92  C025  F053         	movff	?_scale+1,_sprintf$3120+1
  4084  000C96  C026  F054         	movff	?_scale+2,_sprintf$3120+2
  4085                           
  4086                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4087  000C9A  C067  F018         	movff	sprintf@fval,___ftmul@f2
  4088  000C9E  C068  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  4089  000CA2  C069  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  4090  000CA6  C052  F015         	movff	_sprintf$3120,___ftmul@f1
  4091  000CAA  C053  F016         	movff	_sprintf$3120+1,___ftmul@f1+1
  4092  000CAE  C054  F017         	movff	_sprintf$3120+2,___ftmul@f1+2
  4093  000CB2  EC02  F00E         	call	___ftmul	;wreg free
  4094  000CB6  C015  F024         	movff	?___ftmul,___fttol@f1
  4095  000CBA  C016  F025         	movff	?___ftmul+1,___fttol@f1+1
  4096  000CBE  C017  F026         	movff	?___ftmul+2,___fttol@f1+2
  4097  000CC2  EC88  F00D         	call	___fttol	;wreg free
  4098  000CC6  C024  F063         	movff	?___fttol,sprintf@val
  4099  000CCA  C025  F064         	movff	?___fttol+1,sprintf@val+1
  4100  000CCE  C026  F065         	movff	?___fttol+2,sprintf@val+2
  4101  000CD2  C027  F066         	movff	?___fttol+3,sprintf@val+3
  4102                           
  4103                           ;doprnt.c: 1228: while(c--) {
  4104  000CD6  D06F               	goto	i2l1118
  4105  000CD8                     
  4106                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4107  000CD8  C063  F001         	movff	sprintf@val,___lldiv@dividend
  4108  000CDC  C064  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4109  000CE0  C065  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4110  000CE4  C066  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4111  000CE8  506C               	movf	sprintf@c,w,c
  4112  000CEA  0D04               	mullw	4
  4113  000CEC  0E01               	movlw	low _dpowers
  4114  000CEE  24F3               	addwf	prodl,w,c
  4115  000CF0  6EF6               	movwf	tblptrl,c
  4116  000CF2  0E06               	movlw	high _dpowers
  4117  000CF4  20F4               	addwfc	prodh,w,c
  4118  000CF6  6EF7               	movwf	tblptrh,c
  4119  000CF8                     	if	0	;There are less than 3 active tblptr bytes
  4120  000CF8                     	endif
  4121  000CF8  0009               	tblrd		*+
  4122  000CFA  CFF5 F005          	movff	tablat,___lldiv@divisor
  4123  000CFE  0009               	tblrd		*+
  4124  000D00  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4125  000D04  0009               	tblrd		*+
  4126  000D06  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4127  000D0A  000A               	tblrd		*-
  4128  000D0C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4129  000D10  EC76  F010         	call	___lldiv	;wreg free
  4130  000D14  C001  F05F         	movff	?___lldiv,sprintf@tmpval
  4131  000D18  C002  F060         	movff	?___lldiv+1,sprintf@tmpval+1
  4132  000D1C  C003  F061         	movff	?___lldiv+2,sprintf@tmpval+2
  4133  000D20  C004  F062         	movff	?___lldiv+3,sprintf@tmpval+3
  4134                           
  4135                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4136  000D24  C05F  F00E         	movff	sprintf@tmpval,___llmod@dividend
  4137  000D28  C060  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4138  000D2C  C061  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4139  000D30  C062  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4140  000D34  0E0A               	movlw	10
  4141  000D36  6E12               	movwf	___llmod@divisor,c
  4142  000D38  0E00               	movlw	0
  4143  000D3A  6E13               	movwf	___llmod@divisor+1,c
  4144  000D3C  0E00               	movlw	0
  4145  000D3E  6E14               	movwf	___llmod@divisor+2,c
  4146  000D40  0E00               	movlw	0
  4147  000D42  6E15               	movwf	___llmod@divisor+3,c
  4148  000D44  ECEF  F010         	call	___llmod	;wreg free
  4149  000D48  C00E  F05F         	movff	?___llmod,sprintf@tmpval
  4150  000D4C  C00F  F060         	movff	?___llmod+1,sprintf@tmpval+1
  4151  000D50  C010  F061         	movff	?___llmod+2,sprintf@tmpval+2
  4152  000D54  C011  F062         	movff	?___llmod+3,sprintf@tmpval+3
  4153                           
  4154                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4155  000D58  505F               	movf	sprintf@tmpval,w,c
  4156  000D5A  0F30               	addlw	48
  4157  000D5C  C040  FFD9         	movff	sprintf@sp,fsr2l
  4158  000D60  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4159  000D64  6EDF               	movwf	indf2,c
  4160  000D66  4A40               	infsnz	sprintf@sp,f,c
  4161  000D68  2A41               	incf	sprintf@sp+1,f,c
  4162                           
  4163                           ;doprnt.c: 1232: val %= dpowers[c];
  4164  000D6A  C063  F00E         	movff	sprintf@val,___llmod@dividend
  4165  000D6E  C064  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  4166  000D72  C065  F010         	movff	sprintf@val+2,___llmod@dividend+2
  4167  000D76  C066  F011         	movff	sprintf@val+3,___llmod@dividend+3
  4168  000D7A  506C               	movf	sprintf@c,w,c
  4169  000D7C  0D04               	mullw	4
  4170  000D7E  0E01               	movlw	low _dpowers
  4171  000D80  24F3               	addwf	prodl,w,c
  4172  000D82  6EF6               	movwf	tblptrl,c
  4173  000D84  0E06               	movlw	high _dpowers
  4174  000D86  20F4               	addwfc	prodh,w,c
  4175  000D88  6EF7               	movwf	tblptrh,c
  4176  000D8A                     	if	0	;There are less than 3 active tblptr bytes
  4177  000D8A                     	endif
  4178  000D8A  0009               	tblrd		*+
  4179  000D8C  CFF5 F012          	movff	tablat,___llmod@divisor
  4180  000D90  0009               	tblrd		*+
  4181  000D92  CFF5 F013          	movff	tablat,___llmod@divisor+1
  4182  000D96  0009               	tblrd		*+
  4183  000D98  CFF5 F014          	movff	tablat,___llmod@divisor+2
  4184  000D9C  000A               	tblrd		*-
  4185  000D9E  CFF5 F015          	movff	tablat,___llmod@divisor+3
  4186  000DA2  ECEF  F010         	call	___llmod	;wreg free
  4187  000DA6  C00E  F063         	movff	?___llmod,sprintf@val
  4188  000DAA  C00F  F064         	movff	?___llmod+1,sprintf@val+1
  4189  000DAE  C010  F065         	movff	?___llmod+2,sprintf@val+2
  4190  000DB2  C011  F066         	movff	?___llmod+3,sprintf@val+3
  4191  000DB6                     i2l1118:
  4192  000DB6  066C               	decf	sprintf@c,f,c
  4193  000DB8  286C               	incf	sprintf@c,w,c
  4194  000DBA  B4D8               	btfsc	status,2,c
  4195  000DBC  D00C               	goto	i2l1121
  4196  000DBE  D78C               	goto	i2l1119
  4197  000DC0                     
  4198                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4199  000DC0  C040  FFD9         	movff	sprintf@sp,fsr2l
  4200  000DC4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4201  000DC8  0E30               	movlw	48
  4202  000DCA  6EDF               	movwf	indf2,c
  4203  000DCC  4A40               	infsnz	sprintf@sp,f,c
  4204  000DCE  2A41               	incf	sprintf@sp+1,f,c
  4205                           
  4206                           ;doprnt.c: 1237: prec--;
  4207  000DD0  066A               	decf	sprintf@prec,f,c
  4208  000DD2  A0D8               	btfss	status,0,c
  4209  000DD4  066B               	decf	sprintf@prec+1,f,c
  4210  000DD6                     i2l1121:
  4211  000DD6  506A               	movf	sprintf@prec,w,c
  4212  000DD8  106B               	iorwf	sprintf@prec+1,w,c
  4213  000DDA  B4D8               	btfsc	status,2,c
  4214  000DDC  D0C2               	goto	i2u540_40
  4215  000DDE  D7F0               	goto	i2l1122
  4216  000DE0                     i2l1086:
  4217                           
  4218                           ;doprnt.c: 1246: }
  4219                           ;doprnt.c: 1253: {
  4220                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4221  000DE0  C059  FFD9         	movff	sprintf@ap,fsr2l
  4222  000DE4  C05A  FFDA         	movff	sprintf@ap+1,fsr2h
  4223  000DE8  CFDE F063          	movff	postinc2,sprintf@val
  4224  000DEC  CFDD F064          	movff	postdec2,sprintf@val+1
  4225  000DF0  0E00               	movlw	0
  4226  000DF2  BE64               	btfsc	sprintf@val+1,7,c
  4227  000DF4  0EFF               	movlw	-1
  4228  000DF6  6E65               	movwf	sprintf@val+2,c
  4229  000DF8  6E66               	movwf	sprintf@val+3,c
  4230  000DFA  0E02               	movlw	2
  4231  000DFC  2659               	addwf	sprintf@ap,f,c
  4232  000DFE  0E00               	movlw	0
  4233  000E00  225A               	addwfc	sprintf@ap+1,f,c
  4234                           
  4235                           ;doprnt.c: 1261: if((long)val < 0) {
  4236  000E02  AE66               	btfss	sprintf@val+3,7,c
  4237  000E04  D00A               	goto	i2l1124
  4238                           
  4239                           ;doprnt.c: 1262: flag |= 0x03;
  4240  000E06  0E03               	movlw	3
  4241  000E08  125B               	iorwf	sprintf@flag,f,c
  4242                           
  4243                           ;doprnt.c: 1263: val = -val;
  4244  000E0A  1E66               	comf	sprintf@val+3,f,c
  4245  000E0C  1E65               	comf	sprintf@val+2,f,c
  4246  000E0E  1E64               	comf	sprintf@val+1,f,c
  4247  000E10  6C63               	negf	sprintf@val,c
  4248  000E12  0E00               	movlw	0
  4249  000E14  2264               	addwfc	sprintf@val+1,f,c
  4250  000E16  2265               	addwfc	sprintf@val+2,f,c
  4251  000E18  2266               	addwfc	sprintf@val+3,f,c
  4252  000E1A                     i2l1124:
  4253                           
  4254                           ;doprnt.c: 1264: }
  4255                           ;doprnt.c: 1266: }
  4256                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4257  000E1A  506A               	movf	sprintf@prec,w,c
  4258  000E1C  106B               	iorwf	sprintf@prec+1,w,c
  4259  000E1E  A4D8               	btfss	status,2,c
  4260  000E20  D008               	goto	i2l1125
  4261  000E22  5063               	movf	sprintf@val,w,c
  4262  000E24  1064               	iorwf	sprintf@val+1,w,c
  4263  000E26  1065               	iorwf	sprintf@val+2,w,c
  4264  000E28  1066               	iorwf	sprintf@val+3,w,c
  4265  000E2A  A4D8               	btfss	status,2,c
  4266  000E2C  D002               	goto	i2l1125
  4267                           
  4268                           ;doprnt.c: 1291: prec++;
  4269  000E2E  4A6A               	infsnz	sprintf@prec,f,c
  4270  000E30  2A6B               	incf	sprintf@prec+1,f,c
  4271  000E32                     i2l1125:
  4272                           
  4273                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4274  000E32  0E01               	movlw	1
  4275  000E34  6E6C               	movwf	sprintf@c,c
  4276  000E36                     i2l5101:
  4277  000E36  0E0A               	movlw	10
  4278  000E38  186C               	xorwf	sprintf@c,w,c
  4279  000E3A  B4D8               	btfsc	status,2,c
  4280  000E3C  D018               	goto	i2u536_40
  4281                           
  4282                           ;doprnt.c: 1306: if(val < dpowers[c])
  4283  000E3E  506C               	movf	sprintf@c,w,c
  4284  000E40  0D04               	mullw	4
  4285  000E42  0E01               	movlw	low _dpowers
  4286  000E44  24F3               	addwf	prodl,w,c
  4287  000E46  6EF6               	movwf	tblptrl,c
  4288  000E48  0E06               	movlw	high _dpowers
  4289  000E4A  20F4               	addwfc	prodh,w,c
  4290  000E4C  6EF7               	movwf	tblptrh,c
  4291  000E4E                     	if	0	;There are less than 3 active tblptr bytes
  4292  000E4E                     	endif
  4293  000E4E  0009               	tblrd		*+
  4294  000E50  50F5               	movf	tablat,w,c
  4295  000E52  5C63               	subwf	sprintf@val,w,c
  4296  000E54  0009               	tblrd		*+
  4297  000E56  50F5               	movf	tablat,w,c
  4298  000E58  5864               	subwfb	sprintf@val+1,w,c
  4299  000E5A  0009               	tblrd		*+
  4300  000E5C  50F5               	movf	tablat,w,c
  4301  000E5E  5865               	subwfb	sprintf@val+2,w,c
  4302  000E60  0009               	tblrd		*+
  4303  000E62  50F5               	movf	tablat,w,c
  4304  000E64  5866               	subwfb	sprintf@val+3,w,c
  4305  000E66  A0D8               	btfss	status,0,c
  4306  000E68  D002               	goto	i2u536_40
  4307                           
  4308                           ;doprnt.c: 1307: break;
  4309  000E6A  2A6C               	incf	sprintf@c,f,c
  4310  000E6C  D7E4               	goto	i2l5101
  4311  000E6E                     i2u536_40:
  4312                           
  4313                           ;doprnt.c: 1339: if(c < prec)
  4314  000E6E  0E80               	movlw	128
  4315  000E70  BE6C               	btfsc	sprintf@c,7,c
  4316  000E72  0E7F               	movlw	127
  4317  000E74  6E4C               	movwf	??_sprintf& (0+255),c
  4318  000E76  506A               	movf	sprintf@prec,w,c
  4319  000E78  5C6C               	subwf	sprintf@c,w,c
  4320  000E7A  506B               	movf	sprintf@prec+1,w,c
  4321  000E7C  0A80               	xorlw	128
  4322  000E7E  584C               	subwfb	??_sprintf& (0+255),w,c
  4323  000E80  B0D8               	btfsc	status,0,c
  4324  000E82  D003               	goto	i2l1129
  4325                           
  4326                           ;doprnt.c: 1340: c = prec;
  4327  000E84  C06A  F06C         	movff	sprintf@prec,sprintf@c
  4328  000E88  D010               	goto	i2l1131
  4329  000E8A                     i2l1129:
  4330                           
  4331                           ;doprnt.c: 1341: else if(prec < c)
  4332  000E8A  506B               	movf	sprintf@prec+1,w,c
  4333  000E8C  0A80               	xorlw	128
  4334  000E8E  6E4C               	movwf	??_sprintf& (0+255),c
  4335  000E90  506C               	movf	sprintf@c,w,c
  4336  000E92  5C6A               	subwf	sprintf@prec,w,c
  4337  000E94  0E80               	movlw	128
  4338  000E96  BE6C               	btfsc	sprintf@c,7,c
  4339  000E98  0E7F               	movlw	127
  4340  000E9A  584C               	subwfb	??_sprintf& (0+255),w,c
  4341  000E9C  B0D8               	btfsc	status,0,c
  4342  000E9E  D005               	goto	i2l1131
  4343                           
  4344                           ;doprnt.c: 1342: prec = c;
  4345  000EA0  506C               	movf	sprintf@c,w,c
  4346  000EA2  6E6A               	movwf	sprintf@prec,c
  4347  000EA4  6A6B               	clrf	sprintf@prec+1,c
  4348  000EA6  BE6A               	btfsc	sprintf@prec,7,c
  4349  000EA8  066B               	decf	sprintf@prec+1,f,c
  4350  000EAA                     i2l1131:
  4351                           
  4352                           ;doprnt.c: 1422: {
  4353                           ;doprnt.c: 1438: if(flag & 0x03)
  4354  000EAA  0E03               	movlw	3
  4355  000EAC  145B               	andwf	sprintf@flag,w,c
  4356  000EAE  6E4C               	movwf	??_sprintf& (0+255),c
  4357  000EB0  0E00               	movlw	0
  4358  000EB2  145C               	andwf	sprintf@flag+1,w,c
  4359  000EB4  6E4D               	movwf	(??_sprintf+1)& (0+255),c
  4360  000EB6  504C               	movf	??_sprintf,w,c
  4361  000EB8  104D               	iorwf	??_sprintf+1,w,c
  4362  000EBA  B4D8               	btfsc	status,2,c
  4363  000EBC  D04A               	goto	i2l1133
  4364                           
  4365                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4366  000EBE  C040  FFD9         	movff	sprintf@sp,fsr2l
  4367  000EC2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4368  000EC6  0E2D               	movlw	45
  4369  000EC8  6EDF               	movwf	indf2,c
  4370  000ECA  D041               	goto	i2l5131
  4371  000ECC                     i2l5127:
  4372                           
  4373                           ;doprnt.c: 1478: {
  4374                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4375  000ECC  C06A  F04C         	movff	sprintf@prec,??_sprintf
  4376  000ED0  C06B  F04D         	movff	sprintf@prec+1,??_sprintf+1
  4377  000ED4  90D8               	bcf	status,0,c
  4378  000ED6  364C               	rlcf	??_sprintf,f,c
  4379  000ED8  364D               	rlcf	??_sprintf+1,f,c
  4380  000EDA  90D8               	bcf	status,0,c
  4381  000EDC  364C               	rlcf	??_sprintf,f,c
  4382  000EDE  364D               	rlcf	??_sprintf+1,f,c
  4383  000EE0  0E01               	movlw	low _dpowers
  4384  000EE2  244C               	addwf	??_sprintf,w,c
  4385  000EE4  6EF6               	movwf	tblptrl,c
  4386  000EE6  0E06               	movlw	high _dpowers
  4387  000EE8  204D               	addwfc	??_sprintf+1,w,c
  4388  000EEA  6EF7               	movwf	tblptrh,c
  4389  000EEC                     	if	0	;There are less than 3 active tblptr bytes
  4390  000EEC                     	endif
  4391  000EEC  0009               	tblrd		*+
  4392  000EEE  CFF5 F005          	movff	tablat,___lldiv@divisor
  4393  000EF2  0009               	tblrd		*+
  4394  000EF4  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4395  000EF8  0009               	tblrd		*+
  4396  000EFA  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4397  000EFE  000A               	tblrd		*-
  4398  000F00  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4399  000F04  C063  F001         	movff	sprintf@val,___lldiv@dividend
  4400  000F08  C064  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4401  000F0C  C065  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4402  000F10  C066  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4403  000F14  EC76  F010         	call	___lldiv	;wreg free
  4404  000F18  C001  F00E         	movff	?___lldiv,___llmod@dividend
  4405  000F1C  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  4406  000F20  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  4407  000F24  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  4408  000F28  0E0A               	movlw	10
  4409  000F2A  6E12               	movwf	___llmod@divisor,c
  4410  000F2C  0E00               	movlw	0
  4411  000F2E  6E13               	movwf	___llmod@divisor+1,c
  4412  000F30  0E00               	movlw	0
  4413  000F32  6E14               	movwf	___llmod@divisor+2,c
  4414  000F34  0E00               	movlw	0
  4415  000F36  6E15               	movwf	___llmod@divisor+3,c
  4416  000F38  ECEF  F010         	call	___llmod	;wreg free
  4417  000F3C  500E               	movf	?___llmod,w,c
  4418  000F3E  0F30               	addlw	48
  4419  000F40  6E6C               	movwf	sprintf@c,c
  4420                           
  4421                           ;doprnt.c: 1523: }
  4422                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4423  000F42  C040  FFD9         	movff	sprintf@sp,fsr2l
  4424  000F46  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4425  000F4A  C06C  FFDF         	movff	sprintf@c,indf2
  4426  000F4E                     i2l5131:
  4427  000F4E  4A40               	infsnz	sprintf@sp,f,c
  4428  000F50  2A41               	incf	sprintf@sp+1,f,c
  4429  000F52                     i2l1133:
  4430  000F52  066A               	decf	sprintf@prec,f,c
  4431  000F54  A0D8               	btfss	status,0,c
  4432  000F56  066B               	decf	sprintf@prec+1,f,c
  4433  000F58  286A               	incf	sprintf@prec,w,c
  4434  000F5A  E1B8               	bnz	i2l5127
  4435  000F5C  286B               	incf	sprintf@prec+1,w,c
  4436  000F5E  A4D8               	btfss	status,2,c
  4437  000F60  D7B5               	goto	i2l1134
  4438  000F62                     i2u540_40:
  4439  000F62  C042  FFF6         	movff	sprintf@f,tblptrl
  4440  000F66  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4441  000F6A  4A42               	infsnz	sprintf@f,f,c
  4442  000F6C  2A43               	incf	sprintf@f+1,f,c
  4443  000F6E                     	if	0	;tblptru may be non-zero
  4444  000F6E                     	endif
  4445  000F6E                     	if	0	;tblptru may be non-zero
  4446  000F6E                     	endif
  4447  000F6E  0008               	tblrd		*
  4448  000F70  CFF5 F06C          	movff	tablat,sprintf@c
  4449  000F74  506C               	movf	sprintf@c,w,c
  4450  000F76  A4D8               	btfss	status,2,c
  4451  000F78  EF63  F003         	goto	i2l1062
  4452  000F7C                     i2u541_40:
  4453                           
  4454                           ;doprnt.c: 1538: *sp = 0;
  4455                           
  4456                           ;doprnt.c: 1525: }
  4457                           ;doprnt.c: 1533: }
  4458                           ;doprnt.c: 1535: alldone:
  4459  000F7C  C040  FFD9         	movff	sprintf@sp,fsr2l
  4460  000F80  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4461  000F84  0E00               	movlw	0
  4462  000F86  6EDF               	movwf	indf2,c
  4463  000F88  0012               	return	
  4464  000F8A                     __end_of_sprintf:
  4465                           	opt stack 0
  4466                           pclatu	equ	0xFFB
  4467                           pclath	equ	0xFFA
  4468                           tblptru	equ	0xFF8
  4469                           tblptrh	equ	0xFF7
  4470                           tblptrl	equ	0xFF6
  4471                           tablat	equ	0xFF5
  4472                           prodh	equ	0xFF4
  4473                           prodl	equ	0xFF3
  4474                           intcon	equ	0xFF2
  4475                           indf0	equ	0xFEF
  4476                           postinc0	equ	0xFEE
  4477                           fsr0h	equ	0xFEA
  4478                           fsr0l	equ	0xFE9
  4479                           wreg	equ	0xFE8
  4480                           postdec1	equ	0xFE5
  4481                           fsr1h	equ	0xFE2
  4482                           fsr1l	equ	0xFE1
  4483                           indf2	equ	0xFDF
  4484                           postinc2	equ	0xFDE
  4485                           postdec2	equ	0xFDD
  4486                           fsr2h	equ	0xFDA
  4487                           fsr2l	equ	0xFD9
  4488                           status	equ	0xFD8
  4489                           
  4490 ;; *************** function _scale *****************
  4491 ;; Defined at:
  4492 ;;		line 425 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  scl             1    wreg     char 
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  scl             1   41[COMRAM] char 
  4497 ;; Return value:  Size  Location     Type
  4498 ;;                  3   35[COMRAM] char 
  4499 ;; Registers used:
  4500 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4506 ;;      Params:         3       0       0       0       0       0       0
  4507 ;;      Locals:         4       0       0       0       0       0       0
  4508 ;;      Temps:          0       0       0       0       0       0       0
  4509 ;;      Totals:         7       0       0       0       0       0       0
  4510 ;;Total ram usage:        7 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    2
  4513 ;; This function calls:
  4514 ;;		___awdiv
  4515 ;;		___awmod
  4516 ;;		___ftmul
  4517 ;;		___wmul
  4518 ;; This function is called by:
  4519 ;;		_sprintf
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           	psect	text22
  4524  000F8A                     __ptext22:
  4525                           	opt stack 0
  4526  000F8A                     _scale:
  4527                           	opt stack 22
  4528                           
  4529                           ;incstack = 0
  4530                           ;scale@scl stored from wreg
  4531  000F8A  6E2A               	movwf	scale@scl,c
  4532                           
  4533                           ;doprnt.c: 428: if(scl < 0) {
  4534  000F8C  AE2A               	btfss	scale@scl,7,c
  4535  000F8E  D101               	goto	i2l1051
  4536                           
  4537                           ;doprnt.c: 429: scl = -scl;
  4538  000F90  6C2A               	negf	scale@scl,c
  4539                           
  4540                           ;doprnt.c: 430: if(scl>=110)
  4541  000F92  502A               	movf	scale@scl,w,c
  4542  000F94  0A80               	xorlw	128
  4543  000F96  0F12               	addlw	-238
  4544  000F98  A0D8               	btfss	status,0,c
  4545  000F9A  D091               	goto	i2l1052
  4546                           
  4547                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4548  000F9C  0E00               	movlw	0
  4549  000F9E  6E12               	movwf	___wmul@multiplicand+1,c
  4550  000FA0  0E03               	movlw	3
  4551  000FA2  6E11               	movwf	___wmul@multiplicand,c
  4552  000FA4  0E00               	movlw	0
  4553  000FA6  6E0A               	movwf	___awdiv@divisor+1,c
  4554  000FA8  0E0A               	movlw	10
  4555  000FAA  6E09               	movwf	___awdiv@divisor,c
  4556  000FAC  0E00               	movlw	0
  4557  000FAE  6E04               	movwf	___awmod@divisor+1,c
  4558  000FB0  0E64               	movlw	100
  4559  000FB2  6E03               	movwf	___awmod@divisor,c
  4560  000FB4  502A               	movf	scale@scl,w,c
  4561  000FB6  6E01               	movwf	___awmod@dividend,c
  4562  000FB8  6A02               	clrf	___awmod@dividend+1,c
  4563  000FBA  BE01               	btfsc	___awmod@dividend,7,c
  4564  000FBC  0602               	decf	___awmod@dividend+1,f,c
  4565  000FBE  ECB7  F010         	call	___awmod	;wreg free
  4566  000FC2  C001  F007         	movff	?___awmod,___awdiv@dividend
  4567  000FC6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4568  000FCA  EC34  F010         	call	___awdiv	;wreg free
  4569  000FCE  0E09               	movlw	9
  4570  000FD0  2407               	addwf	?___awdiv,w,c
  4571  000FD2  6E0F               	movwf	___wmul@multiplier,c
  4572  000FD4  0E00               	movlw	0
  4573  000FD6  2008               	addwfc	?___awdiv+1,w,c
  4574  000FD8  6E10               	movwf	___wmul@multiplier+1,c
  4575  000FDA  EC45  F013         	call	___wmul	;wreg free
  4576  000FDE  0E50               	movlw	low __npowers_
  4577  000FE0  240F               	addwf	?___wmul,w,c
  4578  000FE2  6EF6               	movwf	tblptrl,c
  4579  000FE4  0E06               	movlw	high __npowers_
  4580  000FE6  2010               	addwfc	?___wmul+1,w,c
  4581  000FE8  6EF7               	movwf	tblptrh,c
  4582  000FEA                     	if	0	;There are less than 3 active tblptr bytes
  4583  000FEA                     	endif
  4584  000FEA  0009               	tblrd		*+
  4585  000FEC  CFF5 F018          	movff	tablat,___ftmul@f2
  4586  000FF0  0009               	tblrd		*+
  4587  000FF2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4588  000FF6  000A               	tblrd		*-
  4589  000FF8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4590  000FFC  0E00               	movlw	0
  4591  000FFE  6E0A               	movwf	___awdiv@divisor+1,c
  4592  001000  0E64               	movlw	100
  4593  001002  6E09               	movwf	___awdiv@divisor,c
  4594  001004  502A               	movf	scale@scl,w,c
  4595  001006  6E07               	movwf	___awdiv@dividend,c
  4596  001008  6A08               	clrf	___awdiv@dividend+1,c
  4597  00100A  BE07               	btfsc	___awdiv@dividend,7,c
  4598  00100C  0608               	decf	___awdiv@dividend+1,f,c
  4599  00100E  EC34  F010         	call	___awdiv	;wreg free
  4600  001012  0E12               	movlw	18
  4601  001014  2407               	addwf	?___awdiv,w,c
  4602  001016  6E0F               	movwf	___wmul@multiplier,c
  4603  001018  0E00               	movlw	0
  4604  00101A  2008               	addwfc	?___awdiv+1,w,c
  4605  00101C  6E10               	movwf	___wmul@multiplier+1,c
  4606  00101E  0E00               	movlw	0
  4607  001020  6E12               	movwf	___wmul@multiplicand+1,c
  4608  001022  0E03               	movlw	3
  4609  001024  6E11               	movwf	___wmul@multiplicand,c
  4610  001026  EC45  F013         	call	___wmul	;wreg free
  4611  00102A  0E50               	movlw	low __npowers_
  4612  00102C  240F               	addwf	?___wmul,w,c
  4613  00102E  6EF6               	movwf	tblptrl,c
  4614  001030  0E06               	movlw	high __npowers_
  4615  001032  2010               	addwfc	?___wmul+1,w,c
  4616  001034  6EF7               	movwf	tblptrh,c
  4617  001036                     	if	0	;There are less than 3 active tblptr bytes
  4618  001036                     	endif
  4619  001036  0009               	tblrd		*+
  4620  001038  CFF5 F015          	movff	tablat,___ftmul@f1
  4621  00103C  0009               	tblrd		*+
  4622  00103E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4623  001042  000A               	tblrd		*-
  4624  001044  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4625  001048  EC02  F00E         	call	___ftmul	;wreg free
  4626  00104C  C015  F027         	movff	?___ftmul,_scale$3119
  4627  001050  C016  F028         	movff	?___ftmul+1,_scale$3119+1
  4628  001054  C017  F029         	movff	?___ftmul+2,_scale$3119+2
  4629                           
  4630                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4631  001058  C027  F015         	movff	_scale$3119,___ftmul@f1
  4632  00105C  C028  F016         	movff	_scale$3119+1,___ftmul@f1+1
  4633  001060  C029  F017         	movff	_scale$3119+2,___ftmul@f1+2
  4634  001064  0E00               	movlw	0
  4635  001066  6E12               	movwf	___wmul@multiplicand+1,c
  4636  001068  0E03               	movlw	3
  4637  00106A  6E11               	movwf	___wmul@multiplicand,c
  4638  00106C  0E00               	movlw	0
  4639  00106E  6E04               	movwf	___awmod@divisor+1,c
  4640  001070  0E0A               	movlw	10
  4641  001072  6E03               	movwf	___awmod@divisor,c
  4642  001074  502A               	movf	scale@scl,w,c
  4643  001076  6E01               	movwf	___awmod@dividend,c
  4644  001078  6A02               	clrf	___awmod@dividend+1,c
  4645  00107A  BE01               	btfsc	___awmod@dividend,7,c
  4646  00107C  0602               	decf	___awmod@dividend+1,f,c
  4647  00107E  ECB7  F010         	call	___awmod	;wreg free
  4648  001082  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4649  001086  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4650  00108A  EC45  F013         	call	___wmul	;wreg free
  4651  00108E  0E50               	movlw	low __npowers_
  4652  001090  240F               	addwf	?___wmul,w,c
  4653  001092  6EF6               	movwf	tblptrl,c
  4654  001094  0E06               	movlw	high __npowers_
  4655  001096  2010               	addwfc	?___wmul+1,w,c
  4656  001098  6EF7               	movwf	tblptrh,c
  4657  00109A                     	if	0	;There are less than 3 active tblptr bytes
  4658  00109A                     	endif
  4659  00109A  0009               	tblrd		*+
  4660  00109C  CFF5 F018          	movff	tablat,___ftmul@f2
  4661  0010A0  0009               	tblrd		*+
  4662  0010A2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4663  0010A6  000A               	tblrd		*-
  4664  0010A8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4665  0010AC  EC02  F00E         	call	___ftmul	;wreg free
  4666  0010B0  C015  F024         	movff	?___ftmul,?_scale
  4667  0010B4  C016  F025         	movff	?___ftmul+1,?_scale+1
  4668  0010B8  C017  F026         	movff	?___ftmul+2,?_scale+2
  4669  0010BC  0012               	return	
  4670  0010BE                     i2l1052:
  4671                           
  4672                           ;doprnt.c: 432: else if(scl > 10)
  4673  0010BE  502A               	movf	scale@scl,w,c
  4674  0010C0  0A80               	xorlw	128
  4675  0010C2  0F75               	addlw	-139
  4676  0010C4  A0D8               	btfss	status,0,c
  4677  0010C6  D053               	goto	i2l1055
  4678                           
  4679                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4680  0010C8  0E00               	movlw	0
  4681  0010CA  6E0A               	movwf	___awdiv@divisor+1,c
  4682  0010CC  0E0A               	movlw	10
  4683  0010CE  6E09               	movwf	___awdiv@divisor,c
  4684  0010D0  502A               	movf	scale@scl,w,c
  4685  0010D2  6E07               	movwf	___awdiv@dividend,c
  4686  0010D4  6A08               	clrf	___awdiv@dividend+1,c
  4687  0010D6  BE07               	btfsc	___awdiv@dividend,7,c
  4688  0010D8  0608               	decf	___awdiv@dividend+1,f,c
  4689  0010DA  EC34  F010         	call	___awdiv	;wreg free
  4690  0010DE  0E09               	movlw	9
  4691  0010E0  2407               	addwf	?___awdiv,w,c
  4692  0010E2  6E0F               	movwf	___wmul@multiplier,c
  4693  0010E4  0E00               	movlw	0
  4694  0010E6  2008               	addwfc	?___awdiv+1,w,c
  4695  0010E8  6E10               	movwf	___wmul@multiplier+1,c
  4696  0010EA  0E00               	movlw	0
  4697  0010EC  6E12               	movwf	___wmul@multiplicand+1,c
  4698  0010EE  0E03               	movlw	3
  4699  0010F0  6E11               	movwf	___wmul@multiplicand,c
  4700  0010F2  EC45  F013         	call	___wmul	;wreg free
  4701  0010F6  0E50               	movlw	low __npowers_
  4702  0010F8  240F               	addwf	?___wmul,w,c
  4703  0010FA  6EF6               	movwf	tblptrl,c
  4704  0010FC  0E06               	movlw	high __npowers_
  4705  0010FE  2010               	addwfc	?___wmul+1,w,c
  4706  001100  6EF7               	movwf	tblptrh,c
  4707  001102                     	if	0	;There are less than 3 active tblptr bytes
  4708  001102                     	endif
  4709  001102  0009               	tblrd		*+
  4710  001104  CFF5 F015          	movff	tablat,___ftmul@f1
  4711  001108  0009               	tblrd		*+
  4712  00110A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4713  00110E  000A               	tblrd		*-
  4714  001110  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4715  001114  0E00               	movlw	0
  4716  001116  6E12               	movwf	___wmul@multiplicand+1,c
  4717  001118  0E03               	movlw	3
  4718  00111A  6E11               	movwf	___wmul@multiplicand,c
  4719  00111C  0E00               	movlw	0
  4720  00111E  6E04               	movwf	___awmod@divisor+1,c
  4721  001120  0E0A               	movlw	10
  4722  001122  6E03               	movwf	___awmod@divisor,c
  4723  001124  502A               	movf	scale@scl,w,c
  4724  001126  6E01               	movwf	___awmod@dividend,c
  4725  001128  6A02               	clrf	___awmod@dividend+1,c
  4726  00112A  BE01               	btfsc	___awmod@dividend,7,c
  4727  00112C  0602               	decf	___awmod@dividend+1,f,c
  4728  00112E  ECB7  F010         	call	___awmod	;wreg free
  4729  001132  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4730  001136  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4731  00113A  EC45  F013         	call	___wmul	;wreg free
  4732  00113E  0E50               	movlw	low __npowers_
  4733  001140  240F               	addwf	?___wmul,w,c
  4734  001142  6EF6               	movwf	tblptrl,c
  4735  001144  0E06               	movlw	high __npowers_
  4736  001146  2010               	addwfc	?___wmul+1,w,c
  4737  001148  6EF7               	movwf	tblptrh,c
  4738  00114A                     	if	0	;There are less than 3 active tblptr bytes
  4739  00114A                     	endif
  4740  00114A  0009               	tblrd		*+
  4741  00114C  CFF5 F018          	movff	tablat,___ftmul@f2
  4742  001150  0009               	tblrd		*+
  4743  001152  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4744  001156  000A               	tblrd		*-
  4745  001158  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4746  00115C  EC02  F00E         	call	___ftmul	;wreg free
  4747  001160  C015  F024         	movff	?___ftmul,?_scale
  4748  001164  C016  F025         	movff	?___ftmul+1,?_scale+1
  4749  001168  C017  F026         	movff	?___ftmul+2,?_scale+2
  4750  00116C  0012               	return	
  4751  00116E                     i2l1055:
  4752                           
  4753                           ;doprnt.c: 434: return _npowers_[scl];
  4754  00116E  502A               	movf	scale@scl,w,c
  4755  001170  0D03               	mullw	3
  4756  001172  0E50               	movlw	low __npowers_
  4757  001174  24F3               	addwf	prodl,w,c
  4758  001176  6EF6               	movwf	tblptrl,c
  4759  001178  0E06               	movlw	high __npowers_
  4760  00117A  20F4               	addwfc	prodh,w,c
  4761  00117C  6EF7               	movwf	tblptrh,c
  4762  00117E                     	if	0	;There are less than 3 active tblptr bytes
  4763  00117E                     	endif
  4764  00117E  0009               	tblrd		*+
  4765  001180  CFF5 F024          	movff	tablat,?_scale
  4766  001184  0009               	tblrd		*+
  4767  001186  CFF5 F025          	movff	tablat,?_scale+1
  4768  00118A  000A               	tblrd		*-
  4769  00118C  CFF5 F026          	movff	tablat,?_scale+2
  4770  001190  0012               	return	
  4771  001192                     i2l1051:
  4772                           
  4773                           ;doprnt.c: 435: }
  4774                           ;doprnt.c: 436: if(scl>=110)
  4775  001192  502A               	movf	scale@scl,w,c
  4776  001194  0A80               	xorlw	128
  4777  001196  0F12               	addlw	-238
  4778  001198  A0D8               	btfss	status,0,c
  4779  00119A  D091               	goto	i2l1056
  4780                           
  4781                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4782  00119C  0E00               	movlw	0
  4783  00119E  6E12               	movwf	___wmul@multiplicand+1,c
  4784  0011A0  0E03               	movlw	3
  4785  0011A2  6E11               	movwf	___wmul@multiplicand,c
  4786  0011A4  0E00               	movlw	0
  4787  0011A6  6E0A               	movwf	___awdiv@divisor+1,c
  4788  0011A8  0E0A               	movlw	10
  4789  0011AA  6E09               	movwf	___awdiv@divisor,c
  4790  0011AC  0E00               	movlw	0
  4791  0011AE  6E04               	movwf	___awmod@divisor+1,c
  4792  0011B0  0E64               	movlw	100
  4793  0011B2  6E03               	movwf	___awmod@divisor,c
  4794  0011B4  502A               	movf	scale@scl,w,c
  4795  0011B6  6E01               	movwf	___awmod@dividend,c
  4796  0011B8  6A02               	clrf	___awmod@dividend+1,c
  4797  0011BA  BE01               	btfsc	___awmod@dividend,7,c
  4798  0011BC  0602               	decf	___awmod@dividend+1,f,c
  4799  0011BE  ECB7  F010         	call	___awmod	;wreg free
  4800  0011C2  C001  F007         	movff	?___awmod,___awdiv@dividend
  4801  0011C6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4802  0011CA  EC34  F010         	call	___awdiv	;wreg free
  4803  0011CE  0E09               	movlw	9
  4804  0011D0  2407               	addwf	?___awdiv,w,c
  4805  0011D2  6E0F               	movwf	___wmul@multiplier,c
  4806  0011D4  0E00               	movlw	0
  4807  0011D6  2008               	addwfc	?___awdiv+1,w,c
  4808  0011D8  6E10               	movwf	___wmul@multiplier+1,c
  4809  0011DA  EC45  F013         	call	___wmul	;wreg free
  4810  0011DE  0E29               	movlw	low __powers_
  4811  0011E0  240F               	addwf	?___wmul,w,c
  4812  0011E2  6EF6               	movwf	tblptrl,c
  4813  0011E4  0E06               	movlw	high __powers_
  4814  0011E6  2010               	addwfc	?___wmul+1,w,c
  4815  0011E8  6EF7               	movwf	tblptrh,c
  4816  0011EA                     	if	0	;There are less than 3 active tblptr bytes
  4817  0011EA                     	endif
  4818  0011EA  0009               	tblrd		*+
  4819  0011EC  CFF5 F018          	movff	tablat,___ftmul@f2
  4820  0011F0  0009               	tblrd		*+
  4821  0011F2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4822  0011F6  000A               	tblrd		*-
  4823  0011F8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4824  0011FC  0E00               	movlw	0
  4825  0011FE  6E0A               	movwf	___awdiv@divisor+1,c
  4826  001200  0E64               	movlw	100
  4827  001202  6E09               	movwf	___awdiv@divisor,c
  4828  001204  502A               	movf	scale@scl,w,c
  4829  001206  6E07               	movwf	___awdiv@dividend,c
  4830  001208  6A08               	clrf	___awdiv@dividend+1,c
  4831  00120A  BE07               	btfsc	___awdiv@dividend,7,c
  4832  00120C  0608               	decf	___awdiv@dividend+1,f,c
  4833  00120E  EC34  F010         	call	___awdiv	;wreg free
  4834  001212  0E12               	movlw	18
  4835  001214  2407               	addwf	?___awdiv,w,c
  4836  001216  6E0F               	movwf	___wmul@multiplier,c
  4837  001218  0E00               	movlw	0
  4838  00121A  2008               	addwfc	?___awdiv+1,w,c
  4839  00121C  6E10               	movwf	___wmul@multiplier+1,c
  4840  00121E  0E00               	movlw	0
  4841  001220  6E12               	movwf	___wmul@multiplicand+1,c
  4842  001222  0E03               	movlw	3
  4843  001224  6E11               	movwf	___wmul@multiplicand,c
  4844  001226  EC45  F013         	call	___wmul	;wreg free
  4845  00122A  0E29               	movlw	low __powers_
  4846  00122C  240F               	addwf	?___wmul,w,c
  4847  00122E  6EF6               	movwf	tblptrl,c
  4848  001230  0E06               	movlw	high __powers_
  4849  001232  2010               	addwfc	?___wmul+1,w,c
  4850  001234  6EF7               	movwf	tblptrh,c
  4851  001236                     	if	0	;There are less than 3 active tblptr bytes
  4852  001236                     	endif
  4853  001236  0009               	tblrd		*+
  4854  001238  CFF5 F015          	movff	tablat,___ftmul@f1
  4855  00123C  0009               	tblrd		*+
  4856  00123E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4857  001242  000A               	tblrd		*-
  4858  001244  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4859  001248  EC02  F00E         	call	___ftmul	;wreg free
  4860  00124C  C015  F027         	movff	?___ftmul,_scale$3119
  4861  001250  C016  F028         	movff	?___ftmul+1,_scale$3119+1
  4862  001254  C017  F029         	movff	?___ftmul+2,_scale$3119+2
  4863                           
  4864                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4865  001258  C027  F015         	movff	_scale$3119,___ftmul@f1
  4866  00125C  C028  F016         	movff	_scale$3119+1,___ftmul@f1+1
  4867  001260  C029  F017         	movff	_scale$3119+2,___ftmul@f1+2
  4868  001264  0E00               	movlw	0
  4869  001266  6E12               	movwf	___wmul@multiplicand+1,c
  4870  001268  0E03               	movlw	3
  4871  00126A  6E11               	movwf	___wmul@multiplicand,c
  4872  00126C  0E00               	movlw	0
  4873  00126E  6E04               	movwf	___awmod@divisor+1,c
  4874  001270  0E0A               	movlw	10
  4875  001272  6E03               	movwf	___awmod@divisor,c
  4876  001274  502A               	movf	scale@scl,w,c
  4877  001276  6E01               	movwf	___awmod@dividend,c
  4878  001278  6A02               	clrf	___awmod@dividend+1,c
  4879  00127A  BE01               	btfsc	___awmod@dividend,7,c
  4880  00127C  0602               	decf	___awmod@dividend+1,f,c
  4881  00127E  ECB7  F010         	call	___awmod	;wreg free
  4882  001282  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4883  001286  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4884  00128A  EC45  F013         	call	___wmul	;wreg free
  4885  00128E  0E29               	movlw	low __powers_
  4886  001290  240F               	addwf	?___wmul,w,c
  4887  001292  6EF6               	movwf	tblptrl,c
  4888  001294  0E06               	movlw	high __powers_
  4889  001296  2010               	addwfc	?___wmul+1,w,c
  4890  001298  6EF7               	movwf	tblptrh,c
  4891  00129A                     	if	0	;There are less than 3 active tblptr bytes
  4892  00129A                     	endif
  4893  00129A  0009               	tblrd		*+
  4894  00129C  CFF5 F018          	movff	tablat,___ftmul@f2
  4895  0012A0  0009               	tblrd		*+
  4896  0012A2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4897  0012A6  000A               	tblrd		*-
  4898  0012A8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4899  0012AC  EC02  F00E         	call	___ftmul	;wreg free
  4900  0012B0  C015  F024         	movff	?___ftmul,?_scale
  4901  0012B4  C016  F025         	movff	?___ftmul+1,?_scale+1
  4902  0012B8  C017  F026         	movff	?___ftmul+2,?_scale+2
  4903  0012BC  0012               	return	
  4904  0012BE                     i2l1056:
  4905                           
  4906                           ;doprnt.c: 438: else if(scl > 10)
  4907  0012BE  502A               	movf	scale@scl,w,c
  4908  0012C0  0A80               	xorlw	128
  4909  0012C2  0F75               	addlw	-139
  4910  0012C4  A0D8               	btfss	status,0,c
  4911  0012C6  D053               	goto	i2l1058
  4912                           
  4913                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4914  0012C8  0E00               	movlw	0
  4915  0012CA  6E0A               	movwf	___awdiv@divisor+1,c
  4916  0012CC  0E0A               	movlw	10
  4917  0012CE  6E09               	movwf	___awdiv@divisor,c
  4918  0012D0  502A               	movf	scale@scl,w,c
  4919  0012D2  6E07               	movwf	___awdiv@dividend,c
  4920  0012D4  6A08               	clrf	___awdiv@dividend+1,c
  4921  0012D6  BE07               	btfsc	___awdiv@dividend,7,c
  4922  0012D8  0608               	decf	___awdiv@dividend+1,f,c
  4923  0012DA  EC34  F010         	call	___awdiv	;wreg free
  4924  0012DE  0E09               	movlw	9
  4925  0012E0  2407               	addwf	?___awdiv,w,c
  4926  0012E2  6E0F               	movwf	___wmul@multiplier,c
  4927  0012E4  0E00               	movlw	0
  4928  0012E6  2008               	addwfc	?___awdiv+1,w,c
  4929  0012E8  6E10               	movwf	___wmul@multiplier+1,c
  4930  0012EA  0E00               	movlw	0
  4931  0012EC  6E12               	movwf	___wmul@multiplicand+1,c
  4932  0012EE  0E03               	movlw	3
  4933  0012F0  6E11               	movwf	___wmul@multiplicand,c
  4934  0012F2  EC45  F013         	call	___wmul	;wreg free
  4935  0012F6  0E29               	movlw	low __powers_
  4936  0012F8  240F               	addwf	?___wmul,w,c
  4937  0012FA  6EF6               	movwf	tblptrl,c
  4938  0012FC  0E06               	movlw	high __powers_
  4939  0012FE  2010               	addwfc	?___wmul+1,w,c
  4940  001300  6EF7               	movwf	tblptrh,c
  4941  001302                     	if	0	;There are less than 3 active tblptr bytes
  4942  001302                     	endif
  4943  001302  0009               	tblrd		*+
  4944  001304  CFF5 F015          	movff	tablat,___ftmul@f1
  4945  001308  0009               	tblrd		*+
  4946  00130A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4947  00130E  000A               	tblrd		*-
  4948  001310  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4949  001314  0E00               	movlw	0
  4950  001316  6E12               	movwf	___wmul@multiplicand+1,c
  4951  001318  0E03               	movlw	3
  4952  00131A  6E11               	movwf	___wmul@multiplicand,c
  4953  00131C  0E00               	movlw	0
  4954  00131E  6E04               	movwf	___awmod@divisor+1,c
  4955  001320  0E0A               	movlw	10
  4956  001322  6E03               	movwf	___awmod@divisor,c
  4957  001324  502A               	movf	scale@scl,w,c
  4958  001326  6E01               	movwf	___awmod@dividend,c
  4959  001328  6A02               	clrf	___awmod@dividend+1,c
  4960  00132A  BE01               	btfsc	___awmod@dividend,7,c
  4961  00132C  0602               	decf	___awmod@dividend+1,f,c
  4962  00132E  ECB7  F010         	call	___awmod	;wreg free
  4963  001332  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4964  001336  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4965  00133A  EC45  F013         	call	___wmul	;wreg free
  4966  00133E  0E29               	movlw	low __powers_
  4967  001340  240F               	addwf	?___wmul,w,c
  4968  001342  6EF6               	movwf	tblptrl,c
  4969  001344  0E06               	movlw	high __powers_
  4970  001346  2010               	addwfc	?___wmul+1,w,c
  4971  001348  6EF7               	movwf	tblptrh,c
  4972  00134A                     	if	0	;There are less than 3 active tblptr bytes
  4973  00134A                     	endif
  4974  00134A  0009               	tblrd		*+
  4975  00134C  CFF5 F018          	movff	tablat,___ftmul@f2
  4976  001350  0009               	tblrd		*+
  4977  001352  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4978  001356  000A               	tblrd		*-
  4979  001358  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4980  00135C  EC02  F00E         	call	___ftmul	;wreg free
  4981  001360  C015  F024         	movff	?___ftmul,?_scale
  4982  001364  C016  F025         	movff	?___ftmul+1,?_scale+1
  4983  001368  C017  F026         	movff	?___ftmul+2,?_scale+2
  4984  00136C  0012               	return	
  4985  00136E                     i2l1058:
  4986                           
  4987                           ;doprnt.c: 440: return _powers_[scl];
  4988  00136E  502A               	movf	scale@scl,w,c
  4989  001370  0D03               	mullw	3
  4990  001372  0E29               	movlw	low __powers_
  4991  001374  24F3               	addwf	prodl,w,c
  4992  001376  6EF6               	movwf	tblptrl,c
  4993  001378  0E06               	movlw	high __powers_
  4994  00137A  20F4               	addwfc	prodh,w,c
  4995  00137C  6EF7               	movwf	tblptrh,c
  4996  00137E                     	if	0	;There are less than 3 active tblptr bytes
  4997  00137E                     	endif
  4998  00137E  0009               	tblrd		*+
  4999  001380  CFF5 F024          	movff	tablat,?_scale
  5000  001384  0009               	tblrd		*+
  5001  001386  CFF5 F025          	movff	tablat,?_scale+1
  5002  00138A  000A               	tblrd		*-
  5003  00138C  CFF5 F026          	movff	tablat,?_scale+2
  5004  001390  0012               	return	
  5005  001392                     __end_of_scale:
  5006                           	opt stack 0
  5007                           pclatu	equ	0xFFB
  5008                           pclath	equ	0xFFA
  5009                           tblptru	equ	0xFF8
  5010                           tblptrh	equ	0xFF7
  5011                           tblptrl	equ	0xFF6
  5012                           tablat	equ	0xFF5
  5013                           prodh	equ	0xFF4
  5014                           prodl	equ	0xFF3
  5015                           intcon	equ	0xFF2
  5016                           indf0	equ	0xFEF
  5017                           postinc0	equ	0xFEE
  5018                           fsr0h	equ	0xFEA
  5019                           fsr0l	equ	0xFE9
  5020                           wreg	equ	0xFE8
  5021                           postdec1	equ	0xFE5
  5022                           fsr1h	equ	0xFE2
  5023                           fsr1l	equ	0xFE1
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _isdigit *****************
  5032 ;; Defined at:
  5033 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/isdigit.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  c               1    wreg     unsigned char 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  c               1    2[COMRAM] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;		None               void
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5047 ;;      Params:         0       0       0       0       0       0       0
  5048 ;;      Locals:         2       0       0       0       0       0       0
  5049 ;;      Temps:          1       0       0       0       0       0       0
  5050 ;;      Totals:         3       0       0       0       0       0       0
  5051 ;;Total ram usage:        3 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; This function calls:
  5054 ;;		Nothing
  5055 ;; This function is called by:
  5056 ;;		_sprintf
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text23
  5061  002774                     __ptext23:
  5062                           	opt stack 0
  5063  002774                     _isdigit:
  5064                           	opt stack 24
  5065                           
  5066                           ;incstack = 0
  5067                           ;isdigit@c stored from wreg
  5068  002774  6E03               	movwf	isdigit@c,c
  5069  002776  0E00               	movlw	0
  5070  002778  6E02               	movwf	_isdigit$2678,c
  5071  00277A  0E3A               	movlw	58
  5072  00277C  6003               	cpfslt	isdigit@c,c
  5073  00277E  D005               	goto	i2l1508
  5074  002780  0E2F               	movlw	47
  5075  002782  6403               	cpfsgt	isdigit@c,c
  5076  002784  D002               	goto	i2l1508
  5077  002786  0E01               	movlw	1
  5078  002788  6E02               	movwf	_isdigit$2678,c
  5079  00278A                     i2l1508:
  5080  00278A  C002  F001         	movff	_isdigit$2678,??_isdigit
  5081  00278E  3001               	rrcf	??_isdigit,w,c
  5082  002790  0012               	return	
  5083  002792                     __end_of_isdigit:
  5084                           	opt stack 0
  5085                           pclatu	equ	0xFFB
  5086                           pclath	equ	0xFFA
  5087                           tblptru	equ	0xFF8
  5088                           tblptrh	equ	0xFF7
  5089                           tblptrl	equ	0xFF6
  5090                           tablat	equ	0xFF5
  5091                           prodh	equ	0xFF4
  5092                           prodl	equ	0xFF3
  5093                           intcon	equ	0xFF2
  5094                           indf0	equ	0xFEF
  5095                           postinc0	equ	0xFEE
  5096                           fsr0h	equ	0xFEA
  5097                           fsr0l	equ	0xFE9
  5098                           wreg	equ	0xFE8
  5099                           postdec1	equ	0xFE5
  5100                           fsr1h	equ	0xFE2
  5101                           fsr1l	equ	0xFE1
  5102                           indf2	equ	0xFDF
  5103                           postinc2	equ	0xFDE
  5104                           postdec2	equ	0xFDD
  5105                           fsr2h	equ	0xFDA
  5106                           fsr2l	equ	0xFD9
  5107                           status	equ	0xFD8
  5108                           
  5109 ;; *************** function _fround *****************
  5110 ;; Defined at:
  5111 ;;		line 409 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  5112 ;; Parameters:    Size  Location     Type
  5113 ;;  prec            1    wreg     unsigned char 
  5114 ;; Auto vars:     Size  Location     Type
  5115 ;;  prec            1   44[COMRAM] unsigned char 
  5116 ;; Return value:  Size  Location     Type
  5117 ;;                  3   35[COMRAM] unsigned char 
  5118 ;; Registers used:
  5119 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5120 ;; Tracked objects:
  5121 ;;		On entry : 0/0
  5122 ;;		On exit  : 0/0
  5123 ;;		Unchanged: 0/0
  5124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5125 ;;      Params:         3       0       0       0       0       0       0
  5126 ;;      Locals:         7       0       0       0       0       0       0
  5127 ;;      Temps:          0       0       0       0       0       0       0
  5128 ;;      Totals:        10       0       0       0       0       0       0
  5129 ;;Total ram usage:       10 bytes
  5130 ;; Hardware stack levels used:    1
  5131 ;; Hardware stack levels required when called:    2
  5132 ;; This function calls:
  5133 ;;		___awdiv
  5134 ;;		___awmod
  5135 ;;		___ftmul
  5136 ;;		___wmul
  5137 ;; This function is called by:
  5138 ;;		_sprintf
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text24
  5143  001392                     __ptext24:
  5144                           	opt stack 0
  5145  001392                     _fround:
  5146                           	opt stack 22
  5147                           
  5148                           ;incstack = 0
  5149                           ;fround@prec stored from wreg
  5150  001392  6E2D               	movwf	fround@prec,c
  5151                           
  5152                           ;doprnt.c: 413: if(prec>=110)
  5153  001394  0E6D               	movlw	109
  5154  001396  642D               	cpfsgt	fround@prec,c
  5155  001398  D09F               	goto	i2l1045
  5156                           
  5157                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5158  00139A  0E00               	movlw	0
  5159  00139C  6E12               	movwf	___wmul@multiplicand+1,c
  5160  00139E  0E03               	movlw	3
  5161  0013A0  6E11               	movwf	___wmul@multiplicand,c
  5162  0013A2  0E00               	movlw	0
  5163  0013A4  6E0A               	movwf	___awdiv@divisor+1,c
  5164  0013A6  0E0A               	movlw	10
  5165  0013A8  6E09               	movwf	___awdiv@divisor,c
  5166  0013AA  0E00               	movlw	0
  5167  0013AC  6E04               	movwf	___awmod@divisor+1,c
  5168  0013AE  0E64               	movlw	100
  5169  0013B0  6E03               	movwf	___awmod@divisor,c
  5170  0013B2  C02D  F001         	movff	fround@prec,___awmod@dividend
  5171  0013B6  6A02               	clrf	___awmod@dividend+1,c
  5172  0013B8  ECB7  F010         	call	___awmod	;wreg free
  5173  0013BC  C001  F007         	movff	?___awmod,___awdiv@dividend
  5174  0013C0  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5175  0013C4  EC34  F010         	call	___awdiv	;wreg free
  5176  0013C8  0E09               	movlw	9
  5177  0013CA  2407               	addwf	?___awdiv,w,c
  5178  0013CC  6E0F               	movwf	___wmul@multiplier,c
  5179  0013CE  0E00               	movlw	0
  5180  0013D0  2008               	addwfc	?___awdiv+1,w,c
  5181  0013D2  6E10               	movwf	___wmul@multiplier+1,c
  5182  0013D4  EC45  F013         	call	___wmul	;wreg free
  5183  0013D8  0E50               	movlw	low __npowers_
  5184  0013DA  240F               	addwf	?___wmul,w,c
  5185  0013DC  6EF6               	movwf	tblptrl,c
  5186  0013DE  0E06               	movlw	high __npowers_
  5187  0013E0  2010               	addwfc	?___wmul+1,w,c
  5188  0013E2  6EF7               	movwf	tblptrh,c
  5189  0013E4                     	if	0	;There are less than 3 active tblptr bytes
  5190  0013E4                     	endif
  5191  0013E4  0009               	tblrd		*+
  5192  0013E6  CFF5 F018          	movff	tablat,___ftmul@f2
  5193  0013EA  0009               	tblrd		*+
  5194  0013EC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5195  0013F0  000A               	tblrd		*-
  5196  0013F2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5197  0013F6  0E00               	movlw	0
  5198  0013F8  6E0A               	movwf	___awdiv@divisor+1,c
  5199  0013FA  0E64               	movlw	100
  5200  0013FC  6E09               	movwf	___awdiv@divisor,c
  5201  0013FE  C02D  F007         	movff	fround@prec,___awdiv@dividend
  5202  001402  6A08               	clrf	___awdiv@dividend+1,c
  5203  001404  EC34  F010         	call	___awdiv	;wreg free
  5204  001408  0E12               	movlw	18
  5205  00140A  2407               	addwf	?___awdiv,w,c
  5206  00140C  6E0F               	movwf	___wmul@multiplier,c
  5207  00140E  0E00               	movlw	0
  5208  001410  2008               	addwfc	?___awdiv+1,w,c
  5209  001412  6E10               	movwf	___wmul@multiplier+1,c
  5210  001414  0E00               	movlw	0
  5211  001416  6E12               	movwf	___wmul@multiplicand+1,c
  5212  001418  0E03               	movlw	3
  5213  00141A  6E11               	movwf	___wmul@multiplicand,c
  5214  00141C  EC45  F013         	call	___wmul	;wreg free
  5215  001420  0E50               	movlw	low __npowers_
  5216  001422  240F               	addwf	?___wmul,w,c
  5217  001424  6EF6               	movwf	tblptrl,c
  5218  001426  0E06               	movlw	high __npowers_
  5219  001428  2010               	addwfc	?___wmul+1,w,c
  5220  00142A  6EF7               	movwf	tblptrh,c
  5221  00142C                     	if	0	;There are less than 3 active tblptr bytes
  5222  00142C                     	endif
  5223  00142C  0009               	tblrd		*+
  5224  00142E  CFF5 F015          	movff	tablat,___ftmul@f1
  5225  001432  0009               	tblrd		*+
  5226  001434  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5227  001438  000A               	tblrd		*-
  5228  00143A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5229  00143E  EC02  F00E         	call	___ftmul	;wreg free
  5230  001442  C015  F02A         	movff	?___ftmul,_fround$3117
  5231  001446  C016  F02B         	movff	?___ftmul+1,_fround$3117+1
  5232  00144A  C017  F02C         	movff	?___ftmul+2,_fround$3117+2
  5233                           
  5234                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5235  00144E  0E00               	movlw	0
  5236  001450  6E12               	movwf	___wmul@multiplicand+1,c
  5237  001452  0E03               	movlw	3
  5238  001454  6E11               	movwf	___wmul@multiplicand,c
  5239  001456  0E00               	movlw	0
  5240  001458  6E04               	movwf	___awmod@divisor+1,c
  5241  00145A  0E0A               	movlw	10
  5242  00145C  6E03               	movwf	___awmod@divisor,c
  5243  00145E  C02D  F001         	movff	fround@prec,___awmod@dividend
  5244  001462  6A02               	clrf	___awmod@dividend+1,c
  5245  001464  ECB7  F010         	call	___awmod	;wreg free
  5246  001468  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5247  00146C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5248  001470  EC45  F013         	call	___wmul	;wreg free
  5249  001474  0E50               	movlw	low __npowers_
  5250  001476  240F               	addwf	?___wmul,w,c
  5251  001478  6EF6               	movwf	tblptrl,c
  5252  00147A  0E06               	movlw	high __npowers_
  5253  00147C  2010               	addwfc	?___wmul+1,w,c
  5254  00147E  6EF7               	movwf	tblptrh,c
  5255  001480                     	if	0	;There are less than 3 active tblptr bytes
  5256  001480                     	endif
  5257  001480  0009               	tblrd		*+
  5258  001482  CFF5 F018          	movff	tablat,___ftmul@f2
  5259  001486  0009               	tblrd		*+
  5260  001488  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5261  00148C  000A               	tblrd		*-
  5262  00148E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5263  001492  C02A  F015         	movff	_fround$3117,___ftmul@f1
  5264  001496  C02B  F016         	movff	_fround$3117+1,___ftmul@f1+1
  5265  00149A  C02C  F017         	movff	_fround$3117+2,___ftmul@f1+2
  5266  00149E  EC02  F00E         	call	___ftmul	;wreg free
  5267  0014A2  C015  F027         	movff	?___ftmul,_fround$3118
  5268  0014A6  C016  F028         	movff	?___ftmul+1,_fround$3118+1
  5269  0014AA  C017  F029         	movff	?___ftmul+2,_fround$3118+2
  5270                           
  5271                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5272  0014AE  C027  F015         	movff	_fround$3118,___ftmul@f1
  5273  0014B2  C028  F016         	movff	_fround$3118+1,___ftmul@f1+1
  5274  0014B6  C029  F017         	movff	_fround$3118+2,___ftmul@f1+2
  5275  0014BA  0E00               	movlw	0
  5276  0014BC  6E18               	movwf	___ftmul@f2,c
  5277  0014BE  0E00               	movlw	0
  5278  0014C0  6E19               	movwf	___ftmul@f2+1,c
  5279  0014C2  0E3F               	movlw	63
  5280  0014C4  6E1A               	movwf	___ftmul@f2+2,c
  5281  0014C6  EC02  F00E         	call	___ftmul	;wreg free
  5282  0014CA  C015  F024         	movff	?___ftmul,?_fround
  5283  0014CE  C016  F025         	movff	?___ftmul+1,?_fround+1
  5284  0014D2  C017  F026         	movff	?___ftmul+2,?_fround+2
  5285  0014D6  0012               	return	
  5286  0014D8                     i2l1045:
  5287                           
  5288                           ;doprnt.c: 415: else if(prec > 10)
  5289  0014D8  0E0A               	movlw	10
  5290  0014DA  642D               	cpfsgt	fround@prec,c
  5291  0014DC  D063               	goto	i2l1048
  5292                           
  5293                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5294  0014DE  0E00               	movlw	0
  5295  0014E0  6E12               	movwf	___wmul@multiplicand+1,c
  5296  0014E2  0E03               	movlw	3
  5297  0014E4  6E11               	movwf	___wmul@multiplicand,c
  5298  0014E6  0E00               	movlw	0
  5299  0014E8  6E04               	movwf	___awmod@divisor+1,c
  5300  0014EA  0E0A               	movlw	10
  5301  0014EC  6E03               	movwf	___awmod@divisor,c
  5302  0014EE  C02D  F001         	movff	fround@prec,___awmod@dividend
  5303  0014F2  6A02               	clrf	___awmod@dividend+1,c
  5304  0014F4  ECB7  F010         	call	___awmod	;wreg free
  5305  0014F8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5306  0014FC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5307  001500  EC45  F013         	call	___wmul	;wreg free
  5308  001504  0E50               	movlw	low __npowers_
  5309  001506  240F               	addwf	?___wmul,w,c
  5310  001508  6EF6               	movwf	tblptrl,c
  5311  00150A  0E06               	movlw	high __npowers_
  5312  00150C  2010               	addwfc	?___wmul+1,w,c
  5313  00150E  6EF7               	movwf	tblptrh,c
  5314  001510                     	if	0	;There are less than 3 active tblptr bytes
  5315  001510                     	endif
  5316  001510  0009               	tblrd		*+
  5317  001512  CFF5 F018          	movff	tablat,___ftmul@f2
  5318  001516  0009               	tblrd		*+
  5319  001518  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5320  00151C  000A               	tblrd		*-
  5321  00151E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5322  001522  0E00               	movlw	0
  5323  001524  6E0A               	movwf	___awdiv@divisor+1,c
  5324  001526  0E0A               	movlw	10
  5325  001528  6E09               	movwf	___awdiv@divisor,c
  5326  00152A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  5327  00152E  6A08               	clrf	___awdiv@dividend+1,c
  5328  001530  EC34  F010         	call	___awdiv	;wreg free
  5329  001534  0E09               	movlw	9
  5330  001536  2407               	addwf	?___awdiv,w,c
  5331  001538  6E0F               	movwf	___wmul@multiplier,c
  5332  00153A  0E00               	movlw	0
  5333  00153C  2008               	addwfc	?___awdiv+1,w,c
  5334  00153E  6E10               	movwf	___wmul@multiplier+1,c
  5335  001540  0E00               	movlw	0
  5336  001542  6E12               	movwf	___wmul@multiplicand+1,c
  5337  001544  0E03               	movlw	3
  5338  001546  6E11               	movwf	___wmul@multiplicand,c
  5339  001548  EC45  F013         	call	___wmul	;wreg free
  5340  00154C  0E50               	movlw	low __npowers_
  5341  00154E  240F               	addwf	?___wmul,w,c
  5342  001550  6EF6               	movwf	tblptrl,c
  5343  001552  0E06               	movlw	high __npowers_
  5344  001554  2010               	addwfc	?___wmul+1,w,c
  5345  001556  6EF7               	movwf	tblptrh,c
  5346  001558                     	if	0	;There are less than 3 active tblptr bytes
  5347  001558                     	endif
  5348  001558  0009               	tblrd		*+
  5349  00155A  CFF5 F015          	movff	tablat,___ftmul@f1
  5350  00155E  0009               	tblrd		*+
  5351  001560  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5352  001564  000A               	tblrd		*-
  5353  001566  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5354  00156A  EC02  F00E         	call	___ftmul	;wreg free
  5355  00156E  C015  F02A         	movff	?___ftmul,_fround$3117
  5356  001572  C016  F02B         	movff	?___ftmul+1,_fround$3117+1
  5357  001576  C017  F02C         	movff	?___ftmul+2,_fround$3117+2
  5358                           
  5359                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5360  00157A  C02A  F015         	movff	_fround$3117,___ftmul@f1
  5361  00157E  C02B  F016         	movff	_fround$3117+1,___ftmul@f1+1
  5362  001582  C02C  F017         	movff	_fround$3117+2,___ftmul@f1+2
  5363  001586  0E00               	movlw	0
  5364  001588  6E18               	movwf	___ftmul@f2,c
  5365  00158A  0E00               	movlw	0
  5366  00158C  6E19               	movwf	___ftmul@f2+1,c
  5367  00158E  0E3F               	movlw	63
  5368  001590  6E1A               	movwf	___ftmul@f2+2,c
  5369  001592  EC02  F00E         	call	___ftmul	;wreg free
  5370  001596  C015  F024         	movff	?___ftmul,?_fround
  5371  00159A  C016  F025         	movff	?___ftmul+1,?_fround+1
  5372  00159E  C017  F026         	movff	?___ftmul+2,?_fround+2
  5373  0015A2  0012               	return	
  5374  0015A4                     i2l1048:
  5375                           
  5376                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5377  0015A4  502D               	movf	fround@prec,w,c
  5378  0015A6  0D03               	mullw	3
  5379  0015A8  0E50               	movlw	low __npowers_
  5380  0015AA  24F3               	addwf	prodl,w,c
  5381  0015AC  6EF6               	movwf	tblptrl,c
  5382  0015AE  0E06               	movlw	high __npowers_
  5383  0015B0  20F4               	addwfc	prodh,w,c
  5384  0015B2  6EF7               	movwf	tblptrh,c
  5385  0015B4                     	if	0	;There are less than 3 active tblptr bytes
  5386  0015B4                     	endif
  5387  0015B4  0009               	tblrd		*+
  5388  0015B6  CFF5 F015          	movff	tablat,___ftmul@f1
  5389  0015BA  0009               	tblrd		*+
  5390  0015BC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5391  0015C0  000A               	tblrd		*-
  5392  0015C2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5393  0015C6  0E00               	movlw	0
  5394  0015C8  6E18               	movwf	___ftmul@f2,c
  5395  0015CA  0E00               	movlw	0
  5396  0015CC  6E19               	movwf	___ftmul@f2+1,c
  5397  0015CE  0E3F               	movlw	63
  5398  0015D0  6E1A               	movwf	___ftmul@f2+2,c
  5399  0015D2  EC02  F00E         	call	___ftmul	;wreg free
  5400  0015D6  C015  F024         	movff	?___ftmul,?_fround
  5401  0015DA  C016  F025         	movff	?___ftmul+1,?_fround+1
  5402  0015DE  C017  F026         	movff	?___ftmul+2,?_fround+2
  5403  0015E2  0012               	return	
  5404  0015E4                     __end_of_fround:
  5405                           	opt stack 0
  5406                           pclatu	equ	0xFFB
  5407                           pclath	equ	0xFFA
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           intcon	equ	0xFF2
  5415                           indf0	equ	0xFEF
  5416                           postinc0	equ	0xFEE
  5417                           fsr0h	equ	0xFEA
  5418                           fsr0l	equ	0xFE9
  5419                           wreg	equ	0xFE8
  5420                           postdec1	equ	0xFE5
  5421                           fsr1h	equ	0xFE2
  5422                           fsr1l	equ	0xFE1
  5423                           indf2	equ	0xFDF
  5424                           postinc2	equ	0xFDE
  5425                           postdec2	equ	0xFDD
  5426                           fsr2h	equ	0xFDA
  5427                           fsr2l	equ	0xFD9
  5428                           status	equ	0xFD8
  5429                           
  5430 ;; *************** function ___wmul *****************
  5431 ;; Defined at:
  5432 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/Umul16.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  multiplier      2   14[COMRAM] unsigned int 
  5435 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;  product         2   18[COMRAM] unsigned int 
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  2   14[COMRAM] unsigned int 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2, status,0, prodl, prodh
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5447 ;;      Params:         4       0       0       0       0       0       0
  5448 ;;      Locals:         2       0       0       0       0       0       0
  5449 ;;      Temps:          0       0       0       0       0       0       0
  5450 ;;      Totals:         6       0       0       0       0       0       0
  5451 ;;Total ram usage:        6 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_fround
  5457 ;;		_scale
  5458 ;;		_sprintf
  5459 ;; This function uses a non-reentrant model
  5460 ;;
  5461                           
  5462                           	psect	text25
  5463  00268A                     __ptext25:
  5464                           	opt stack 0
  5465  00268A                     ___wmul:
  5466                           	opt stack 23
  5467                           
  5468                           ;incstack = 0
  5469  00268A  500F               	movf	___wmul@multiplier,w,c
  5470  00268C  0211               	mulwf	___wmul@multiplicand,c
  5471  00268E  CFF3 F013          	movff	prodl,___wmul@product
  5472  002692  CFF4 F014          	movff	prodh,___wmul@product+1
  5473  002696  500F               	movf	___wmul@multiplier,w,c
  5474  002698  0212               	mulwf	___wmul@multiplicand+1,c
  5475  00269A  50F3               	movf	prodl,w,c
  5476  00269C  2614               	addwf	___wmul@product+1,f,c
  5477  00269E  5010               	movf	___wmul@multiplier+1,w,c
  5478  0026A0  0211               	mulwf	___wmul@multiplicand,c
  5479  0026A2  50F3               	movf	prodl,w,c
  5480  0026A4  2614               	addwf	___wmul@product+1,f,c
  5481  0026A6  C013  F00F         	movff	___wmul@product,?___wmul
  5482  0026AA  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5483  0026AE  0012               	return	
  5484  0026B0                     __end_of___wmul:
  5485                           	opt stack 0
  5486                           pclatu	equ	0xFFB
  5487                           pclath	equ	0xFFA
  5488                           tblptru	equ	0xFF8
  5489                           tblptrh	equ	0xFF7
  5490                           tblptrl	equ	0xFF6
  5491                           tablat	equ	0xFF5
  5492                           prodh	equ	0xFF4
  5493                           prodl	equ	0xFF3
  5494                           intcon	equ	0xFF2
  5495                           indf0	equ	0xFEF
  5496                           postinc0	equ	0xFEE
  5497                           fsr0h	equ	0xFEA
  5498                           fsr0l	equ	0xFE9
  5499                           wreg	equ	0xFE8
  5500                           postdec1	equ	0xFE5
  5501                           fsr1h	equ	0xFE2
  5502                           fsr1l	equ	0xFE1
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           fsr2h	equ	0xFDA
  5507                           fsr2l	equ	0xFD9
  5508                           status	equ	0xFD8
  5509                           
  5510 ;; *************** function ___awmod *****************
  5511 ;; Defined at:
  5512 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awmod.c"
  5513 ;; Parameters:    Size  Location     Type
  5514 ;;  dividend        2    0[COMRAM] int 
  5515 ;;  divisor         2    2[COMRAM] int 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  sign            1    5[COMRAM] unsigned char 
  5518 ;;  counter         1    4[COMRAM] unsigned char 
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  2    0[COMRAM] int 
  5521 ;; Registers used:
  5522 ;;		wreg, status,2, status,0
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5528 ;;      Params:         4       0       0       0       0       0       0
  5529 ;;      Locals:         2       0       0       0       0       0       0
  5530 ;;      Temps:          0       0       0       0       0       0       0
  5531 ;;      Totals:         6       0       0       0       0       0       0
  5532 ;;Total ram usage:        6 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		_fround
  5538 ;;		_scale
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	text26
  5543  00216E                     __ptext26:
  5544                           	opt stack 0
  5545  00216E                     ___awmod:
  5546                           	opt stack 23
  5547                           
  5548                           ;incstack = 0
  5549  00216E  0E00               	movlw	0
  5550  002170  6E06               	movwf	___awmod@sign,c
  5551  002172  AE02               	btfss	___awmod@dividend+1,7,c
  5552  002174  D006               	goto	i2l1318
  5553  002176  6C01               	negf	___awmod@dividend,c
  5554  002178  1E02               	comf	___awmod@dividend+1,f,c
  5555  00217A  B0D8               	btfsc	status,0,c
  5556  00217C  2A02               	incf	___awmod@dividend+1,f,c
  5557  00217E  0E01               	movlw	1
  5558  002180  6E06               	movwf	___awmod@sign,c
  5559  002182                     i2l1318:
  5560  002182  AE04               	btfss	___awmod@divisor+1,7,c
  5561  002184  D004               	goto	i2l1319
  5562  002186  6C03               	negf	___awmod@divisor,c
  5563  002188  1E04               	comf	___awmod@divisor+1,f,c
  5564  00218A  B0D8               	btfsc	status,0,c
  5565  00218C  2A04               	incf	___awmod@divisor+1,f,c
  5566  00218E                     i2l1319:
  5567  00218E  5003               	movf	___awmod@divisor,w,c
  5568  002190  1004               	iorwf	___awmod@divisor+1,w,c
  5569  002192  B4D8               	btfsc	status,2,c
  5570  002194  D018               	goto	i2l1326
  5571  002196  0E01               	movlw	1
  5572  002198  6E05               	movwf	___awmod@counter,c
  5573  00219A  D004               	goto	i2l1321
  5574  00219C  90D8               	bcf	status,0,c
  5575  00219E  3603               	rlcf	___awmod@divisor,f,c
  5576  0021A0  3604               	rlcf	___awmod@divisor+1,f,c
  5577  0021A2  2A05               	incf	___awmod@counter,f,c
  5578  0021A4                     i2l1321:
  5579  0021A4  AE04               	btfss	___awmod@divisor+1,7,c
  5580  0021A6  D7FA               	goto	i2l1322
  5581  0021A8                     i2u392_40:
  5582  0021A8  5003               	movf	___awmod@divisor,w,c
  5583  0021AA  5C01               	subwf	___awmod@dividend,w,c
  5584  0021AC  5004               	movf	___awmod@divisor+1,w,c
  5585  0021AE  5802               	subwfb	___awmod@dividend+1,w,c
  5586  0021B0  A0D8               	btfss	status,0,c
  5587  0021B2  D004               	goto	i2l1325
  5588  0021B4  5003               	movf	___awmod@divisor,w,c
  5589  0021B6  5E01               	subwf	___awmod@dividend,f,c
  5590  0021B8  5004               	movf	___awmod@divisor+1,w,c
  5591  0021BA  5A02               	subwfb	___awmod@dividend+1,f,c
  5592  0021BC                     i2l1325:
  5593  0021BC  90D8               	bcf	status,0,c
  5594  0021BE  3204               	rrcf	___awmod@divisor+1,f,c
  5595  0021C0  3203               	rrcf	___awmod@divisor,f,c
  5596  0021C2  2E05               	decfsz	___awmod@counter,f,c
  5597  0021C4  D7F1               	goto	i2u392_40
  5598  0021C6                     i2l1326:
  5599  0021C6  5006               	movf	___awmod@sign,w,c
  5600  0021C8  B4D8               	btfsc	status,2,c
  5601  0021CA  D004               	goto	i2l1327
  5602  0021CC  6C01               	negf	___awmod@dividend,c
  5603  0021CE  1E02               	comf	___awmod@dividend+1,f,c
  5604  0021D0  B0D8               	btfsc	status,0,c
  5605  0021D2  2A02               	incf	___awmod@dividend+1,f,c
  5606  0021D4                     i2l1327:
  5607  0021D4  C001  F001         	movff	___awmod@dividend,?___awmod
  5608  0021D8  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5609  0021DC  0012               	return	
  5610  0021DE                     __end_of___awmod:
  5611                           	opt stack 0
  5612                           pclatu	equ	0xFFB
  5613                           pclath	equ	0xFFA
  5614                           tblptru	equ	0xFF8
  5615                           tblptrh	equ	0xFF7
  5616                           tblptrl	equ	0xFF6
  5617                           tablat	equ	0xFF5
  5618                           prodh	equ	0xFF4
  5619                           prodl	equ	0xFF3
  5620                           intcon	equ	0xFF2
  5621                           indf0	equ	0xFEF
  5622                           postinc0	equ	0xFEE
  5623                           fsr0h	equ	0xFEA
  5624                           fsr0l	equ	0xFE9
  5625                           wreg	equ	0xFE8
  5626                           postdec1	equ	0xFE5
  5627                           fsr1h	equ	0xFE2
  5628                           fsr1l	equ	0xFE1
  5629                           indf2	equ	0xFDF
  5630                           postinc2	equ	0xFDE
  5631                           postdec2	equ	0xFDD
  5632                           fsr2h	equ	0xFDA
  5633                           fsr2l	equ	0xFD9
  5634                           status	equ	0xFD8
  5635                           
  5636 ;; *************** function ___awdiv *****************
  5637 ;; Defined at:
  5638 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awdiv.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;  dividend        2    6[COMRAM] int 
  5641 ;;  divisor         2    8[COMRAM] int 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  quotient        2   12[COMRAM] int 
  5644 ;;  sign            1   11[COMRAM] unsigned char 
  5645 ;;  counter         1   10[COMRAM] unsigned char 
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  2    6[COMRAM] int 
  5648 ;; Registers used:
  5649 ;;		wreg, status,2, status,0
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5655 ;;      Params:         4       0       0       0       0       0       0
  5656 ;;      Locals:         4       0       0       0       0       0       0
  5657 ;;      Temps:          0       0       0       0       0       0       0
  5658 ;;      Totals:         8       0       0       0       0       0       0
  5659 ;;Total ram usage:        8 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; This function calls:
  5662 ;;		Nothing
  5663 ;; This function is called by:
  5664 ;;		_fround
  5665 ;;		_scale
  5666 ;;		_sprintf
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text27
  5671  002068                     __ptext27:
  5672                           	opt stack 0
  5673  002068                     ___awdiv:
  5674                           	opt stack 23
  5675                           
  5676                           ;incstack = 0
  5677  002068  0E00               	movlw	0
  5678  00206A  6E0C               	movwf	___awdiv@sign,c
  5679  00206C  AE0A               	btfss	___awdiv@divisor+1,7,c
  5680  00206E  D006               	goto	i2l1305
  5681  002070  6C09               	negf	___awdiv@divisor,c
  5682  002072  1E0A               	comf	___awdiv@divisor+1,f,c
  5683  002074  B0D8               	btfsc	status,0,c
  5684  002076  2A0A               	incf	___awdiv@divisor+1,f,c
  5685  002078  0E01               	movlw	1
  5686  00207A  6E0C               	movwf	___awdiv@sign,c
  5687  00207C                     i2l1305:
  5688  00207C  AE08               	btfss	___awdiv@dividend+1,7,c
  5689  00207E  D006               	goto	i2l1306
  5690  002080  6C07               	negf	___awdiv@dividend,c
  5691  002082  1E08               	comf	___awdiv@dividend+1,f,c
  5692  002084  B0D8               	btfsc	status,0,c
  5693  002086  2A08               	incf	___awdiv@dividend+1,f,c
  5694  002088  0E01               	movlw	1
  5695  00208A  1A0C               	xorwf	___awdiv@sign,f,c
  5696  00208C                     i2l1306:
  5697  00208C  0E00               	movlw	0
  5698  00208E  6E0E               	movwf	___awdiv@quotient+1,c
  5699  002090  0E00               	movlw	0
  5700  002092  6E0D               	movwf	___awdiv@quotient,c
  5701  002094  5009               	movf	___awdiv@divisor,w,c
  5702  002096  100A               	iorwf	___awdiv@divisor+1,w,c
  5703  002098  B4D8               	btfsc	status,2,c
  5704  00209A  D01C               	goto	i2l1313
  5705  00209C  0E01               	movlw	1
  5706  00209E  6E0B               	movwf	___awdiv@counter,c
  5707  0020A0  D004               	goto	i2l1308
  5708  0020A2  90D8               	bcf	status,0,c
  5709  0020A4  3609               	rlcf	___awdiv@divisor,f,c
  5710  0020A6  360A               	rlcf	___awdiv@divisor+1,f,c
  5711  0020A8  2A0B               	incf	___awdiv@counter,f,c
  5712  0020AA                     i2l1308:
  5713  0020AA  AE0A               	btfss	___awdiv@divisor+1,7,c
  5714  0020AC  D7FA               	goto	i2l1309
  5715  0020AE                     i2u386_40:
  5716  0020AE  90D8               	bcf	status,0,c
  5717  0020B0  360D               	rlcf	___awdiv@quotient,f,c
  5718  0020B2  360E               	rlcf	___awdiv@quotient+1,f,c
  5719  0020B4  5009               	movf	___awdiv@divisor,w,c
  5720  0020B6  5C07               	subwf	___awdiv@dividend,w,c
  5721  0020B8  500A               	movf	___awdiv@divisor+1,w,c
  5722  0020BA  5808               	subwfb	___awdiv@dividend+1,w,c
  5723  0020BC  A0D8               	btfss	status,0,c
  5724  0020BE  D005               	goto	i2l1312
  5725  0020C0  5009               	movf	___awdiv@divisor,w,c
  5726  0020C2  5E07               	subwf	___awdiv@dividend,f,c
  5727  0020C4  500A               	movf	___awdiv@divisor+1,w,c
  5728  0020C6  5A08               	subwfb	___awdiv@dividend+1,f,c
  5729  0020C8  800D               	bsf	___awdiv@quotient,0,c
  5730  0020CA                     i2l1312:
  5731  0020CA  90D8               	bcf	status,0,c
  5732  0020CC  320A               	rrcf	___awdiv@divisor+1,f,c
  5733  0020CE  3209               	rrcf	___awdiv@divisor,f,c
  5734  0020D0  2E0B               	decfsz	___awdiv@counter,f,c
  5735  0020D2  D7ED               	goto	i2u386_40
  5736  0020D4                     i2l1313:
  5737  0020D4  500C               	movf	___awdiv@sign,w,c
  5738  0020D6  B4D8               	btfsc	status,2,c
  5739  0020D8  D004               	goto	i2l1314
  5740  0020DA  6C0D               	negf	___awdiv@quotient,c
  5741  0020DC  1E0E               	comf	___awdiv@quotient+1,f,c
  5742  0020DE  B0D8               	btfsc	status,0,c
  5743  0020E0  2A0E               	incf	___awdiv@quotient+1,f,c
  5744  0020E2                     i2l1314:
  5745  0020E2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  5746  0020E6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  5747  0020EA  0012               	return	
  5748  0020EC                     __end_of___awdiv:
  5749                           	opt stack 0
  5750                           pclatu	equ	0xFFB
  5751                           pclath	equ	0xFFA
  5752                           tblptru	equ	0xFF8
  5753                           tblptrh	equ	0xFF7
  5754                           tblptrl	equ	0xFF6
  5755                           tablat	equ	0xFF5
  5756                           prodh	equ	0xFF4
  5757                           prodl	equ	0xFF3
  5758                           intcon	equ	0xFF2
  5759                           indf0	equ	0xFEF
  5760                           postinc0	equ	0xFEE
  5761                           fsr0h	equ	0xFEA
  5762                           fsr0l	equ	0xFE9
  5763                           wreg	equ	0xFE8
  5764                           postdec1	equ	0xFE5
  5765                           fsr1h	equ	0xFE2
  5766                           fsr1l	equ	0xFE1
  5767                           indf2	equ	0xFDF
  5768                           postinc2	equ	0xFDE
  5769                           postdec2	equ	0xFDD
  5770                           fsr2h	equ	0xFDA
  5771                           fsr2l	equ	0xFD9
  5772                           status	equ	0xFD8
  5773                           
  5774 ;; *************** function __tdiv_to_l_ *****************
  5775 ;; Defined at:
  5776 ;;		line 60 in file "/opt/microchip/xc8/v1.44/sources/common/ftdivl.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  f1              3    0[COMRAM] float 
  5779 ;;  f2              3    3[COMRAM] float 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  quot            4    9[COMRAM] unsigned long 
  5782 ;;  exp1            1   14[COMRAM] unsigned char 
  5783 ;;  cntr            1   13[COMRAM] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  4    0[COMRAM] unsigned long 
  5786 ;; Registers used:
  5787 ;;		wreg, status,2, status,0
  5788 ;; Tracked objects:
  5789 ;;		On entry : 0/0
  5790 ;;		On exit  : 0/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5793 ;;      Params:         6       0       0       0       0       0       0
  5794 ;;      Locals:         6       0       0       0       0       0       0
  5795 ;;      Temps:          3       0       0       0       0       0       0
  5796 ;;      Totals:        15       0       0       0       0       0       0
  5797 ;;Total ram usage:       15 bytes
  5798 ;; Hardware stack levels used:    1
  5799 ;; This function calls:
  5800 ;;		Nothing
  5801 ;; This function is called by:
  5802 ;;		_sprintf
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805                           
  5806                           	psect	text28
  5807  001790                     __ptext28:
  5808                           	opt stack 0
  5809  001790                     __tdiv_to_l_:
  5810                           	opt stack 24
  5811                           
  5812                           ;incstack = 0
  5813  001790  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5814  001794  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5815  001796  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5816  001798  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  5817  00179A  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5818  00179C  E301               	bnc	u429_41
  5819  00179E  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5820  0017A0                     u429_41:
  5821  0017A0  5007               	movf	??__tdiv_to_l_,w,c
  5822  0017A2  6E0F               	movwf	__tdiv_to_l_@exp1,c
  5823  0017A4  500F               	movf	__tdiv_to_l_@exp1,w,c
  5824  0017A6  A4D8               	btfss	status,2,c
  5825  0017A8  D009               	goto	i2l1448
  5826  0017AA  0E00               	movlw	0
  5827  0017AC  6E01               	movwf	?__tdiv_to_l_,c
  5828  0017AE  0E00               	movlw	0
  5829  0017B0  6E02               	movwf	?__tdiv_to_l_+1,c
  5830  0017B2  0E00               	movlw	0
  5831  0017B4  6E03               	movwf	?__tdiv_to_l_+2,c
  5832  0017B6  0E00               	movlw	0
  5833  0017B8  6E04               	movwf	?__tdiv_to_l_+3,c
  5834  0017BA  0012               	return	
  5835  0017BC                     i2l1448:
  5836  0017BC  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5837  0017C0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5838  0017C2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5839  0017C4  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  5840  0017C6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5841  0017C8  E301               	bnc	u431_41
  5842  0017CA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5843  0017CC                     u431_41:
  5844  0017CC  5007               	movf	??__tdiv_to_l_,w,c
  5845  0017CE  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5846  0017D0  500E               	movf	__tdiv_to_l_@cntr,w,c
  5847  0017D2  A4D8               	btfss	status,2,c
  5848  0017D4  D009               	goto	i2l1450
  5849  0017D6  0E00               	movlw	0
  5850  0017D8  6E01               	movwf	?__tdiv_to_l_,c
  5851  0017DA  0E00               	movlw	0
  5852  0017DC  6E02               	movwf	?__tdiv_to_l_+1,c
  5853  0017DE  0E00               	movlw	0
  5854  0017E0  6E03               	movwf	?__tdiv_to_l_+2,c
  5855  0017E2  0E00               	movlw	0
  5856  0017E4  6E04               	movwf	?__tdiv_to_l_+3,c
  5857  0017E6  0012               	return	
  5858  0017E8                     i2l1450:
  5859  0017E8  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  5860  0017EA  0EFF               	movlw	255
  5861  0017EC  1601               	andwf	__tdiv_to_l_@f1,f,c
  5862  0017EE  0EFF               	movlw	255
  5863  0017F0  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  5864  0017F2  0E00               	movlw	0
  5865  0017F4  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  5866  0017F6  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  5867  0017F8  0EFF               	movlw	255
  5868  0017FA  1604               	andwf	__tdiv_to_l_@f2,f,c
  5869  0017FC  0EFF               	movlw	255
  5870  0017FE  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  5871  001800  0E00               	movlw	0
  5872  001802  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  5873  001804  0E00               	movlw	0
  5874  001806  6E0A               	movwf	__tdiv_to_l_@quot,c
  5875  001808  0E00               	movlw	0
  5876  00180A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  5877  00180C  0E00               	movlw	0
  5878  00180E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  5879  001810  0E00               	movlw	0
  5880  001812  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  5881  001814  0E7F               	movlw	127
  5882  001816  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5883  001818  500E               	movf	__tdiv_to_l_@cntr,w,c
  5884  00181A  0F98               	addlw	152
  5885  00181C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  5886  00181E  0E18               	movlw	24
  5887  001820  6E0E               	movwf	__tdiv_to_l_@cntr,c
  5888  001822                     i2l1451:
  5889  001822  90D8               	bcf	status,0,c
  5890  001824  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5891  001826  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5892  001828  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5893  00182A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5894  00182C  5004               	movf	__tdiv_to_l_@f2,w,c
  5895  00182E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  5896  001830  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5897  001832  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  5898  001834  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5899  001836  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  5900  001838  A0D8               	btfss	status,0,c
  5901  00183A  D007               	goto	i2l1452
  5902  00183C  5004               	movf	__tdiv_to_l_@f2,w,c
  5903  00183E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  5904  001840  5005               	movf	__tdiv_to_l_@f2+1,w,c
  5905  001842  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  5906  001844  5006               	movf	__tdiv_to_l_@f2+2,w,c
  5907  001846  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  5908  001848  800A               	bsf	__tdiv_to_l_@quot,0,c
  5909  00184A                     i2l1452:
  5910  00184A  90D8               	bcf	status,0,c
  5911  00184C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  5912  00184E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  5913  001850  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5914  001852  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5915  001854  D7E6               	goto	i2l1451
  5916  001856  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5917  001858  D016               	goto	i2l1454
  5918  00185A  500F               	movf	__tdiv_to_l_@exp1,w,c
  5919  00185C  0A80               	xorlw	128
  5920  00185E  0F97               	addlw	151
  5921  001860  B0D8               	btfsc	status,0,c
  5922  001862  D009               	goto	i2l1455
  5923  001864  0E00               	movlw	0
  5924  001866  6E01               	movwf	?__tdiv_to_l_,c
  5925  001868  0E00               	movlw	0
  5926  00186A  6E02               	movwf	?__tdiv_to_l_+1,c
  5927  00186C  0E00               	movlw	0
  5928  00186E  6E03               	movwf	?__tdiv_to_l_+2,c
  5929  001870  0E00               	movlw	0
  5930  001872  6E04               	movwf	?__tdiv_to_l_+3,c
  5931  001874  0012               	return	
  5932  001876                     i2l1455:
  5933  001876  90D8               	bcf	status,0,c
  5934  001878  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5935  00187A  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5936  00187C  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5937  00187E  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5938  001880  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5939  001882  D7F9               	goto	i2l1455
  5940  001884  D015               	goto	i2u437_40
  5941  001886                     i2l1454:
  5942  001886  0E17               	movlw	23
  5943  001888  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5944  00188A  D00F               	goto	i2l1460
  5945  00188C  0E00               	movlw	0
  5946  00188E  6E01               	movwf	?__tdiv_to_l_,c
  5947  001890  0E00               	movlw	0
  5948  001892  6E02               	movwf	?__tdiv_to_l_+1,c
  5949  001894  0E00               	movlw	0
  5950  001896  6E03               	movwf	?__tdiv_to_l_+2,c
  5951  001898  0E00               	movlw	0
  5952  00189A  6E04               	movwf	?__tdiv_to_l_+3,c
  5953  00189C  0012               	return	
  5954  00189E  90D8               	bcf	status,0,c
  5955  0018A0  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5956  0018A2  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5957  0018A4  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5958  0018A6  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5959  0018A8  060F               	decf	__tdiv_to_l_@exp1,f,c
  5960  0018AA                     i2l1460:
  5961  0018AA  500F               	movf	__tdiv_to_l_@exp1,w,c
  5962  0018AC  A4D8               	btfss	status,2,c
  5963  0018AE  D7F7               	goto	i2l1461
  5964  0018B0                     i2u437_40:
  5965  0018B0  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5966  0018B4  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5967  0018B8  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5968  0018BC  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5969  0018C0  0012               	return		;funcret
  5970  0018C2                     __end_of__tdiv_to_l_:
  5971                           	opt stack 0
  5972                           pclatu	equ	0xFFB
  5973                           pclath	equ	0xFFA
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           intcon	equ	0xFF2
  5981                           indf0	equ	0xFEF
  5982                           postinc0	equ	0xFEE
  5983                           fsr0h	equ	0xFEA
  5984                           fsr0l	equ	0xFE9
  5985                           wreg	equ	0xFE8
  5986                           postdec1	equ	0xFE5
  5987                           fsr1h	equ	0xFE2
  5988                           fsr1l	equ	0xFE1
  5989                           indf2	equ	0xFDF
  5990                           postinc2	equ	0xFDE
  5991                           postdec2	equ	0xFDD
  5992                           fsr2h	equ	0xFDA
  5993                           fsr2l	equ	0xFD9
  5994                           status	equ	0xFD8
  5995                           
  5996 ;; *************** function __div_to_l_ *****************
  5997 ;; Defined at:
  5998 ;;		line 60 in file "/opt/microchip/xc8/v1.44/sources/common/fldivl.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  f1              3    0[COMRAM] unsigned long 
  6001 ;;  f2              3    3[COMRAM] unsigned long 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;  quot            4    6[COMRAM] unsigned long 
  6004 ;;  exp1            1   11[COMRAM] unsigned char 
  6005 ;;  cntr            1   10[COMRAM] unsigned char 
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  4    0[COMRAM] unsigned long 
  6008 ;; Registers used:
  6009 ;;		wreg, status,2, status,0
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6015 ;;      Params:         6       0       0       0       0       0       0
  6016 ;;      Locals:         6       0       0       0       0       0       0
  6017 ;;      Temps:          0       0       0       0       0       0       0
  6018 ;;      Totals:        12       0       0       0       0       0       0
  6019 ;;Total ram usage:       12 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; This function calls:
  6022 ;;		Nothing
  6023 ;; This function is called by:
  6024 ;;		_sprintf
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           	psect	text29
  6029  0018C2                     __ptext29:
  6030                           	opt stack 0
  6031  0018C2                     __div_to_l_:
  6032                           	opt stack 24
  6033                           
  6034                           ;incstack = 0
  6035  0018C2  3403               	rlcf	__div_to_l_@f1+2,w,c
  6036  0018C4  3404               	rlcf	__div_to_l_@f1+3,w,c
  6037  0018C6  6E0C               	movwf	__div_to_l_@exp1,c
  6038  0018C8  500C               	movf	__div_to_l_@exp1,w,c
  6039  0018CA  A4D8               	btfss	status,2,c
  6040  0018CC  D009               	goto	i2l1344
  6041  0018CE  0E00               	movlw	0
  6042  0018D0  6E01               	movwf	?__div_to_l_,c
  6043  0018D2  0E00               	movlw	0
  6044  0018D4  6E02               	movwf	?__div_to_l_+1,c
  6045  0018D6  0E00               	movlw	0
  6046  0018D8  6E03               	movwf	?__div_to_l_+2,c
  6047  0018DA  0E00               	movlw	0
  6048  0018DC  6E04               	movwf	?__div_to_l_+3,c
  6049  0018DE  0012               	return	
  6050  0018E0                     i2l1344:
  6051  0018E0  3406               	rlcf	__div_to_l_@f2+2,w,c
  6052  0018E2  3407               	rlcf	__div_to_l_@f2+3,w,c
  6053  0018E4  6E0B               	movwf	__div_to_l_@cntr,c
  6054  0018E6  500B               	movf	__div_to_l_@cntr,w,c
  6055  0018E8  A4D8               	btfss	status,2,c
  6056  0018EA  D009               	goto	i2l1346
  6057  0018EC  0E00               	movlw	0
  6058  0018EE  6E01               	movwf	?__div_to_l_,c
  6059  0018F0  0E00               	movlw	0
  6060  0018F2  6E02               	movwf	?__div_to_l_+1,c
  6061  0018F4  0E00               	movlw	0
  6062  0018F6  6E03               	movwf	?__div_to_l_+2,c
  6063  0018F8  0E00               	movlw	0
  6064  0018FA  6E04               	movwf	?__div_to_l_+3,c
  6065  0018FC  0012               	return	
  6066  0018FE                     i2l1346:
  6067  0018FE  8E03               	bsf	__div_to_l_@f1+2,7,c
  6068  001900  0EFF               	movlw	255
  6069  001902  1601               	andwf	__div_to_l_@f1,f,c
  6070  001904  0EFF               	movlw	255
  6071  001906  1602               	andwf	__div_to_l_@f1+1,f,c
  6072  001908  0EFF               	movlw	255
  6073  00190A  1603               	andwf	__div_to_l_@f1+2,f,c
  6074  00190C  0E00               	movlw	0
  6075  00190E  1604               	andwf	__div_to_l_@f1+3,f,c
  6076  001910  8E06               	bsf	__div_to_l_@f2+2,7,c
  6077  001912  0EFF               	movlw	255
  6078  001914  1604               	andwf	__div_to_l_@f2,f,c
  6079  001916  0EFF               	movlw	255
  6080  001918  1605               	andwf	__div_to_l_@f2+1,f,c
  6081  00191A  0EFF               	movlw	255
  6082  00191C  1606               	andwf	__div_to_l_@f2+2,f,c
  6083  00191E  0E00               	movlw	0
  6084  001920  1607               	andwf	__div_to_l_@f2+3,f,c
  6085  001922  0E00               	movlw	0
  6086  001924  6E07               	movwf	__div_to_l_@quot,c
  6087  001926  0E00               	movlw	0
  6088  001928  6E08               	movwf	__div_to_l_@quot+1,c
  6089  00192A  0E00               	movlw	0
  6090  00192C  6E09               	movwf	__div_to_l_@quot+2,c
  6091  00192E  0E00               	movlw	0
  6092  001930  6E0A               	movwf	__div_to_l_@quot+3,c
  6093  001932  0E7F               	movlw	127
  6094  001934  5E0C               	subwf	__div_to_l_@exp1,f,c
  6095  001936  500B               	movf	__div_to_l_@cntr,w,c
  6096  001938  0FA0               	addlw	160
  6097  00193A  5E0C               	subwf	__div_to_l_@exp1,f,c
  6098  00193C  0E20               	movlw	32
  6099  00193E  6E0B               	movwf	__div_to_l_@cntr,c
  6100  001940  90D8               	bcf	status,0,c
  6101  001942  3607               	rlcf	__div_to_l_@quot,f,c
  6102  001944  3608               	rlcf	__div_to_l_@quot+1,f,c
  6103  001946  3609               	rlcf	__div_to_l_@quot+2,f,c
  6104  001948  360A               	rlcf	__div_to_l_@quot+3,f,c
  6105  00194A  5004               	movf	__div_to_l_@f2,w,c
  6106  00194C  5C01               	subwf	__div_to_l_@f1,w,c
  6107  00194E  5005               	movf	__div_to_l_@f2+1,w,c
  6108  001950  5802               	subwfb	__div_to_l_@f1+1,w,c
  6109  001952  5006               	movf	__div_to_l_@f2+2,w,c
  6110  001954  5803               	subwfb	__div_to_l_@f1+2,w,c
  6111  001956  5007               	movf	__div_to_l_@f2+3,w,c
  6112  001958  5804               	subwfb	__div_to_l_@f1+3,w,c
  6113  00195A  A0D8               	btfss	status,0,c
  6114  00195C  D009               	goto	i2l1348
  6115  00195E  5004               	movf	__div_to_l_@f2,w,c
  6116  001960  5E01               	subwf	__div_to_l_@f1,f,c
  6117  001962  5005               	movf	__div_to_l_@f2+1,w,c
  6118  001964  5A02               	subwfb	__div_to_l_@f1+1,f,c
  6119  001966  5006               	movf	__div_to_l_@f2+2,w,c
  6120  001968  5A03               	subwfb	__div_to_l_@f1+2,f,c
  6121  00196A  5007               	movf	__div_to_l_@f2+3,w,c
  6122  00196C  5A04               	subwfb	__div_to_l_@f1+3,f,c
  6123  00196E  8007               	bsf	__div_to_l_@quot,0,c
  6124  001970                     i2l1348:
  6125  001970  90D8               	bcf	status,0,c
  6126  001972  3601               	rlcf	__div_to_l_@f1,f,c
  6127  001974  3602               	rlcf	__div_to_l_@f1+1,f,c
  6128  001976  3603               	rlcf	__div_to_l_@f1+2,f,c
  6129  001978  3604               	rlcf	__div_to_l_@f1+3,f,c
  6130  00197A  2E0B               	decfsz	__div_to_l_@cntr,f,c
  6131  00197C  D7E1               	goto	i2l1347
  6132  00197E  AE0C               	btfss	__div_to_l_@exp1,7,c
  6133  001980  D016               	goto	i2l1350
  6134  001982  500C               	movf	__div_to_l_@exp1,w,c
  6135  001984  0A80               	xorlw	128
  6136  001986  0F9F               	addlw	159
  6137  001988  B0D8               	btfsc	status,0,c
  6138  00198A  D009               	goto	i2l1351
  6139  00198C  0E00               	movlw	0
  6140  00198E  6E01               	movwf	?__div_to_l_,c
  6141  001990  0E00               	movlw	0
  6142  001992  6E02               	movwf	?__div_to_l_+1,c
  6143  001994  0E00               	movlw	0
  6144  001996  6E03               	movwf	?__div_to_l_+2,c
  6145  001998  0E00               	movlw	0
  6146  00199A  6E04               	movwf	?__div_to_l_+3,c
  6147  00199C  0012               	return	
  6148  00199E                     i2l1351:
  6149  00199E  90D8               	bcf	status,0,c
  6150  0019A0  320A               	rrcf	__div_to_l_@quot+3,f,c
  6151  0019A2  3209               	rrcf	__div_to_l_@quot+2,f,c
  6152  0019A4  3208               	rrcf	__div_to_l_@quot+1,f,c
  6153  0019A6  3207               	rrcf	__div_to_l_@quot,f,c
  6154  0019A8  3E0C               	incfsz	__div_to_l_@exp1,f,c
  6155  0019AA  D7F9               	goto	i2l1351
  6156  0019AC  D015               	goto	i2u444_40
  6157  0019AE                     i2l1350:
  6158  0019AE  0E1F               	movlw	31
  6159  0019B0  640C               	cpfsgt	__div_to_l_@exp1,c
  6160  0019B2  D00F               	goto	i2l1356
  6161  0019B4  0E00               	movlw	0
  6162  0019B6  6E01               	movwf	?__div_to_l_,c
  6163  0019B8  0E00               	movlw	0
  6164  0019BA  6E02               	movwf	?__div_to_l_+1,c
  6165  0019BC  0E00               	movlw	0
  6166  0019BE  6E03               	movwf	?__div_to_l_+2,c
  6167  0019C0  0E00               	movlw	0
  6168  0019C2  6E04               	movwf	?__div_to_l_+3,c
  6169  0019C4  0012               	return	
  6170  0019C6  90D8               	bcf	status,0,c
  6171  0019C8  3607               	rlcf	__div_to_l_@quot,f,c
  6172  0019CA  3608               	rlcf	__div_to_l_@quot+1,f,c
  6173  0019CC  3609               	rlcf	__div_to_l_@quot+2,f,c
  6174  0019CE  360A               	rlcf	__div_to_l_@quot+3,f,c
  6175  0019D0  060C               	decf	__div_to_l_@exp1,f,c
  6176  0019D2                     i2l1356:
  6177  0019D2  500C               	movf	__div_to_l_@exp1,w,c
  6178  0019D4  A4D8               	btfss	status,2,c
  6179  0019D6  D7F7               	goto	i2l1357
  6180  0019D8                     i2u444_40:
  6181  0019D8  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  6182  0019DC  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6183  0019E0  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6184  0019E4  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6185  0019E8  0012               	return		;funcret
  6186  0019EA                     __end_of__div_to_l_:
  6187                           	opt stack 0
  6188                           pclatu	equ	0xFFB
  6189                           pclath	equ	0xFFA
  6190                           tblptru	equ	0xFF8
  6191                           tblptrh	equ	0xFF7
  6192                           tblptrl	equ	0xFF6
  6193                           tablat	equ	0xFF5
  6194                           prodh	equ	0xFF4
  6195                           prodl	equ	0xFF3
  6196                           intcon	equ	0xFF2
  6197                           indf0	equ	0xFEF
  6198                           postinc0	equ	0xFEE
  6199                           fsr0h	equ	0xFEA
  6200                           fsr0l	equ	0xFE9
  6201                           wreg	equ	0xFE8
  6202                           postdec1	equ	0xFE5
  6203                           fsr1h	equ	0xFE2
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function ___lltoft *****************
  6213 ;; Defined at:
  6214 ;;		line 35 in file "/opt/microchip/xc8/v1.44/sources/common/lltoft.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  c               4    8[COMRAM] unsigned long 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  exp             1   16[COMRAM] unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  3    8[COMRAM] float 
  6221 ;; Registers used:
  6222 ;;		wreg, status,2, status,0, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6228 ;;      Params:         4       0       0       0       0       0       0
  6229 ;;      Locals:         1       0       0       0       0       0       0
  6230 ;;      Temps:          4       0       0       0       0       0       0
  6231 ;;      Totals:         9       0       0       0       0       0       0
  6232 ;;Total ram usage:        9 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    1
  6235 ;; This function calls:
  6236 ;;		___ftpack
  6237 ;; This function is called by:
  6238 ;;		_sprintf
  6239 ;; This function uses a non-reentrant model
  6240 ;;
  6241                           
  6242                           	psect	text30
  6243  00230A                     __ptext30:
  6244                           	opt stack 0
  6245  00230A                     ___lltoft:
  6246                           	opt stack 23
  6247                           
  6248                           ;incstack = 0
  6249  00230A  0E8E               	movlw	142
  6250  00230C  6E11               	movwf	___lltoft@exp,c
  6251  00230E  D006               	goto	i2l1555
  6252  002310  90D8               	bcf	status,0,c
  6253  002312  320C               	rrcf	___lltoft@c+3,f,c
  6254  002314  320B               	rrcf	___lltoft@c+2,f,c
  6255  002316  320A               	rrcf	___lltoft@c+1,f,c
  6256  002318  3209               	rrcf	___lltoft@c,f,c
  6257  00231A  2A11               	incf	___lltoft@exp,f,c
  6258  00231C                     i2l1555:
  6259  00231C  0E00               	movlw	0
  6260  00231E  1409               	andwf	___lltoft@c,w,c
  6261  002320  6E0D               	movwf	??___lltoft& (0+255),c
  6262  002322  0E00               	movlw	0
  6263  002324  140A               	andwf	___lltoft@c+1,w,c
  6264  002326  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6265  002328  0E00               	movlw	0
  6266  00232A  140B               	andwf	___lltoft@c+2,w,c
  6267  00232C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6268  00232E  0EFF               	movlw	255
  6269  002330  140C               	andwf	___lltoft@c+3,w,c
  6270  002332  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6271  002334  500D               	movf	??___lltoft,w,c
  6272  002336  100E               	iorwf	??___lltoft+1,w,c
  6273  002338  100F               	iorwf	??___lltoft+2,w,c
  6274  00233A  1010               	iorwf	??___lltoft+3,w,c
  6275  00233C  A4D8               	btfss	status,2,c
  6276  00233E  D7E8               	goto	i2l1556
  6277  002340  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6278  002344  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6279  002348  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6280  00234C  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6281  002350  0E00               	movlw	0
  6282  002352  6E05               	movwf	___ftpack@sign,c
  6283  002354  ECEF  F00E         	call	___ftpack	;wreg free
  6284  002358  C001  F009         	movff	?___ftpack,?___lltoft
  6285  00235C  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6286  002360  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6287  002364  0012               	return	
  6288  002366                     __end_of___lltoft:
  6289                           	opt stack 0
  6290                           pclatu	equ	0xFFB
  6291                           pclath	equ	0xFFA
  6292                           tblptru	equ	0xFF8
  6293                           tblptrh	equ	0xFF7
  6294                           tblptrl	equ	0xFF6
  6295                           tablat	equ	0xFF5
  6296                           prodh	equ	0xFF4
  6297                           prodl	equ	0xFF3
  6298                           intcon	equ	0xFF2
  6299                           indf0	equ	0xFEF
  6300                           postinc0	equ	0xFEE
  6301                           fsr0h	equ	0xFEA
  6302                           fsr0l	equ	0xFE9
  6303                           wreg	equ	0xFE8
  6304                           postdec1	equ	0xFE5
  6305                           fsr1h	equ	0xFE2
  6306                           fsr1l	equ	0xFE1
  6307                           indf2	equ	0xFDF
  6308                           postinc2	equ	0xFDE
  6309                           postdec2	equ	0xFDD
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function ___llmod *****************
  6315 ;; Defined at:
  6316 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/llmod.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;  dividend        4   13[COMRAM] unsigned long 
  6319 ;;  divisor         4   17[COMRAM] unsigned long 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  counter         1   21[COMRAM] unsigned char 
  6322 ;; Return value:  Size  Location     Type
  6323 ;;                  4   13[COMRAM] unsigned long 
  6324 ;; Registers used:
  6325 ;;		wreg, status,2, status,0
  6326 ;; Tracked objects:
  6327 ;;		On entry : 0/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6331 ;;      Params:         8       0       0       0       0       0       0
  6332 ;;      Locals:         1       0       0       0       0       0       0
  6333 ;;      Temps:          0       0       0       0       0       0       0
  6334 ;;      Totals:         9       0       0       0       0       0       0
  6335 ;;Total ram usage:        9 bytes
  6336 ;; Hardware stack levels used:    1
  6337 ;; This function calls:
  6338 ;;		Nothing
  6339 ;; This function is called by:
  6340 ;;		_sprintf
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text31
  6345  0021DE                     __ptext31:
  6346                           	opt stack 0
  6347  0021DE                     ___llmod:
  6348                           	opt stack 24
  6349                           
  6350                           ;incstack = 0
  6351  0021DE  5012               	movf	___llmod@divisor,w,c
  6352  0021E0  1013               	iorwf	___llmod@divisor+1,w,c
  6353  0021E2  1014               	iorwf	___llmod@divisor+2,w,c
  6354  0021E4  1015               	iorwf	___llmod@divisor+3,w,c
  6355  0021E6  B4D8               	btfsc	status,2,c
  6356  0021E8  D024               	goto	i2l1549
  6357  0021EA  0E01               	movlw	1
  6358  0021EC  6E16               	movwf	___llmod@counter,c
  6359  0021EE  D006               	goto	i2l1544
  6360  0021F0  90D8               	bcf	status,0,c
  6361  0021F2  3612               	rlcf	___llmod@divisor,f,c
  6362  0021F4  3613               	rlcf	___llmod@divisor+1,f,c
  6363  0021F6  3614               	rlcf	___llmod@divisor+2,f,c
  6364  0021F8  3615               	rlcf	___llmod@divisor+3,f,c
  6365  0021FA  2A16               	incf	___llmod@counter,f,c
  6366  0021FC                     i2l1544:
  6367  0021FC  AE15               	btfss	___llmod@divisor+3,7,c
  6368  0021FE  D7F8               	goto	i2l1545
  6369  002200                     i2u468_40:
  6370  002200  5012               	movf	___llmod@divisor,w,c
  6371  002202  5C0E               	subwf	___llmod@dividend,w,c
  6372  002204  5013               	movf	___llmod@divisor+1,w,c
  6373  002206  580F               	subwfb	___llmod@dividend+1,w,c
  6374  002208  5014               	movf	___llmod@divisor+2,w,c
  6375  00220A  5810               	subwfb	___llmod@dividend+2,w,c
  6376  00220C  5015               	movf	___llmod@divisor+3,w,c
  6377  00220E  5811               	subwfb	___llmod@dividend+3,w,c
  6378  002210  A0D8               	btfss	status,0,c
  6379  002212  D008               	goto	i2l1548
  6380  002214  5012               	movf	___llmod@divisor,w,c
  6381  002216  5E0E               	subwf	___llmod@dividend,f,c
  6382  002218  5013               	movf	___llmod@divisor+1,w,c
  6383  00221A  5A0F               	subwfb	___llmod@dividend+1,f,c
  6384  00221C  5014               	movf	___llmod@divisor+2,w,c
  6385  00221E  5A10               	subwfb	___llmod@dividend+2,f,c
  6386  002220  5015               	movf	___llmod@divisor+3,w,c
  6387  002222  5A11               	subwfb	___llmod@dividend+3,f,c
  6388  002224                     i2l1548:
  6389  002224  90D8               	bcf	status,0,c
  6390  002226  3215               	rrcf	___llmod@divisor+3,f,c
  6391  002228  3214               	rrcf	___llmod@divisor+2,f,c
  6392  00222A  3213               	rrcf	___llmod@divisor+1,f,c
  6393  00222C  3212               	rrcf	___llmod@divisor,f,c
  6394  00222E  2E16               	decfsz	___llmod@counter,f,c
  6395  002230  D7E7               	goto	i2u468_40
  6396  002232                     i2l1549:
  6397  002232  C00E  F00E         	movff	___llmod@dividend,?___llmod
  6398  002236  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  6399  00223A  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  6400  00223E  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  6401  002242  0012               	return		;funcret
  6402  002244                     __end_of___llmod:
  6403                           	opt stack 0
  6404                           pclatu	equ	0xFFB
  6405                           pclath	equ	0xFFA
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           intcon	equ	0xFF2
  6413                           indf0	equ	0xFEF
  6414                           postinc0	equ	0xFEE
  6415                           fsr0h	equ	0xFEA
  6416                           fsr0l	equ	0xFE9
  6417                           wreg	equ	0xFE8
  6418                           postdec1	equ	0xFE5
  6419                           fsr1h	equ	0xFE2
  6420                           fsr1l	equ	0xFE1
  6421                           indf2	equ	0xFDF
  6422                           postinc2	equ	0xFDE
  6423                           postdec2	equ	0xFDD
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function ___lldiv *****************
  6429 ;; Defined at:
  6430 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/lldiv.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  dividend        4    0[COMRAM] unsigned long 
  6433 ;;  divisor         4    4[COMRAM] unsigned long 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  quotient        4    8[COMRAM] unsigned long 
  6436 ;;  counter         1   12[COMRAM] unsigned char 
  6437 ;; Return value:  Size  Location     Type
  6438 ;;                  4    0[COMRAM] unsigned long 
  6439 ;; Registers used:
  6440 ;;		wreg, status,2, status,0
  6441 ;; Tracked objects:
  6442 ;;		On entry : 0/0
  6443 ;;		On exit  : 0/0
  6444 ;;		Unchanged: 0/0
  6445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6446 ;;      Params:         8       0       0       0       0       0       0
  6447 ;;      Locals:         5       0       0       0       0       0       0
  6448 ;;      Temps:          0       0       0       0       0       0       0
  6449 ;;      Totals:        13       0       0       0       0       0       0
  6450 ;;Total ram usage:       13 bytes
  6451 ;; Hardware stack levels used:    1
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		_sprintf
  6456 ;; This function uses a non-reentrant model
  6457 ;;
  6458                           
  6459                           	psect	text32
  6460  0020EC                     __ptext32:
  6461                           	opt stack 0
  6462  0020EC                     ___lldiv:
  6463                           	opt stack 24
  6464                           
  6465                           ;incstack = 0
  6466  0020EC  0E00               	movlw	0
  6467  0020EE  6E09               	movwf	___lldiv@quotient,c
  6468  0020F0  0E00               	movlw	0
  6469  0020F2  6E0A               	movwf	___lldiv@quotient+1,c
  6470  0020F4  0E00               	movlw	0
  6471  0020F6  6E0B               	movwf	___lldiv@quotient+2,c
  6472  0020F8  0E00               	movlw	0
  6473  0020FA  6E0C               	movwf	___lldiv@quotient+3,c
  6474  0020FC  5005               	movf	___lldiv@divisor,w,c
  6475  0020FE  1006               	iorwf	___lldiv@divisor+1,w,c
  6476  002100  1007               	iorwf	___lldiv@divisor+2,w,c
  6477  002102  1008               	iorwf	___lldiv@divisor+3,w,c
  6478  002104  B4D8               	btfsc	status,2,c
  6479  002106  D02A               	goto	i2l1539
  6480  002108  0E01               	movlw	1
  6481  00210A  6E0D               	movwf	___lldiv@counter,c
  6482  00210C  D006               	goto	i2l1534
  6483  00210E  90D8               	bcf	status,0,c
  6484  002110  3605               	rlcf	___lldiv@divisor,f,c
  6485  002112  3606               	rlcf	___lldiv@divisor+1,f,c
  6486  002114  3607               	rlcf	___lldiv@divisor+2,f,c
  6487  002116  3608               	rlcf	___lldiv@divisor+3,f,c
  6488  002118  2A0D               	incf	___lldiv@counter,f,c
  6489  00211A                     i2l1534:
  6490  00211A  AE08               	btfss	___lldiv@divisor+3,7,c
  6491  00211C  D7F8               	goto	i2l1535
  6492  00211E                     i2u465_40:
  6493  00211E  90D8               	bcf	status,0,c
  6494  002120  3609               	rlcf	___lldiv@quotient,f,c
  6495  002122  360A               	rlcf	___lldiv@quotient+1,f,c
  6496  002124  360B               	rlcf	___lldiv@quotient+2,f,c
  6497  002126  360C               	rlcf	___lldiv@quotient+3,f,c
  6498  002128  5005               	movf	___lldiv@divisor,w,c
  6499  00212A  5C01               	subwf	___lldiv@dividend,w,c
  6500  00212C  5006               	movf	___lldiv@divisor+1,w,c
  6501  00212E  5802               	subwfb	___lldiv@dividend+1,w,c
  6502  002130  5007               	movf	___lldiv@divisor+2,w,c
  6503  002132  5803               	subwfb	___lldiv@dividend+2,w,c
  6504  002134  5008               	movf	___lldiv@divisor+3,w,c
  6505  002136  5804               	subwfb	___lldiv@dividend+3,w,c
  6506  002138  A0D8               	btfss	status,0,c
  6507  00213A  D009               	goto	i2l1538
  6508  00213C  5005               	movf	___lldiv@divisor,w,c
  6509  00213E  5E01               	subwf	___lldiv@dividend,f,c
  6510  002140  5006               	movf	___lldiv@divisor+1,w,c
  6511  002142  5A02               	subwfb	___lldiv@dividend+1,f,c
  6512  002144  5007               	movf	___lldiv@divisor+2,w,c
  6513  002146  5A03               	subwfb	___lldiv@dividend+2,f,c
  6514  002148  5008               	movf	___lldiv@divisor+3,w,c
  6515  00214A  5A04               	subwfb	___lldiv@dividend+3,f,c
  6516  00214C  8009               	bsf	___lldiv@quotient,0,c
  6517  00214E                     i2l1538:
  6518  00214E  90D8               	bcf	status,0,c
  6519  002150  3208               	rrcf	___lldiv@divisor+3,f,c
  6520  002152  3207               	rrcf	___lldiv@divisor+2,f,c
  6521  002154  3206               	rrcf	___lldiv@divisor+1,f,c
  6522  002156  3205               	rrcf	___lldiv@divisor,f,c
  6523  002158  2E0D               	decfsz	___lldiv@counter,f,c
  6524  00215A  D7E1               	goto	i2u465_40
  6525  00215C                     i2l1539:
  6526  00215C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6527  002160  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6528  002164  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6529  002168  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6530  00216C  0012               	return		;funcret
  6531  00216E                     __end_of___lldiv:
  6532                           	opt stack 0
  6533                           pclatu	equ	0xFFB
  6534                           pclath	equ	0xFFA
  6535                           tblptru	equ	0xFF8
  6536                           tblptrh	equ	0xFF7
  6537                           tblptrl	equ	0xFF6
  6538                           tablat	equ	0xFF5
  6539                           prodh	equ	0xFF4
  6540                           prodl	equ	0xFF3
  6541                           intcon	equ	0xFF2
  6542                           indf0	equ	0xFEF
  6543                           postinc0	equ	0xFEE
  6544                           fsr0h	equ	0xFEA
  6545                           fsr0l	equ	0xFE9
  6546                           wreg	equ	0xFE8
  6547                           postdec1	equ	0xFE5
  6548                           fsr1h	equ	0xFE2
  6549                           fsr1l	equ	0xFE1
  6550                           indf2	equ	0xFDF
  6551                           postinc2	equ	0xFDE
  6552                           postdec2	equ	0xFDD
  6553                           fsr2h	equ	0xFDA
  6554                           fsr2l	equ	0xFD9
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function ___fttol *****************
  6558 ;; Defined at:
  6559 ;;		line 44 in file "/opt/microchip/xc8/v1.44/sources/common/fttol.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  f1              3   35[COMRAM] float 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  lval            4   45[COMRAM] unsigned long 
  6564 ;;  exp1            1   49[COMRAM] unsigned char 
  6565 ;;  sign1           1   44[COMRAM] unsigned char 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  4   35[COMRAM] long 
  6568 ;; Registers used:
  6569 ;;		wreg, status,2, status,0
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6575 ;;      Params:         4       0       0       0       0       0       0
  6576 ;;      Locals:         6       0       0       0       0       0       0
  6577 ;;      Temps:          5       0       0       0       0       0       0
  6578 ;;      Totals:        15       0       0       0       0       0       0
  6579 ;;Total ram usage:       15 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; This function calls:
  6582 ;;		Nothing
  6583 ;; This function is called by:
  6584 ;;		_sprintf
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           	psect	text33
  6589  001B10                     __ptext33:
  6590                           	opt stack 0
  6591  001B10                     ___fttol:
  6592                           	opt stack 24
  6593                           
  6594                           ;incstack = 0
  6595  001B10  C026  F028         	movff	___fttol@f1+2,??___fttol
  6596  001B14  6A29               	clrf	(??___fttol+1)& (0+255),c
  6597  001B16  6A2A               	clrf	(??___fttol+2)& (0+255),c
  6598  001B18  3425               	rlcf	___fttol@f1+1,w,c
  6599  001B1A  3628               	rlcf	??___fttol& (0+255),f,c
  6600  001B1C  E301               	bnc	u456_41
  6601  001B1E  8029               	bsf	(??___fttol+1)& (0+255),0,c
  6602  001B20                     u456_41:
  6603  001B20  5028               	movf	??___fttol,w,c
  6604  001B22  6E32               	movwf	___fttol@exp1,c
  6605  001B24  5032               	movf	___fttol@exp1,w,c
  6606  001B26  A4D8               	btfss	status,2,c
  6607  001B28  D009               	goto	i2l1493
  6608  001B2A  0E00               	movlw	0
  6609  001B2C  6E24               	movwf	?___fttol,c
  6610  001B2E  0E00               	movlw	0
  6611  001B30  6E25               	movwf	?___fttol+1,c
  6612  001B32  0E00               	movlw	0
  6613  001B34  6E26               	movwf	?___fttol+2,c
  6614  001B36  0E00               	movlw	0
  6615  001B38  6E27               	movwf	?___fttol+3,c
  6616  001B3A  0012               	return	
  6617  001B3C                     i2l1493:
  6618  001B3C  0E17               	movlw	23
  6619  001B3E  6E28               	movwf	??___fttol& (0+255),c
  6620  001B40  C024  F029         	movff	___fttol@f1,??___fttol+1
  6621  001B44  C025  F02A         	movff	___fttol@f1+1,??___fttol+2
  6622  001B48  C026  F02B         	movff	___fttol@f1+2,??___fttol+3
  6623  001B4C  2828               	incf	??___fttol,w,c
  6624  001B4E  6E2C               	movwf	(??___fttol+4)& (0+255),c
  6625  001B50  D004               	goto	i2u458_40
  6626  001B52                     i2u458_45:
  6627  001B52  90D8               	bcf	status,0,c
  6628  001B54  322B               	rrcf	??___fttol+3,f,c
  6629  001B56  322A               	rrcf	??___fttol+2,f,c
  6630  001B58  3229               	rrcf	??___fttol+1,f,c
  6631  001B5A                     i2u458_40:
  6632  001B5A  2E2C               	decfsz	(??___fttol+4)& (0+255),f,c
  6633  001B5C  D7FA               	goto	i2u458_45
  6634  001B5E  5029               	movf	??___fttol+1,w,c
  6635  001B60  6E2D               	movwf	___fttol@sign1,c
  6636  001B62  8E25               	bsf	___fttol@f1+1,7,c
  6637  001B64  0EFF               	movlw	255
  6638  001B66  1624               	andwf	___fttol@f1,f,c
  6639  001B68  0EFF               	movlw	255
  6640  001B6A  1625               	andwf	___fttol@f1+1,f,c
  6641  001B6C  0E00               	movlw	0
  6642  001B6E  1626               	andwf	___fttol@f1+2,f,c
  6643  001B70  5024               	movf	___fttol@f1,w,c
  6644  001B72  6E2E               	movwf	___fttol@lval,c
  6645  001B74  5025               	movf	___fttol@f1+1,w,c
  6646  001B76  6E2F               	movwf	___fttol@lval+1,c
  6647  001B78  5026               	movf	___fttol@f1+2,w,c
  6648  001B7A  6E30               	movwf	___fttol@lval+2,c
  6649  001B7C  6A31               	clrf	___fttol@lval+3,c
  6650  001B7E  0E8E               	movlw	142
  6651  001B80  5E32               	subwf	___fttol@exp1,f,c
  6652  001B82  AE32               	btfss	___fttol@exp1,7,c
  6653  001B84  D016               	goto	i2l1495
  6654  001B86  5032               	movf	___fttol@exp1,w,c
  6655  001B88  0A80               	xorlw	128
  6656  001B8A  0F8F               	addlw	143
  6657  001B8C  B0D8               	btfsc	status,0,c
  6658  001B8E  D009               	goto	i2l1496
  6659  001B90  0E00               	movlw	0
  6660  001B92  6E24               	movwf	?___fttol,c
  6661  001B94  0E00               	movlw	0
  6662  001B96  6E25               	movwf	?___fttol+1,c
  6663  001B98  0E00               	movlw	0
  6664  001B9A  6E26               	movwf	?___fttol+2,c
  6665  001B9C  0E00               	movlw	0
  6666  001B9E  6E27               	movwf	?___fttol+3,c
  6667  001BA0  0012               	return	
  6668  001BA2                     i2l1496:
  6669  001BA2  90D8               	bcf	status,0,c
  6670  001BA4  3231               	rrcf	___fttol@lval+3,f,c
  6671  001BA6  3230               	rrcf	___fttol@lval+2,f,c
  6672  001BA8  322F               	rrcf	___fttol@lval+1,f,c
  6673  001BAA  322E               	rrcf	___fttol@lval,f,c
  6674  001BAC  3E32               	incfsz	___fttol@exp1,f,c
  6675  001BAE  D7F9               	goto	i2l1496
  6676  001BB0  D015               	goto	i2u462_40
  6677  001BB2                     i2l1495:
  6678  001BB2  0E17               	movlw	23
  6679  001BB4  6432               	cpfsgt	___fttol@exp1,c
  6680  001BB6  D00F               	goto	i2l1501
  6681  001BB8  0E00               	movlw	0
  6682  001BBA  6E24               	movwf	?___fttol,c
  6683  001BBC  0E00               	movlw	0
  6684  001BBE  6E25               	movwf	?___fttol+1,c
  6685  001BC0  0E00               	movlw	0
  6686  001BC2  6E26               	movwf	?___fttol+2,c
  6687  001BC4  0E00               	movlw	0
  6688  001BC6  6E27               	movwf	?___fttol+3,c
  6689  001BC8  0012               	return	
  6690  001BCA  90D8               	bcf	status,0,c
  6691  001BCC  362E               	rlcf	___fttol@lval,f,c
  6692  001BCE  362F               	rlcf	___fttol@lval+1,f,c
  6693  001BD0  3630               	rlcf	___fttol@lval+2,f,c
  6694  001BD2  3631               	rlcf	___fttol@lval+3,f,c
  6695  001BD4  0632               	decf	___fttol@exp1,f,c
  6696  001BD6                     i2l1501:
  6697  001BD6  5032               	movf	___fttol@exp1,w,c
  6698  001BD8  A4D8               	btfss	status,2,c
  6699  001BDA  D7F7               	goto	i2l1502
  6700  001BDC                     i2u462_40:
  6701  001BDC  502D               	movf	___fttol@sign1,w,c
  6702  001BDE  B4D8               	btfsc	status,2,c
  6703  001BE0  D008               	goto	i2l1504
  6704  001BE2  1E31               	comf	___fttol@lval+3,f,c
  6705  001BE4  1E30               	comf	___fttol@lval+2,f,c
  6706  001BE6  1E2F               	comf	___fttol@lval+1,f,c
  6707  001BE8  6C2E               	negf	___fttol@lval,c
  6708  001BEA  0E00               	movlw	0
  6709  001BEC  222F               	addwfc	___fttol@lval+1,f,c
  6710  001BEE  2230               	addwfc	___fttol@lval+2,f,c
  6711  001BF0  2231               	addwfc	___fttol@lval+3,f,c
  6712  001BF2                     i2l1504:
  6713  001BF2  C02E  F024         	movff	___fttol@lval,?___fttol
  6714  001BF6  C02F  F025         	movff	___fttol@lval+1,?___fttol+1
  6715  001BFA  C030  F026         	movff	___fttol@lval+2,?___fttol+2
  6716  001BFE  C031  F027         	movff	___fttol@lval+3,?___fttol+3
  6717  001C02  0012               	return	
  6718  001C04                     __end_of___fttol:
  6719                           	opt stack 0
  6720                           pclatu	equ	0xFFB
  6721                           pclath	equ	0xFFA
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           indf0	equ	0xFEF
  6730                           postinc0	equ	0xFEE
  6731                           fsr0h	equ	0xFEA
  6732                           fsr0l	equ	0xFE9
  6733                           wreg	equ	0xFE8
  6734                           postdec1	equ	0xFE5
  6735                           fsr1h	equ	0xFE2
  6736                           fsr1l	equ	0xFE1
  6737                           indf2	equ	0xFDF
  6738                           postinc2	equ	0xFDE
  6739                           postdec2	equ	0xFDD
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function ___ftsub *****************
  6745 ;; Defined at:
  6746 ;;		line 20 in file "/opt/microchip/xc8/v1.44/sources/common/ftsub.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  f1              3   57[COMRAM] float 
  6749 ;;  f2              3   60[COMRAM] float 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;		None
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  3   57[COMRAM] float 
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0, cstack
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6761 ;;      Params:         6       0       0       0       0       0       0
  6762 ;;      Locals:         0       0       0       0       0       0       0
  6763 ;;      Temps:          0       0       0       0       0       0       0
  6764 ;;      Totals:         6       0       0       0       0       0       0
  6765 ;;Total ram usage:        6 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    2
  6768 ;; This function calls:
  6769 ;;		___ftadd
  6770 ;; This function is called by:
  6771 ;;		_sprintf
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text34
  6776  0024B0                     __ptext34:
  6777                           	opt stack 0
  6778  0024B0                     ___ftsub:
  6779                           	opt stack 22
  6780                           
  6781                           ;incstack = 0
  6782  0024B0  503D               	movf	___ftsub@f2,w,c
  6783  0024B2  103E               	iorwf	___ftsub@f2+1,w,c
  6784  0024B4  103F               	iorwf	___ftsub@f2+2,w,c
  6785  0024B6  B4D8               	btfsc	status,2,c
  6786  0024B8  D006               	goto	i2l1489
  6787  0024BA  0E00               	movlw	0
  6788  0024BC  1A3D               	xorwf	___ftsub@f2,f,c
  6789  0024BE  0E00               	movlw	0
  6790  0024C0  1A3E               	xorwf	___ftsub@f2+1,f,c
  6791  0024C2  0E80               	movlw	128
  6792  0024C4  1A3F               	xorwf	___ftsub@f2+2,f,c
  6793  0024C6                     i2l1489:
  6794  0024C6  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  6795  0024CA  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  6796  0024CE  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  6797  0024D2  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  6798  0024D6  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  6799  0024DA  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  6800  0024DE  ECF2  F00A         	call	___ftadd	;wreg free
  6801  0024E2  C02E  F03A         	movff	?___ftadd,?___ftsub
  6802  0024E6  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  6803  0024EA  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  6804  0024EE  0012               	return	
  6805  0024F0                     __end_of___ftsub:
  6806                           	opt stack 0
  6807                           pclatu	equ	0xFFB
  6808                           pclath	equ	0xFFA
  6809                           tblptru	equ	0xFF8
  6810                           tblptrh	equ	0xFF7
  6811                           tblptrl	equ	0xFF6
  6812                           tablat	equ	0xFF5
  6813                           prodh	equ	0xFF4
  6814                           prodl	equ	0xFF3
  6815                           intcon	equ	0xFF2
  6816                           indf0	equ	0xFEF
  6817                           postinc0	equ	0xFEE
  6818                           fsr0h	equ	0xFEA
  6819                           fsr0l	equ	0xFE9
  6820                           wreg	equ	0xFE8
  6821                           postdec1	equ	0xFE5
  6822                           fsr1h	equ	0xFE2
  6823                           fsr1l	equ	0xFE1
  6824                           indf2	equ	0xFDF
  6825                           postinc2	equ	0xFDE
  6826                           postdec2	equ	0xFDD
  6827                           fsr2h	equ	0xFDA
  6828                           fsr2l	equ	0xFD9
  6829                           status	equ	0xFD8
  6830                           
  6831 ;; *************** function ___ftadd *****************
  6832 ;; Defined at:
  6833 ;;		line 86 in file "/opt/microchip/xc8/v1.44/sources/common/ftadd.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;  f1              3   45[COMRAM] float 
  6836 ;;  f2              3   48[COMRAM] float 
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;  exp1            1   56[COMRAM] unsigned char 
  6839 ;;  exp2            1   55[COMRAM] unsigned char 
  6840 ;;  sign            1   54[COMRAM] unsigned char 
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  3   45[COMRAM] float 
  6843 ;; Registers used:
  6844 ;;		wreg, status,2, status,0, cstack
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6850 ;;      Params:         6       0       0       0       0       0       0
  6851 ;;      Locals:         3       0       0       0       0       0       0
  6852 ;;      Temps:          3       0       0       0       0       0       0
  6853 ;;      Totals:        12       0       0       0       0       0       0
  6854 ;;Total ram usage:       12 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    1
  6857 ;; This function calls:
  6858 ;;		___ftpack
  6859 ;; This function is called by:
  6860 ;;		_sprintf
  6861 ;;		___ftsub
  6862 ;; This function uses a non-reentrant model
  6863 ;;
  6864                           
  6865                           	psect	text35
  6866  0015E4                     __ptext35:
  6867                           	opt stack 0
  6868  0015E4                     ___ftadd:
  6869                           	opt stack 22
  6870                           
  6871                           ;incstack = 0
  6872  0015E4  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  6873  0015E8  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6874  0015EA  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6875  0015EC  342F               	rlcf	___ftadd@f1+1,w,c
  6876  0015EE  3634               	rlcf	??___ftadd& (0+255),f,c
  6877  0015F0  E301               	bnc	u356_41
  6878  0015F2  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6879  0015F4                     u356_41:
  6880  0015F4  5034               	movf	??___ftadd,w,c
  6881  0015F6  6E39               	movwf	___ftadd@exp1,c
  6882  0015F8  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  6883  0015FC  6A35               	clrf	(??___ftadd+1)& (0+255),c
  6884  0015FE  6A36               	clrf	(??___ftadd+2)& (0+255),c
  6885  001600  3432               	rlcf	___ftadd@f2+1,w,c
  6886  001602  3634               	rlcf	??___ftadd& (0+255),f,c
  6887  001604  E301               	bnc	u357_41
  6888  001606  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  6889  001608                     u357_41:
  6890  001608  5034               	movf	??___ftadd,w,c
  6891  00160A  6E38               	movwf	___ftadd@exp2,c
  6892  00160C  5039               	movf	___ftadd@exp1,w,c
  6893  00160E  B4D8               	btfsc	status,2,c
  6894  001610  D00B               	goto	i2u360_40
  6895  001612  5038               	movf	___ftadd@exp2,w,c
  6896  001614  5C39               	subwf	___ftadd@exp1,w,c
  6897  001616  B0D8               	btfsc	status,0,c
  6898  001618  D00E               	goto	i2l1407
  6899  00161A  5039               	movf	___ftadd@exp1,w,c
  6900  00161C  0800               	sublw	0
  6901  00161E  2438               	addwf	___ftadd@exp2,w,c
  6902  001620  6E34               	movwf	??___ftadd& (0+255),c
  6903  001622  0E18               	movlw	24
  6904  001624  6434               	cpfsgt	??___ftadd,c
  6905  001626  D007               	goto	i2l1407
  6906  001628                     i2u360_40:
  6907  001628  C031  F02E         	movff	___ftadd@f2,?___ftadd
  6908  00162C  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  6909  001630  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  6910  001634  0012               	return	
  6911  001636                     i2l1407:
  6912  001636  5038               	movf	___ftadd@exp2,w,c
  6913  001638  B4D8               	btfsc	status,2,c
  6914  00163A  D00B               	goto	i2u363_40
  6915  00163C  5039               	movf	___ftadd@exp1,w,c
  6916  00163E  5C38               	subwf	___ftadd@exp2,w,c
  6917  001640  B0D8               	btfsc	status,0,c
  6918  001642  D00E               	goto	i2l1411
  6919  001644  5038               	movf	___ftadd@exp2,w,c
  6920  001646  0800               	sublw	0
  6921  001648  2439               	addwf	___ftadd@exp1,w,c
  6922  00164A  6E34               	movwf	??___ftadd& (0+255),c
  6923  00164C  0E18               	movlw	24
  6924  00164E  6434               	cpfsgt	??___ftadd,c
  6925  001650  D007               	goto	i2l1411
  6926  001652                     i2u363_40:
  6927  001652  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  6928  001656  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  6929  00165A  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  6930  00165E  0012               	return	
  6931  001660                     i2l1411:
  6932  001660  0E06               	movlw	6
  6933  001662  6E37               	movwf	___ftadd@sign,c
  6934  001664  BE30               	btfsc	___ftadd@f1+2,7,c
  6935  001666  8E37               	bsf	___ftadd@sign,7,c
  6936  001668  BE33               	btfsc	___ftadd@f2+2,7,c
  6937  00166A  8C37               	bsf	___ftadd@sign,6,c
  6938  00166C  8E2F               	bsf	___ftadd@f1+1,7,c
  6939  00166E  0EFF               	movlw	255
  6940  001670  162E               	andwf	___ftadd@f1,f,c
  6941  001672  0EFF               	movlw	255
  6942  001674  162F               	andwf	___ftadd@f1+1,f,c
  6943  001676  0E00               	movlw	0
  6944  001678  1630               	andwf	___ftadd@f1+2,f,c
  6945  00167A  8E32               	bsf	___ftadd@f2+1,7,c
  6946  00167C  0EFF               	movlw	255
  6947  00167E  1631               	andwf	___ftadd@f2,f,c
  6948  001680  0EFF               	movlw	255
  6949  001682  1632               	andwf	___ftadd@f2+1,f,c
  6950  001684  0E00               	movlw	0
  6951  001686  1633               	andwf	___ftadd@f2+2,f,c
  6952  001688  5038               	movf	___ftadd@exp2,w,c
  6953  00168A  5C39               	subwf	___ftadd@exp1,w,c
  6954  00168C  B0D8               	btfsc	status,0,c
  6955  00168E  D01B               	goto	i2l1416
  6956  001690                     i2u366_40:
  6957  001690  90D8               	bcf	status,0,c
  6958  001692  3631               	rlcf	___ftadd@f2,f,c
  6959  001694  3632               	rlcf	___ftadd@f2+1,f,c
  6960  001696  3633               	rlcf	___ftadd@f2+2,f,c
  6961  001698  0638               	decf	___ftadd@exp2,f,c
  6962  00169A  5039               	movf	___ftadd@exp1,w,c
  6963  00169C  1838               	xorwf	___ftadd@exp2,w,c
  6964  00169E  B4D8               	btfsc	status,2,c
  6965  0016A0  D00D               	goto	i2l1421
  6966  0016A2  0637               	decf	___ftadd@sign,f,c
  6967  0016A4  C037  F034         	movff	___ftadd@sign,??___ftadd
  6968  0016A8  0E07               	movlw	7
  6969  0016AA  1634               	andwf	??___ftadd,f,c
  6970  0016AC  B4D8               	btfsc	status,2,c
  6971  0016AE  D006               	goto	i2l1421
  6972  0016B0  D7EF               	goto	i2u366_40
  6973  0016B2  90D8               	bcf	status,0,c
  6974  0016B4  3230               	rrcf	___ftadd@f1+2,f,c
  6975  0016B6  322F               	rrcf	___ftadd@f1+1,f,c
  6976  0016B8  322E               	rrcf	___ftadd@f1,f,c
  6977  0016BA  2A39               	incf	___ftadd@exp1,f,c
  6978  0016BC                     i2l1421:
  6979  0016BC  5038               	movf	___ftadd@exp2,w,c
  6980  0016BE  1839               	xorwf	___ftadd@exp1,w,c
  6981  0016C0  B4D8               	btfsc	status,2,c
  6982  0016C2  D01F               	goto	i2u373_40
  6983  0016C4  D7F6               	goto	i2l1422
  6984  0016C6                     i2l1416:
  6985  0016C6  5039               	movf	___ftadd@exp1,w,c
  6986  0016C8  5C38               	subwf	___ftadd@exp2,w,c
  6987  0016CA  B0D8               	btfsc	status,0,c
  6988  0016CC  D01A               	goto	i2u373_40
  6989  0016CE                     i2u370_40:
  6990  0016CE  90D8               	bcf	status,0,c
  6991  0016D0  362E               	rlcf	___ftadd@f1,f,c
  6992  0016D2  362F               	rlcf	___ftadd@f1+1,f,c
  6993  0016D4  3630               	rlcf	___ftadd@f1+2,f,c
  6994  0016D6  0639               	decf	___ftadd@exp1,f,c
  6995  0016D8  5039               	movf	___ftadd@exp1,w,c
  6996  0016DA  1838               	xorwf	___ftadd@exp2,w,c
  6997  0016DC  B4D8               	btfsc	status,2,c
  6998  0016DE  D00D               	goto	i2l1430
  6999  0016E0  0637               	decf	___ftadd@sign,f,c
  7000  0016E2  C037  F034         	movff	___ftadd@sign,??___ftadd
  7001  0016E6  0E07               	movlw	7
  7002  0016E8  1634               	andwf	??___ftadd,f,c
  7003  0016EA  B4D8               	btfsc	status,2,c
  7004  0016EC  D006               	goto	i2l1430
  7005  0016EE  D7EF               	goto	i2u370_40
  7006  0016F0  90D8               	bcf	status,0,c
  7007  0016F2  3233               	rrcf	___ftadd@f2+2,f,c
  7008  0016F4  3232               	rrcf	___ftadd@f2+1,f,c
  7009  0016F6  3231               	rrcf	___ftadd@f2,f,c
  7010  0016F8  2A38               	incf	___ftadd@exp2,f,c
  7011  0016FA                     i2l1430:
  7012  0016FA  5038               	movf	___ftadd@exp2,w,c
  7013  0016FC  1839               	xorwf	___ftadd@exp1,w,c
  7014  0016FE  A4D8               	btfss	status,2,c
  7015  001700  D7F7               	goto	i2l1431
  7016  001702                     i2u373_40:
  7017  001702  AE37               	btfss	___ftadd@sign,7,c
  7018  001704  D00C               	goto	i2l1433
  7019  001706  0EFF               	movlw	255
  7020  001708  1A2E               	xorwf	___ftadd@f1,f,c
  7021  00170A  0EFF               	movlw	255
  7022  00170C  1A2F               	xorwf	___ftadd@f1+1,f,c
  7023  00170E  0EFF               	movlw	255
  7024  001710  1A30               	xorwf	___ftadd@f1+2,f,c
  7025  001712  0E01               	movlw	1
  7026  001714  262E               	addwf	___ftadd@f1,f,c
  7027  001716  0E00               	movlw	0
  7028  001718  222F               	addwfc	___ftadd@f1+1,f,c
  7029  00171A  0E00               	movlw	0
  7030  00171C  2230               	addwfc	___ftadd@f1+2,f,c
  7031  00171E                     i2l1433:
  7032  00171E  AC37               	btfss	___ftadd@sign,6,c
  7033  001720  D00C               	goto	i2l1434
  7034  001722  0EFF               	movlw	255
  7035  001724  1A31               	xorwf	___ftadd@f2,f,c
  7036  001726  0EFF               	movlw	255
  7037  001728  1A32               	xorwf	___ftadd@f2+1,f,c
  7038  00172A  0EFF               	movlw	255
  7039  00172C  1A33               	xorwf	___ftadd@f2+2,f,c
  7040  00172E  0E01               	movlw	1
  7041  001730  2631               	addwf	___ftadd@f2,f,c
  7042  001732  0E00               	movlw	0
  7043  001734  2232               	addwfc	___ftadd@f2+1,f,c
  7044  001736  0E00               	movlw	0
  7045  001738  2233               	addwfc	___ftadd@f2+2,f,c
  7046  00173A                     i2l1434:
  7047  00173A  0E00               	movlw	0
  7048  00173C  6E37               	movwf	___ftadd@sign,c
  7049  00173E  502E               	movf	___ftadd@f1,w,c
  7050  001740  2631               	addwf	___ftadd@f2,f,c
  7051  001742  502F               	movf	___ftadd@f1+1,w,c
  7052  001744  2232               	addwfc	___ftadd@f2+1,f,c
  7053  001746  5030               	movf	___ftadd@f1+2,w,c
  7054  001748  2233               	addwfc	___ftadd@f2+2,f,c
  7055  00174A  AE33               	btfss	___ftadd@f2+2,7,c
  7056  00174C  D00E               	goto	i2l1435
  7057  00174E  0EFF               	movlw	255
  7058  001750  1A31               	xorwf	___ftadd@f2,f,c
  7059  001752  0EFF               	movlw	255
  7060  001754  1A32               	xorwf	___ftadd@f2+1,f,c
  7061  001756  0EFF               	movlw	255
  7062  001758  1A33               	xorwf	___ftadd@f2+2,f,c
  7063  00175A  0E01               	movlw	1
  7064  00175C  2631               	addwf	___ftadd@f2,f,c
  7065  00175E  0E00               	movlw	0
  7066  001760  2232               	addwfc	___ftadd@f2+1,f,c
  7067  001762  0E00               	movlw	0
  7068  001764  2233               	addwfc	___ftadd@f2+2,f,c
  7069  001766  0E01               	movlw	1
  7070  001768  6E37               	movwf	___ftadd@sign,c
  7071  00176A                     i2l1435:
  7072  00176A  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  7073  00176E  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  7074  001772  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  7075  001776  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  7076  00177A  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  7077  00177E  ECEF  F00E         	call	___ftpack	;wreg free
  7078  001782  C001  F02E         	movff	?___ftpack,?___ftadd
  7079  001786  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  7080  00178A  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  7081  00178E  0012               	return	
  7082  001790                     __end_of___ftadd:
  7083                           	opt stack 0
  7084                           pclatu	equ	0xFFB
  7085                           pclath	equ	0xFFA
  7086                           tblptru	equ	0xFF8
  7087                           tblptrh	equ	0xFF7
  7088                           tblptrl	equ	0xFF6
  7089                           tablat	equ	0xFF5
  7090                           prodh	equ	0xFF4
  7091                           prodl	equ	0xFF3
  7092                           intcon	equ	0xFF2
  7093                           indf0	equ	0xFEF
  7094                           postinc0	equ	0xFEE
  7095                           fsr0h	equ	0xFEA
  7096                           fsr0l	equ	0xFE9
  7097                           wreg	equ	0xFE8
  7098                           postdec1	equ	0xFE5
  7099                           fsr1h	equ	0xFE2
  7100                           fsr1l	equ	0xFE1
  7101                           indf2	equ	0xFDF
  7102                           postinc2	equ	0xFDE
  7103                           postdec2	equ	0xFDD
  7104                           fsr2h	equ	0xFDA
  7105                           fsr2l	equ	0xFD9
  7106                           status	equ	0xFD8
  7107                           
  7108 ;; *************** function ___ftneg *****************
  7109 ;; Defined at:
  7110 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/ftneg.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;  f1              3    0[COMRAM] float 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  3    0[COMRAM] float 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, status,0
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7124 ;;      Params:         3       0       0       0       0       0       0
  7125 ;;      Locals:         0       0       0       0       0       0       0
  7126 ;;      Temps:          0       0       0       0       0       0       0
  7127 ;;      Totals:         3       0       0       0       0       0       0
  7128 ;;Total ram usage:        3 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; This function calls:
  7131 ;;		Nothing
  7132 ;; This function is called by:
  7133 ;;		_sprintf
  7134 ;; This function uses a non-reentrant model
  7135 ;;
  7136                           
  7137                           	psect	text36
  7138  0026D4                     __ptext36:
  7139                           	opt stack 0
  7140  0026D4                     ___ftneg:
  7141                           	opt stack 24
  7142                           
  7143                           ;incstack = 0
  7144  0026D4  5001               	movf	___ftneg@f1,w,c
  7145  0026D6  1002               	iorwf	___ftneg@f1+1,w,c
  7146  0026D8  1003               	iorwf	___ftneg@f1+2,w,c
  7147  0026DA  B4D8               	btfsc	status,2,c
  7148  0026DC  D006               	goto	i2l1483
  7149  0026DE  0E00               	movlw	0
  7150  0026E0  1A01               	xorwf	___ftneg@f1,f,c
  7151  0026E2  0E00               	movlw	0
  7152  0026E4  1A02               	xorwf	___ftneg@f1+1,f,c
  7153  0026E6  0E80               	movlw	128
  7154  0026E8  1A03               	xorwf	___ftneg@f1+2,f,c
  7155  0026EA                     i2l1483:
  7156  0026EA  C001  F001         	movff	___ftneg@f1,?___ftneg
  7157  0026EE  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7158  0026F2  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7159  0026F6  0012               	return		;funcret
  7160  0026F8                     __end_of___ftneg:
  7161                           	opt stack 0
  7162                           pclatu	equ	0xFFB
  7163                           pclath	equ	0xFFA
  7164                           tblptru	equ	0xFF8
  7165                           tblptrh	equ	0xFF7
  7166                           tblptrl	equ	0xFF6
  7167                           tablat	equ	0xFF5
  7168                           prodh	equ	0xFF4
  7169                           prodl	equ	0xFF3
  7170                           intcon	equ	0xFF2
  7171                           indf0	equ	0xFEF
  7172                           postinc0	equ	0xFEE
  7173                           fsr0h	equ	0xFEA
  7174                           fsr0l	equ	0xFE9
  7175                           wreg	equ	0xFE8
  7176                           postdec1	equ	0xFE5
  7177                           fsr1h	equ	0xFE2
  7178                           fsr1l	equ	0xFE1
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           postdec2	equ	0xFDD
  7182                           fsr2h	equ	0xFDA
  7183                           fsr2l	equ	0xFD9
  7184                           status	equ	0xFD8
  7185                           
  7186 ;; *************** function ___ftge *****************
  7187 ;; Defined at:
  7188 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/ftge.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  ff1             3    0[COMRAM] float 
  7191 ;;  ff2             3    3[COMRAM] float 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;		None               void
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7203 ;;      Params:         6       0       0       0       0       0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0
  7205 ;;      Temps:          3       0       0       0       0       0       0
  7206 ;;      Totals:         9       0       0       0       0       0       0
  7207 ;;Total ram usage:        9 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; This function calls:
  7210 ;;		Nothing
  7211 ;; This function is called by:
  7212 ;;		_sprintf
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text37
  7217  001FD8                     __ptext37:
  7218                           	opt stack 0
  7219  001FD8                     ___ftge:
  7220                           	opt stack 24
  7221                           
  7222                           ;incstack = 0
  7223  001FD8  AE03               	btfss	___ftge@ff1+2,7,c
  7224  001FDA  D016               	goto	i2l1465
  7225  001FDC  C001  F007         	movff	___ftge@ff1,??___ftge
  7226  001FE0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  7227  001FE4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  7228  001FE8  1E07               	comf	??___ftge,f,c
  7229  001FEA  1E08               	comf	??___ftge+1,f,c
  7230  001FEC  1E09               	comf	??___ftge+2,f,c
  7231  001FEE  2A07               	incf	??___ftge,f,c
  7232  001FF0  0E00               	movlw	0
  7233  001FF2  2208               	addwfc	??___ftge+1,f,c
  7234  001FF4  2209               	addwfc	??___ftge+2,f,c
  7235  001FF6  0E00               	movlw	0
  7236  001FF8  2407               	addwf	??___ftge,w,c
  7237  001FFA  6E01               	movwf	___ftge@ff1,c
  7238  001FFC  0E00               	movlw	0
  7239  001FFE  2008               	addwfc	??___ftge+1,w,c
  7240  002000  6E02               	movwf	___ftge@ff1+1,c
  7241  002002  0E80               	movlw	128
  7242  002004  2009               	addwfc	??___ftge+2,w,c
  7243  002006  6E03               	movwf	___ftge@ff1+2,c
  7244  002008                     i2l1465:
  7245  002008  AE06               	btfss	___ftge@ff2+2,7,c
  7246  00200A  D016               	goto	i2l1466
  7247  00200C  C004  F007         	movff	___ftge@ff2,??___ftge
  7248  002010  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  7249  002014  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  7250  002018  1E07               	comf	??___ftge,f,c
  7251  00201A  1E08               	comf	??___ftge+1,f,c
  7252  00201C  1E09               	comf	??___ftge+2,f,c
  7253  00201E  2A07               	incf	??___ftge,f,c
  7254  002020  0E00               	movlw	0
  7255  002022  2208               	addwfc	??___ftge+1,f,c
  7256  002024  2209               	addwfc	??___ftge+2,f,c
  7257  002026  0E00               	movlw	0
  7258  002028  2407               	addwf	??___ftge,w,c
  7259  00202A  6E04               	movwf	___ftge@ff2,c
  7260  00202C  0E00               	movlw	0
  7261  00202E  2008               	addwfc	??___ftge+1,w,c
  7262  002030  6E05               	movwf	___ftge@ff2+1,c
  7263  002032  0E80               	movlw	128
  7264  002034  2009               	addwfc	??___ftge+2,w,c
  7265  002036  6E06               	movwf	___ftge@ff2+2,c
  7266  002038                     i2l1466:
  7267  002038  0E00               	movlw	0
  7268  00203A  1A01               	xorwf	___ftge@ff1,f,c
  7269  00203C  0E00               	movlw	0
  7270  00203E  1A02               	xorwf	___ftge@ff1+1,f,c
  7271  002040  0E80               	movlw	128
  7272  002042  1A03               	xorwf	___ftge@ff1+2,f,c
  7273  002044  0E00               	movlw	0
  7274  002046  1A04               	xorwf	___ftge@ff2,f,c
  7275  002048  0E00               	movlw	0
  7276  00204A  1A05               	xorwf	___ftge@ff2+1,f,c
  7277  00204C  0E80               	movlw	128
  7278  00204E  1A06               	xorwf	___ftge@ff2+2,f,c
  7279  002050  5004               	movf	___ftge@ff2,w,c
  7280  002052  5C01               	subwf	___ftge@ff1,w,c
  7281  002054  5005               	movf	___ftge@ff2+1,w,c
  7282  002056  5802               	subwfb	___ftge@ff1+1,w,c
  7283  002058  5006               	movf	___ftge@ff2+2,w,c
  7284  00205A  5803               	subwfb	___ftge@ff1+2,w,c
  7285  00205C  B0D8               	btfsc	status,0,c
  7286  00205E  D002               	goto	i2l3765
  7287  002060  90D8               	bcf	status,0,c
  7288  002062  0012               	return	
  7289  002064                     i2l3765:
  7290  002064  80D8               	bsf	status,0,c
  7291  002066  0012               	return	
  7292  002068                     __end_of___ftge:
  7293                           	opt stack 0
  7294                           pclatu	equ	0xFFB
  7295                           pclath	equ	0xFFA
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           indf0	equ	0xFEF
  7304                           postinc0	equ	0xFEE
  7305                           fsr0h	equ	0xFEA
  7306                           fsr0l	equ	0xFE9
  7307                           wreg	equ	0xFE8
  7308                           postdec1	equ	0xFE5
  7309                           fsr1h	equ	0xFE2
  7310                           fsr1l	equ	0xFE1
  7311                           indf2	equ	0xFDF
  7312                           postinc2	equ	0xFDE
  7313                           postdec2	equ	0xFDD
  7314                           fsr2h	equ	0xFDA
  7315                           fsr2l	equ	0xFD9
  7316                           status	equ	0xFD8
  7317                           
  7318 ;; *************** function _read_temperature *****************
  7319 ;; Defined at:
  7320 ;;		line 229 in file "main.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;		None
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;		None
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  1    wreg      void 
  7327 ;; Registers used:
  7328 ;;		wreg, status,2, status,0, cstack
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7334 ;;      Params:         0       0       0       0       0       0       0
  7335 ;;      Locals:         0       0       0       0       0       0       0
  7336 ;;      Temps:          0       0       0       0       0       0       0
  7337 ;;      Totals:         0       0       0       0       0       0       0
  7338 ;;Total ram usage:        0 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:    2
  7341 ;; This function calls:
  7342 ;;		_BusyADC
  7343 ;;		_ConvertADC
  7344 ;;		_ReadADC
  7345 ;;		___awtoft
  7346 ;;		___ftdiv
  7347 ;;		___ftmul
  7348 ;; This function is called by:
  7349 ;;		_TIMER1
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           	psect	text38
  7354  002244                     __ptext38:
  7355                           	opt stack 0
  7356  002244                     _read_temperature:
  7357                           	opt stack 23
  7358                           
  7359                           ;main.c: 231: ConvertADC();
  7360                           
  7361                           ;incstack = 0
  7362  002244  EC10  F014         	call	_ConvertADC	;wreg free
  7363  002248  ECFD  F013         	call	_BusyADC	;wreg free
  7364  00224C  0900               	iorlw	0
  7365  00224E  A4D8               	btfss	status,2,c
  7366  002250  D7FB               	goto	i2l229
  7367                           
  7368                           ;main.c: 233: converted_temp.number = ((float)ReadADC() *100/255);
  7369  002252  0E00               	movlw	0
  7370  002254  6E18               	movwf	___ftmul@f2,c
  7371  002256  0EC8               	movlw	200
  7372  002258  6E19               	movwf	___ftmul@f2+1,c
  7373  00225A  0E42               	movlw	66
  7374  00225C  6E1A               	movwf	___ftmul@f2+2,c
  7375  00225E  ECF0  F013         	call	_ReadADC	;wreg free
  7376  002262  C001  F009         	movff	?_ReadADC,___awtoft@c
  7377  002266  C002  F00A         	movff	?_ReadADC+1,___awtoft@c+1
  7378  00226A  EC29  F013         	call	___awtoft	;wreg free
  7379  00226E  C009  F015         	movff	?___awtoft,___ftmul@f1
  7380  002272  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  7381  002276  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  7382  00227A  EC02  F00E         	call	___ftmul	;wreg free
  7383  00227E  C015  F024         	movff	?___ftmul,___ftdiv@f1
  7384  002282  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  7385  002286  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  7386  00228A  0E00               	movlw	0
  7387  00228C  6E27               	movwf	___ftdiv@f2,c
  7388  00228E  0E7F               	movlw	127
  7389  002290  6E28               	movwf	___ftdiv@f2+1,c
  7390  002292  0E43               	movlw	67
  7391  002294  6E29               	movwf	___ftdiv@f2+2,c
  7392  002296  EC7C  F00E         	call	___ftdiv	;wreg free
  7393  00229A  C024  F09E         	movff	?___ftdiv,_converted_temp
  7394  00229E  C025  F09F         	movff	?___ftdiv+1,_converted_temp+1
  7395  0022A2  C026  F0A0         	movff	?___ftdiv+2,_converted_temp+2
  7396  0022A6  0012               	return		;funcret
  7397  0022A8                     __end_of_read_temperature:
  7398                           	opt stack 0
  7399                           pclatu	equ	0xFFB
  7400                           pclath	equ	0xFFA
  7401                           tblptru	equ	0xFF8
  7402                           tblptrh	equ	0xFF7
  7403                           tblptrl	equ	0xFF6
  7404                           tablat	equ	0xFF5
  7405                           prodh	equ	0xFF4
  7406                           prodl	equ	0xFF3
  7407                           intcon	equ	0xFF2
  7408                           indf0	equ	0xFEF
  7409                           postinc0	equ	0xFEE
  7410                           fsr0h	equ	0xFEA
  7411                           fsr0l	equ	0xFE9
  7412                           wreg	equ	0xFE8
  7413                           postdec1	equ	0xFE5
  7414                           fsr1h	equ	0xFE2
  7415                           fsr1l	equ	0xFE1
  7416                           indf2	equ	0xFDF
  7417                           postinc2	equ	0xFDE
  7418                           postdec2	equ	0xFDD
  7419                           fsr2h	equ	0xFDA
  7420                           fsr2l	equ	0xFD9
  7421                           status	equ	0xFD8
  7422                           
  7423 ;; *************** function ___ftmul *****************
  7424 ;; Defined at:
  7425 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/ftmul.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;  f1              3   20[COMRAM] float 
  7428 ;;  f2              3   23[COMRAM] float 
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  7431 ;;  sign            1   34[COMRAM] unsigned char 
  7432 ;;  cntr            1   33[COMRAM] unsigned char 
  7433 ;;  exp             1   29[COMRAM] unsigned char 
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  3   20[COMRAM] float 
  7436 ;; Registers used:
  7437 ;;		wreg, status,2, status,0, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7443 ;;      Params:         6       0       0       0       0       0       0
  7444 ;;      Locals:         6       0       0       0       0       0       0
  7445 ;;      Temps:          3       0       0       0       0       0       0
  7446 ;;      Totals:        15       0       0       0       0       0       0
  7447 ;;Total ram usage:       15 bytes
  7448 ;; Hardware stack levels used:    1
  7449 ;; Hardware stack levels required when called:    1
  7450 ;; This function calls:
  7451 ;;		___ftpack
  7452 ;; This function is called by:
  7453 ;;		_read_temperature
  7454 ;;		_fround
  7455 ;;		_scale
  7456 ;;		_sprintf
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           	psect	text39
  7461  001C04                     __ptext39:
  7462                           	opt stack 0
  7463  001C04                     ___ftmul:
  7464                           	opt stack 22
  7465                           
  7466                           ;incstack = 0
  7467  001C04  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  7468  001C08  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7469  001C0A  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7470  001C0C  3416               	rlcf	___ftmul@f1+1,w,c
  7471  001C0E  361B               	rlcf	??___ftmul& (0+255),f,c
  7472  001C10  E301               	bnc	u377_41
  7473  001C12  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7474  001C14                     u377_41:
  7475  001C14  501B               	movf	??___ftmul,w,c
  7476  001C16  6E1E               	movwf	___ftmul@exp,c
  7477  001C18  501E               	movf	___ftmul@exp,w,c
  7478  001C1A  A4D8               	btfss	status,2,c
  7479  001C1C  D007               	goto	i2l1472
  7480  001C1E  0E00               	movlw	0
  7481  001C20  6E15               	movwf	?___ftmul,c
  7482  001C22  0E00               	movlw	0
  7483  001C24  6E16               	movwf	?___ftmul+1,c
  7484  001C26  0E00               	movlw	0
  7485  001C28  6E17               	movwf	?___ftmul+2,c
  7486  001C2A  0012               	return	
  7487  001C2C                     i2l1472:
  7488  001C2C  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  7489  001C30  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7490  001C32  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7491  001C34  3419               	rlcf	___ftmul@f2+1,w,c
  7492  001C36  361B               	rlcf	??___ftmul& (0+255),f,c
  7493  001C38  E301               	bnc	u379_41
  7494  001C3A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7495  001C3C                     u379_41:
  7496  001C3C  501B               	movf	??___ftmul,w,c
  7497  001C3E  6E23               	movwf	___ftmul@sign,c
  7498  001C40  5023               	movf	___ftmul@sign,w,c
  7499  001C42  A4D8               	btfss	status,2,c
  7500  001C44  D007               	goto	i2l1474
  7501  001C46  0E00               	movlw	0
  7502  001C48  6E15               	movwf	?___ftmul,c
  7503  001C4A  0E00               	movlw	0
  7504  001C4C  6E16               	movwf	?___ftmul+1,c
  7505  001C4E  0E00               	movlw	0
  7506  001C50  6E17               	movwf	?___ftmul+2,c
  7507  001C52  0012               	return	
  7508  001C54                     i2l1474:
  7509  001C54  5023               	movf	___ftmul@sign,w,c
  7510  001C56  0F7B               	addlw	123
  7511  001C58  261E               	addwf	___ftmul@exp,f,c
  7512  001C5A  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  7513  001C5E  501A               	movf	___ftmul@f2+2,w,c
  7514  001C60  1A23               	xorwf	___ftmul@sign,f,c
  7515  001C62  0E80               	movlw	128
  7516  001C64  1623               	andwf	___ftmul@sign,f,c
  7517  001C66  8E16               	bsf	___ftmul@f1+1,7,c
  7518  001C68  8E19               	bsf	___ftmul@f2+1,7,c
  7519  001C6A  0EFF               	movlw	255
  7520  001C6C  1618               	andwf	___ftmul@f2,f,c
  7521  001C6E  0EFF               	movlw	255
  7522  001C70  1619               	andwf	___ftmul@f2+1,f,c
  7523  001C72  0E00               	movlw	0
  7524  001C74  161A               	andwf	___ftmul@f2+2,f,c
  7525  001C76  0E00               	movlw	0
  7526  001C78  6E1F               	movwf	___ftmul@f3_as_product,c
  7527  001C7A  0E00               	movlw	0
  7528  001C7C  6E20               	movwf	___ftmul@f3_as_product+1,c
  7529  001C7E  0E00               	movlw	0
  7530  001C80  6E21               	movwf	___ftmul@f3_as_product+2,c
  7531  001C82  0E07               	movlw	7
  7532  001C84  6E22               	movwf	___ftmul@cntr,c
  7533  001C86  A015               	btfss	___ftmul@f1,0,c
  7534  001C88  D006               	goto	i2l1476
  7535  001C8A  5018               	movf	___ftmul@f2,w,c
  7536  001C8C  261F               	addwf	___ftmul@f3_as_product,f,c
  7537  001C8E  5019               	movf	___ftmul@f2+1,w,c
  7538  001C90  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7539  001C92  501A               	movf	___ftmul@f2+2,w,c
  7540  001C94  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7541  001C96                     i2l1476:
  7542  001C96  90D8               	bcf	status,0,c
  7543  001C98  3217               	rrcf	___ftmul@f1+2,f,c
  7544  001C9A  3216               	rrcf	___ftmul@f1+1,f,c
  7545  001C9C  3215               	rrcf	___ftmul@f1,f,c
  7546  001C9E  90D8               	bcf	status,0,c
  7547  001CA0  3618               	rlcf	___ftmul@f2,f,c
  7548  001CA2  3619               	rlcf	___ftmul@f2+1,f,c
  7549  001CA4  361A               	rlcf	___ftmul@f2+2,f,c
  7550  001CA6  2E22               	decfsz	___ftmul@cntr,f,c
  7551  001CA8  D7EE               	goto	i2l1475
  7552  001CAA  0E09               	movlw	9
  7553  001CAC  6E22               	movwf	___ftmul@cntr,c
  7554  001CAE  A015               	btfss	___ftmul@f1,0,c
  7555  001CB0  D006               	goto	i2l1479
  7556  001CB2  5018               	movf	___ftmul@f2,w,c
  7557  001CB4  261F               	addwf	___ftmul@f3_as_product,f,c
  7558  001CB6  5019               	movf	___ftmul@f2+1,w,c
  7559  001CB8  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7560  001CBA  501A               	movf	___ftmul@f2+2,w,c
  7561  001CBC  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7562  001CBE                     i2l1479:
  7563  001CBE  90D8               	bcf	status,0,c
  7564  001CC0  3217               	rrcf	___ftmul@f1+2,f,c
  7565  001CC2  3216               	rrcf	___ftmul@f1+1,f,c
  7566  001CC4  3215               	rrcf	___ftmul@f1,f,c
  7567  001CC6  90D8               	bcf	status,0,c
  7568  001CC8  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  7569  001CCA  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  7570  001CCC  321F               	rrcf	___ftmul@f3_as_product,f,c
  7571  001CCE  2E22               	decfsz	___ftmul@cntr,f,c
  7572  001CD0  D7EE               	goto	i2l1478
  7573  001CD2  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7574  001CD6  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7575  001CDA  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7576  001CDE  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  7577  001CE2  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  7578  001CE6  ECEF  F00E         	call	___ftpack	;wreg free
  7579  001CEA  C001  F015         	movff	?___ftpack,?___ftmul
  7580  001CEE  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  7581  001CF2  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  7582  001CF6  0012               	return	
  7583  001CF8                     __end_of___ftmul:
  7584                           	opt stack 0
  7585                           pclatu	equ	0xFFB
  7586                           pclath	equ	0xFFA
  7587                           tblptru	equ	0xFF8
  7588                           tblptrh	equ	0xFF7
  7589                           tblptrl	equ	0xFF6
  7590                           tablat	equ	0xFF5
  7591                           prodh	equ	0xFF4
  7592                           prodl	equ	0xFF3
  7593                           intcon	equ	0xFF2
  7594                           indf0	equ	0xFEF
  7595                           postinc0	equ	0xFEE
  7596                           fsr0h	equ	0xFEA
  7597                           fsr0l	equ	0xFE9
  7598                           wreg	equ	0xFE8
  7599                           postdec1	equ	0xFE5
  7600                           fsr1h	equ	0xFE2
  7601                           fsr1l	equ	0xFE1
  7602                           indf2	equ	0xFDF
  7603                           postinc2	equ	0xFDE
  7604                           postdec2	equ	0xFDD
  7605                           fsr2h	equ	0xFDA
  7606                           fsr2l	equ	0xFD9
  7607                           status	equ	0xFD8
  7608                           
  7609 ;; *************** function ___ftdiv *****************
  7610 ;; Defined at:
  7611 ;;		line 54 in file "/opt/microchip/xc8/v1.44/sources/common/ftdiv.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;  f1              3   35[COMRAM] float 
  7614 ;;  f2              3   38[COMRAM] float 
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;  f3              3   45[COMRAM] float 
  7617 ;;  sign            1   49[COMRAM] unsigned char 
  7618 ;;  exp             1   48[COMRAM] unsigned char 
  7619 ;;  cntr            1   44[COMRAM] unsigned char 
  7620 ;; Return value:  Size  Location     Type
  7621 ;;                  3   35[COMRAM] float 
  7622 ;; Registers used:
  7623 ;;		wreg, status,2, status,0, cstack
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7629 ;;      Params:         6       0       0       0       0       0       0
  7630 ;;      Locals:         6       0       0       0       0       0       0
  7631 ;;      Temps:          3       0       0       0       0       0       0
  7632 ;;      Totals:        15       0       0       0       0       0       0
  7633 ;;Total ram usage:       15 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:    1
  7636 ;; This function calls:
  7637 ;;		___ftpack
  7638 ;; This function is called by:
  7639 ;;		_read_temperature
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           	psect	text40
  7644  001CF8                     __ptext40:
  7645                           	opt stack 0
  7646  001CF8                     ___ftdiv:
  7647                           	opt stack 23
  7648                           
  7649                           ;incstack = 0
  7650  001CF8  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  7651  001CFC  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  7652  001CFE  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  7653  001D00  3425               	rlcf	___ftdiv@f1+1,w,c
  7654  001D02  362A               	rlcf	??___ftdiv& (0+255),f,c
  7655  001D04  E301               	bnc	u445_41
  7656  001D06  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  7657  001D08                     u445_41:
  7658  001D08  502A               	movf	??___ftdiv,w,c
  7659  001D0A  6E31               	movwf	___ftdiv@exp,c
  7660  001D0C  5031               	movf	___ftdiv@exp,w,c
  7661  001D0E  A4D8               	btfss	status,2,c
  7662  001D10  D007               	goto	i2l1440
  7663  001D12  0E00               	movlw	0
  7664  001D14  6E24               	movwf	?___ftdiv,c
  7665  001D16  0E00               	movlw	0
  7666  001D18  6E25               	movwf	?___ftdiv+1,c
  7667  001D1A  0E00               	movlw	0
  7668  001D1C  6E26               	movwf	?___ftdiv+2,c
  7669  001D1E  0012               	return	
  7670  001D20                     i2l1440:
  7671  001D20  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  7672  001D24  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  7673  001D26  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  7674  001D28  3428               	rlcf	___ftdiv@f2+1,w,c
  7675  001D2A  362A               	rlcf	??___ftdiv& (0+255),f,c
  7676  001D2C  E301               	bnc	u447_41
  7677  001D2E  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  7678  001D30                     u447_41:
  7679  001D30  502A               	movf	??___ftdiv,w,c
  7680  001D32  6E32               	movwf	___ftdiv@sign,c
  7681  001D34  5032               	movf	___ftdiv@sign,w,c
  7682  001D36  A4D8               	btfss	status,2,c
  7683  001D38  D007               	goto	i2l1442
  7684  001D3A  0E00               	movlw	0
  7685  001D3C  6E24               	movwf	?___ftdiv,c
  7686  001D3E  0E00               	movlw	0
  7687  001D40  6E25               	movwf	?___ftdiv+1,c
  7688  001D42  0E00               	movlw	0
  7689  001D44  6E26               	movwf	?___ftdiv+2,c
  7690  001D46  0012               	return	
  7691  001D48                     i2l1442:
  7692  001D48  0E00               	movlw	0
  7693  001D4A  6E2E               	movwf	___ftdiv@f3,c
  7694  001D4C  0E00               	movlw	0
  7695  001D4E  6E2F               	movwf	___ftdiv@f3+1,c
  7696  001D50  0E00               	movlw	0
  7697  001D52  6E30               	movwf	___ftdiv@f3+2,c
  7698  001D54  5032               	movf	___ftdiv@sign,w,c
  7699  001D56  0F89               	addlw	137
  7700  001D58  5E31               	subwf	___ftdiv@exp,f,c
  7701  001D5A  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  7702  001D5E  5029               	movf	___ftdiv@f2+2,w,c
  7703  001D60  1A32               	xorwf	___ftdiv@sign,f,c
  7704  001D62  0E80               	movlw	128
  7705  001D64  1632               	andwf	___ftdiv@sign,f,c
  7706  001D66  8E25               	bsf	___ftdiv@f1+1,7,c
  7707  001D68  0EFF               	movlw	255
  7708  001D6A  1624               	andwf	___ftdiv@f1,f,c
  7709  001D6C  0EFF               	movlw	255
  7710  001D6E  1625               	andwf	___ftdiv@f1+1,f,c
  7711  001D70  0E00               	movlw	0
  7712  001D72  1626               	andwf	___ftdiv@f1+2,f,c
  7713  001D74  8E28               	bsf	___ftdiv@f2+1,7,c
  7714  001D76  0EFF               	movlw	255
  7715  001D78  1627               	andwf	___ftdiv@f2,f,c
  7716  001D7A  0EFF               	movlw	255
  7717  001D7C  1628               	andwf	___ftdiv@f2+1,f,c
  7718  001D7E  0E00               	movlw	0
  7719  001D80  1629               	andwf	___ftdiv@f2+2,f,c
  7720  001D82  0E18               	movlw	24
  7721  001D84  6E2D               	movwf	___ftdiv@cntr,c
  7722  001D86  90D8               	bcf	status,0,c
  7723  001D88  362E               	rlcf	___ftdiv@f3,f,c
  7724  001D8A  362F               	rlcf	___ftdiv@f3+1,f,c
  7725  001D8C  3630               	rlcf	___ftdiv@f3+2,f,c
  7726  001D8E  5027               	movf	___ftdiv@f2,w,c
  7727  001D90  5C24               	subwf	___ftdiv@f1,w,c
  7728  001D92  5028               	movf	___ftdiv@f2+1,w,c
  7729  001D94  5825               	subwfb	___ftdiv@f1+1,w,c
  7730  001D96  5029               	movf	___ftdiv@f2+2,w,c
  7731  001D98  5826               	subwfb	___ftdiv@f1+2,w,c
  7732  001D9A  A0D8               	btfss	status,0,c
  7733  001D9C  D007               	goto	i2l1444
  7734  001D9E  5027               	movf	___ftdiv@f2,w,c
  7735  001DA0  5E24               	subwf	___ftdiv@f1,f,c
  7736  001DA2  5028               	movf	___ftdiv@f2+1,w,c
  7737  001DA4  5A25               	subwfb	___ftdiv@f1+1,f,c
  7738  001DA6  5029               	movf	___ftdiv@f2+2,w,c
  7739  001DA8  5A26               	subwfb	___ftdiv@f1+2,f,c
  7740  001DAA  802E               	bsf	___ftdiv@f3,0,c
  7741  001DAC                     i2l1444:
  7742  001DAC  90D8               	bcf	status,0,c
  7743  001DAE  3624               	rlcf	___ftdiv@f1,f,c
  7744  001DB0  3625               	rlcf	___ftdiv@f1+1,f,c
  7745  001DB2  3626               	rlcf	___ftdiv@f1+2,f,c
  7746  001DB4  2E2D               	decfsz	___ftdiv@cntr,f,c
  7747  001DB6  D7E7               	goto	i2l1443
  7748  001DB8  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  7749  001DBC  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7750  001DC0  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7751  001DC4  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  7752  001DC8  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  7753  001DCC  ECEF  F00E         	call	___ftpack	;wreg free
  7754  001DD0  C001  F024         	movff	?___ftpack,?___ftdiv
  7755  001DD4  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  7756  001DD8  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  7757  001DDC  0012               	return	
  7758  001DDE                     __end_of___ftdiv:
  7759                           	opt stack 0
  7760                           pclatu	equ	0xFFB
  7761                           pclath	equ	0xFFA
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodh	equ	0xFF4
  7767                           prodl	equ	0xFF3
  7768                           intcon	equ	0xFF2
  7769                           indf0	equ	0xFEF
  7770                           postinc0	equ	0xFEE
  7771                           fsr0h	equ	0xFEA
  7772                           fsr0l	equ	0xFE9
  7773                           wreg	equ	0xFE8
  7774                           postdec1	equ	0xFE5
  7775                           fsr1h	equ	0xFE2
  7776                           fsr1l	equ	0xFE1
  7777                           indf2	equ	0xFDF
  7778                           postinc2	equ	0xFDE
  7779                           postdec2	equ	0xFDD
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784 ;; *************** function ___awtoft *****************
  7785 ;; Defined at:
  7786 ;;		line 32 in file "/opt/microchip/xc8/v1.44/sources/common/awtoft.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;  c               2    8[COMRAM] int 
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;  sign            1   11[COMRAM] unsigned char 
  7791 ;; Return value:  Size  Location     Type
  7792 ;;                  3    8[COMRAM] float 
  7793 ;; Registers used:
  7794 ;;		wreg, status,2, status,0, cstack
  7795 ;; Tracked objects:
  7796 ;;		On entry : 0/0
  7797 ;;		On exit  : 0/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7800 ;;      Params:         3       0       0       0       0       0       0
  7801 ;;      Locals:         1       0       0       0       0       0       0
  7802 ;;      Temps:          0       0       0       0       0       0       0
  7803 ;;      Totals:         4       0       0       0       0       0       0
  7804 ;;Total ram usage:        4 bytes
  7805 ;; Hardware stack levels used:    1
  7806 ;; Hardware stack levels required when called:    1
  7807 ;; This function calls:
  7808 ;;		___ftpack
  7809 ;; This function is called by:
  7810 ;;		_read_temperature
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text41
  7815  002652                     __ptext41:
  7816                           	opt stack 0
  7817  002652                     ___awtoft:
  7818                           	opt stack 23
  7819                           
  7820                           ;incstack = 0
  7821  002652  0E00               	movlw	0
  7822  002654  6E0C               	movwf	___awtoft@sign,c
  7823  002656  AE0A               	btfss	___awtoft@c+1,7,c
  7824  002658  D006               	goto	i2l1333
  7825  00265A  6C09               	negf	___awtoft@c,c
  7826  00265C  1E0A               	comf	___awtoft@c+1,f,c
  7827  00265E  B0D8               	btfsc	status,0,c
  7828  002660  2A0A               	incf	___awtoft@c+1,f,c
  7829  002662  0E01               	movlw	1
  7830  002664  6E0C               	movwf	___awtoft@sign,c
  7831  002666                     i2l1333:
  7832  002666  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7833  00266A  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7834  00266E  6A03               	clrf	___ftpack@arg+2,c
  7835  002670  0E8E               	movlw	142
  7836  002672  6E04               	movwf	___ftpack@exp,c
  7837  002674  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7838  002678  ECEF  F00E         	call	___ftpack	;wreg free
  7839  00267C  C001  F009         	movff	?___ftpack,?___awtoft
  7840  002680  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7841  002684  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7842  002688  0012               	return	
  7843  00268A                     __end_of___awtoft:
  7844                           	opt stack 0
  7845                           pclatu	equ	0xFFB
  7846                           pclath	equ	0xFFA
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           prodh	equ	0xFF4
  7852                           prodl	equ	0xFF3
  7853                           intcon	equ	0xFF2
  7854                           indf0	equ	0xFEF
  7855                           postinc0	equ	0xFEE
  7856                           fsr0h	equ	0xFEA
  7857                           fsr0l	equ	0xFE9
  7858                           wreg	equ	0xFE8
  7859                           postdec1	equ	0xFE5
  7860                           fsr1h	equ	0xFE2
  7861                           fsr1l	equ	0xFE1
  7862                           indf2	equ	0xFDF
  7863                           postinc2	equ	0xFDE
  7864                           postdec2	equ	0xFDD
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function ___ftpack *****************
  7870 ;; Defined at:
  7871 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/float.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;  arg             3    0[COMRAM] unsigned um
  7874 ;;  exp             1    3[COMRAM] unsigned char 
  7875 ;;  sign            1    4[COMRAM] unsigned char 
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;		None
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  3    0[COMRAM] float 
  7880 ;; Registers used:
  7881 ;;		wreg, status,2, status,0
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7887 ;;      Params:         5       0       0       0       0       0       0
  7888 ;;      Locals:         0       0       0       0       0       0       0
  7889 ;;      Temps:          3       0       0       0       0       0       0
  7890 ;;      Totals:         8       0       0       0       0       0       0
  7891 ;;Total ram usage:        8 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; This function calls:
  7894 ;;		Nothing
  7895 ;; This function is called by:
  7896 ;;		___awtoft
  7897 ;;		___ftadd
  7898 ;;		___ftdiv
  7899 ;;		___ftmul
  7900 ;;		___lltoft
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           	psect	text42
  7905  001DDE                     __ptext42:
  7906                           	opt stack 0
  7907  001DDE                     ___ftpack:
  7908                           	opt stack 22
  7909                           
  7910                           ;incstack = 0
  7911  001DDE  5004               	movf	___ftpack@exp,w,c
  7912  001DE0  B4D8               	btfsc	status,2,c
  7913  001DE2  D005               	goto	i2u347_40
  7914  001DE4  5001               	movf	___ftpack@arg,w,c
  7915  001DE6  1002               	iorwf	___ftpack@arg+1,w,c
  7916  001DE8  1003               	iorwf	___ftpack@arg+2,w,c
  7917  001DEA  A4D8               	btfss	status,2,c
  7918  001DEC  D00C               	goto	i2l1376
  7919  001DEE                     i2u347_40:
  7920  001DEE  0E00               	movlw	0
  7921  001DF0  6E01               	movwf	?___ftpack,c
  7922  001DF2  0E00               	movlw	0
  7923  001DF4  6E02               	movwf	?___ftpack+1,c
  7924  001DF6  0E00               	movlw	0
  7925  001DF8  6E03               	movwf	?___ftpack+2,c
  7926  001DFA  0012               	return	
  7927  001DFC  2A04               	incf	___ftpack@exp,f,c
  7928  001DFE  90D8               	bcf	status,0,c
  7929  001E00  3203               	rrcf	___ftpack@arg+2,f,c
  7930  001E02  3202               	rrcf	___ftpack@arg+1,f,c
  7931  001E04  3201               	rrcf	___ftpack@arg,f,c
  7932  001E06                     i2l1376:
  7933  001E06  0E00               	movlw	0
  7934  001E08  1401               	andwf	___ftpack@arg,w,c
  7935  001E0A  6E06               	movwf	??___ftpack& (0+255),c
  7936  001E0C  0E00               	movlw	0
  7937  001E0E  1402               	andwf	___ftpack@arg+1,w,c
  7938  001E10  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7939  001E12  0EFE               	movlw	254
  7940  001E14  1403               	andwf	___ftpack@arg+2,w,c
  7941  001E16  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7942  001E18  5006               	movf	??___ftpack,w,c
  7943  001E1A  1007               	iorwf	??___ftpack+1,w,c
  7944  001E1C  1008               	iorwf	??___ftpack+2,w,c
  7945  001E1E  B4D8               	btfsc	status,2,c
  7946  001E20  D00C               	goto	i2l1379
  7947  001E22  D7EC               	goto	i2l1377
  7948  001E24  2A04               	incf	___ftpack@exp,f,c
  7949  001E26  0E01               	movlw	1
  7950  001E28  2601               	addwf	___ftpack@arg,f,c
  7951  001E2A  0E00               	movlw	0
  7952  001E2C  2202               	addwfc	___ftpack@arg+1,f,c
  7953  001E2E  0E00               	movlw	0
  7954  001E30  2203               	addwfc	___ftpack@arg+2,f,c
  7955  001E32  90D8               	bcf	status,0,c
  7956  001E34  3203               	rrcf	___ftpack@arg+2,f,c
  7957  001E36  3202               	rrcf	___ftpack@arg+1,f,c
  7958  001E38  3201               	rrcf	___ftpack@arg,f,c
  7959  001E3A                     i2l1379:
  7960  001E3A  0E00               	movlw	0
  7961  001E3C  1401               	andwf	___ftpack@arg,w,c
  7962  001E3E  6E06               	movwf	??___ftpack& (0+255),c
  7963  001E40  0E00               	movlw	0
  7964  001E42  1402               	andwf	___ftpack@arg+1,w,c
  7965  001E44  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7966  001E46  0EFF               	movlw	255
  7967  001E48  1403               	andwf	___ftpack@arg+2,w,c
  7968  001E4A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7969  001E4C  5006               	movf	??___ftpack,w,c
  7970  001E4E  1007               	iorwf	??___ftpack+1,w,c
  7971  001E50  1008               	iorwf	??___ftpack+2,w,c
  7972  001E52  B4D8               	btfsc	status,2,c
  7973  001E54  D006               	goto	i2l1382
  7974  001E56  D7E6               	goto	i2l1380
  7975  001E58  0604               	decf	___ftpack@exp,f,c
  7976  001E5A  90D8               	bcf	status,0,c
  7977  001E5C  3601               	rlcf	___ftpack@arg,f,c
  7978  001E5E  3602               	rlcf	___ftpack@arg+1,f,c
  7979  001E60  3603               	rlcf	___ftpack@arg+2,f,c
  7980  001E62                     i2l1382:
  7981  001E62  BE02               	btfsc	___ftpack@arg+1,7,c
  7982  001E64  D003               	goto	i2u351_40
  7983  001E66  0E02               	movlw	2
  7984  001E68  6004               	cpfslt	___ftpack@exp,c
  7985  001E6A  D7F6               	goto	i2l1383
  7986  001E6C                     i2u351_40:
  7987  001E6C  A004               	btfss	___ftpack@exp,0,c
  7988  001E6E  9E02               	bcf	___ftpack@arg+1,7,c
  7989  001E70  90D8               	bcf	status,0,c
  7990  001E72  3204               	rrcf	___ftpack@exp,f,c
  7991  001E74  5004               	movf	___ftpack@exp,w,c
  7992  001E76  1203               	iorwf	___ftpack@arg+2,f,c
  7993  001E78  5005               	movf	___ftpack@sign,w,c
  7994  001E7A  A4D8               	btfss	status,2,c
  7995  001E7C  8E03               	bsf	___ftpack@arg+2,7,c
  7996  001E7E  C001  F001         	movff	___ftpack@arg,?___ftpack
  7997  001E82  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7998  001E86  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7999  001E8A  0012               	return	
  8000  001E8C                     __end_of___ftpack:
  8001                           	opt stack 0
  8002                           pclatu	equ	0xFFB
  8003                           pclath	equ	0xFFA
  8004                           tblptru	equ	0xFF8
  8005                           tblptrh	equ	0xFF7
  8006                           tblptrl	equ	0xFF6
  8007                           tablat	equ	0xFF5
  8008                           prodh	equ	0xFF4
  8009                           prodl	equ	0xFF3
  8010                           intcon	equ	0xFF2
  8011                           indf0	equ	0xFEF
  8012                           postinc0	equ	0xFEE
  8013                           fsr0h	equ	0xFEA
  8014                           fsr0l	equ	0xFE9
  8015                           wreg	equ	0xFE8
  8016                           postdec1	equ	0xFE5
  8017                           fsr1h	equ	0xFE2
  8018                           fsr1l	equ	0xFE1
  8019                           indf2	equ	0xFDF
  8020                           postinc2	equ	0xFDE
  8021                           postdec2	equ	0xFDD
  8022                           fsr2h	equ	0xFDA
  8023                           fsr2l	equ	0xFD9
  8024                           status	equ	0xFD8
  8025                           
  8026 ;; *************** function _ReadADC *****************
  8027 ;; Defined at:
  8028 ;;		line 24 in file "adcread.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;		None
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;		None
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  2    0[COMRAM] int 
  8035 ;; Registers used:
  8036 ;;		wreg, status,2
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8042 ;;      Params:         2       0       0       0       0       0       0
  8043 ;;      Locals:         0       0       0       0       0       0       0
  8044 ;;      Temps:          2       0       0       0       0       0       0
  8045 ;;      Totals:         4       0       0       0       0       0       0
  8046 ;;Total ram usage:        4 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; This function calls:
  8049 ;;		Nothing
  8050 ;; This function is called by:
  8051 ;;		_read_temperature
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text43
  8056  0027E0                     __ptext43:
  8057                           	opt stack 0
  8058  0027E0                     _ReadADC:
  8059                           	opt stack 24
  8060                           
  8061                           ;adcread.c: 26: return (((unsigned int)ADRESH)<<8)|(ADRESL);
  8062                           
  8063                           ;incstack = 0
  8064  0027E0  50C4               	movf	4036,w,c	;volatile
  8065  0027E2  6E03               	movwf	??_ReadADC& (0+255),c
  8066  0027E4  50C3               	movf	4035,w,c	;volatile
  8067  0027E6  6E01               	movwf	?_ReadADC,c
  8068  0027E8  C003  F002         	movff	??_ReadADC,?_ReadADC+1
  8069  0027EC  0012               	return	
  8070  0027EE                     __end_of_ReadADC:
  8071                           	opt stack 0
  8072                           pclatu	equ	0xFFB
  8073                           pclath	equ	0xFFA
  8074                           tblptru	equ	0xFF8
  8075                           tblptrh	equ	0xFF7
  8076                           tblptrl	equ	0xFF6
  8077                           tablat	equ	0xFF5
  8078                           prodh	equ	0xFF4
  8079                           prodl	equ	0xFF3
  8080                           intcon	equ	0xFF2
  8081                           indf0	equ	0xFEF
  8082                           postinc0	equ	0xFEE
  8083                           fsr0h	equ	0xFEA
  8084                           fsr0l	equ	0xFE9
  8085                           wreg	equ	0xFE8
  8086                           postdec1	equ	0xFE5
  8087                           fsr1h	equ	0xFE2
  8088                           fsr1l	equ	0xFE1
  8089                           indf2	equ	0xFDF
  8090                           postinc2	equ	0xFDE
  8091                           postdec2	equ	0xFDD
  8092                           fsr2h	equ	0xFDA
  8093                           fsr2l	equ	0xFD9
  8094                           status	equ	0xFD8
  8095                           
  8096 ;; *************** function _ConvertADC *****************
  8097 ;; Defined at:
  8098 ;;		line 22 in file "adcconv.c"
  8099 ;; Parameters:    Size  Location     Type
  8100 ;;		None
  8101 ;; Auto vars:     Size  Location     Type
  8102 ;;		None
  8103 ;; Return value:  Size  Location     Type
  8104 ;;                  1    wreg      void 
  8105 ;; Registers used:
  8106 ;;		None
  8107 ;; Tracked objects:
  8108 ;;		On entry : 0/0
  8109 ;;		On exit  : 0/0
  8110 ;;		Unchanged: 0/0
  8111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8112 ;;      Params:         0       0       0       0       0       0       0
  8113 ;;      Locals:         0       0       0       0       0       0       0
  8114 ;;      Temps:          0       0       0       0       0       0       0
  8115 ;;      Totals:         0       0       0       0       0       0       0
  8116 ;;Total ram usage:        0 bytes
  8117 ;; Hardware stack levels used:    1
  8118 ;; This function calls:
  8119 ;;		Nothing
  8120 ;; This function is called by:
  8121 ;;		_read_temperature
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           	psect	text44
  8126  002820                     __ptext44:
  8127                           	opt stack 0
  8128  002820                     _ConvertADC:
  8129                           	opt stack 24
  8130                           
  8131                           ;adcconv.c: 24: ADCON0bits.GO = 1;
  8132                           
  8133                           ;incstack = 0
  8134  002820  82C2               	bsf	4034,1,c	;volatile
  8135  002822  0012               	return		;funcret
  8136  002824                     __end_of_ConvertADC:
  8137                           	opt stack 0
  8138                           pclatu	equ	0xFFB
  8139                           pclath	equ	0xFFA
  8140                           tblptru	equ	0xFF8
  8141                           tblptrh	equ	0xFF7
  8142                           tblptrl	equ	0xFF6
  8143                           tablat	equ	0xFF5
  8144                           prodh	equ	0xFF4
  8145                           prodl	equ	0xFF3
  8146                           intcon	equ	0xFF2
  8147                           indf0	equ	0xFEF
  8148                           postinc0	equ	0xFEE
  8149                           fsr0h	equ	0xFEA
  8150                           fsr0l	equ	0xFE9
  8151                           wreg	equ	0xFE8
  8152                           postdec1	equ	0xFE5
  8153                           fsr1h	equ	0xFE2
  8154                           fsr1l	equ	0xFE1
  8155                           indf2	equ	0xFDF
  8156                           postinc2	equ	0xFDE
  8157                           postdec2	equ	0xFDD
  8158                           fsr2h	equ	0xFDA
  8159                           fsr2l	equ	0xFD9
  8160                           status	equ	0xFD8
  8161                           
  8162 ;; *************** function _BusyADC *****************
  8163 ;; Defined at:
  8164 ;;		line 26 in file "adcbusy.c"
  8165 ;; Parameters:    Size  Location     Type
  8166 ;;		None
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;		None
  8169 ;; Return value:  Size  Location     Type
  8170 ;;                  1    wreg      unsigned char 
  8171 ;; Registers used:
  8172 ;;		wreg
  8173 ;; Tracked objects:
  8174 ;;		On entry : 0/0
  8175 ;;		On exit  : 0/0
  8176 ;;		Unchanged: 0/0
  8177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8178 ;;      Params:         0       0       0       0       0       0       0
  8179 ;;      Locals:         0       0       0       0       0       0       0
  8180 ;;      Temps:          0       0       0       0       0       0       0
  8181 ;;      Totals:         0       0       0       0       0       0       0
  8182 ;;Total ram usage:        0 bytes
  8183 ;; Hardware stack levels used:    1
  8184 ;; This function calls:
  8185 ;;		Nothing
  8186 ;; This function is called by:
  8187 ;;		_read_temperature
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           	psect	text45
  8192  0027FA                     __ptext45:
  8193                           	opt stack 0
  8194  0027FA                     _BusyADC:
  8195                           	opt stack 24
  8196                           
  8197                           ;adcbusy.c: 28: return(ADCON0bits.GO);
  8198                           
  8199                           ;incstack = 0
  8200  0027FA  A2C2               	btfss	4034,1,c	;volatile
  8201  0027FC  D002               	goto	i2u419_40
  8202  0027FE  0E01               	movlw	1
  8203  002800  0012               	return	
  8204  002802                     i2u419_40:
  8205  002802  0E00               	movlw	0
  8206  002804  0012               	return	
  8207  002806                     __end_of_BusyADC:
  8208                           	opt stack 0
  8209                           pclatu	equ	0xFFB
  8210                           pclath	equ	0xFFA
  8211                           tblptru	equ	0xFF8
  8212                           tblptrh	equ	0xFF7
  8213                           tblptrl	equ	0xFF6
  8214                           tablat	equ	0xFF5
  8215                           prodh	equ	0xFF4
  8216                           prodl	equ	0xFF3
  8217                           intcon	equ	0xFF2
  8218                           indf0	equ	0xFEF
  8219                           postinc0	equ	0xFEE
  8220                           fsr0h	equ	0xFEA
  8221                           fsr0l	equ	0xFE9
  8222                           wreg	equ	0xFE8
  8223                           postdec1	equ	0xFE5
  8224                           fsr1h	equ	0xFE2
  8225                           fsr1l	equ	0xFE1
  8226                           indf2	equ	0xFDF
  8227                           postinc2	equ	0xFDE
  8228                           postdec2	equ	0xFDD
  8229                           fsr2h	equ	0xFDA
  8230                           fsr2l	equ	0xFD9
  8231                           status	equ	0xFD8
  8232                           
  8233 ;; *************** function _putsXLCD *****************
  8234 ;; Defined at:
  8235 ;;		line 16 in file "putsxlcd.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  8238 ;;		 -> TIMER1@str_tmp(10), STR_7(5), STR_6(4), STR_5(14), 
  8239 ;;		 -> STR_4(4), STR_3(10), print_data@str_temp2(3), 
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;		None
  8242 ;; Return value:  Size  Location     Type
  8243 ;;                  1    wreg      void 
  8244 ;; Registers used:
  8245 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8251 ;;      Params:         2       0       0       0       0       0       0
  8252 ;;      Locals:         0       0       0       0       0       0       0
  8253 ;;      Temps:          0       0       0       0       0       0       0
  8254 ;;      Totals:         2       0       0       0       0       0       0
  8255 ;;Total ram usage:        2 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    2
  8258 ;; This function calls:
  8259 ;;		_WriteDataXLCD
  8260 ;;		i2_BusyXLCD
  8261 ;; This function is called by:
  8262 ;;		_TIMER1
  8263 ;;		_print_data
  8264 ;;		_test_readwrite
  8265 ;;		_print_all_data
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           	psect	text46
  8270  002366                     __ptext46:
  8271                           	opt stack 0
  8272  002366                     _putsXLCD:
  8273                           	opt stack 23
  8274                           
  8275                           ;putsxlcd.c: 18: while(*buffer)
  8276                           
  8277                           ;incstack = 0
  8278  002366  D019               	goto	i2l338
  8279  002368                     
  8280                           ;putsxlcd.c: 19: {
  8281                           ;putsxlcd.c: 20: while(BusyXLCD());
  8282  002368  ECF0  F012         	call	i2_BusyXLCD	;wreg free
  8283  00236C  0900               	iorlw	0
  8284  00236E  A4D8               	btfss	status,2,c
  8285  002370  D7FB               	goto	i2l339
  8286                           
  8287                           ;putsxlcd.c: 21: WriteDataXLCD(*buffer);
  8288  002372  C002  FFF6         	movff	putsXLCD@buffer,tblptrl
  8289  002376  C003  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  8290  00237A  6AF8               	clrf	tblptru,c
  8291  00237C  0E05               	movlw	(high __ramtop+-1)
  8292  00237E  64F7               	cpfsgt	tblptrh,c
  8293  002380  D003               	bra	i2u543_47
  8294  002382  0008               	tblrd		*
  8295  002384  50F5               	movf	tablat,w,c
  8296  002386  D005               	bra	i2u543_40
  8297  002388                     i2u543_47:
  8298  002388  CFF6 FFE9          	movff	tblptrl,fsr0l
  8299  00238C  CFF7 FFEA          	movff	tblptrh,fsr0h
  8300  002390  50EF               	movf	indf0,w,c
  8301  002392                     i2u543_40:
  8302  002392  EC97  F012         	call	_WriteDataXLCD
  8303                           
  8304                           ;putsxlcd.c: 22: buffer++;
  8305  002396  4A02               	infsnz	putsXLCD@buffer,f,c
  8306  002398  2A03               	incf	putsXLCD@buffer+1,f,c
  8307  00239A                     i2l338:
  8308  00239A  C002  FFF6         	movff	putsXLCD@buffer,tblptrl
  8309  00239E  C003  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  8310  0023A2  6AF8               	clrf	tblptru,c
  8311  0023A4  0E05               	movlw	(high __ramtop+-1)
  8312  0023A6  64F7               	cpfsgt	tblptrh,c
  8313  0023A8  D003               	bra	i2u544_47
  8314  0023AA  0008               	tblrd		*
  8315  0023AC  50F5               	movf	tablat,w,c
  8316  0023AE  D005               	bra	i2u544_40
  8317  0023B0                     i2u544_47:
  8318  0023B0  CFF6 FFE9          	movff	tblptrl,fsr0l
  8319  0023B4  CFF7 FFEA          	movff	tblptrh,fsr0h
  8320  0023B8  50EF               	movf	indf0,w,c
  8321  0023BA                     i2u544_40:
  8322  0023BA  0900               	iorlw	0
  8323  0023BC  B4D8               	btfsc	status,2,c
  8324  0023BE  0012               	return	
  8325  0023C0  D7D3               	goto	i2l339
  8326  0023C2                     __end_of_putsXLCD:
  8327                           	opt stack 0
  8328                           pclatu	equ	0xFFB
  8329                           pclath	equ	0xFFA
  8330                           tblptru	equ	0xFF8
  8331                           tblptrh	equ	0xFF7
  8332                           tblptrl	equ	0xFF6
  8333                           tablat	equ	0xFF5
  8334                           prodh	equ	0xFF4
  8335                           prodl	equ	0xFF3
  8336                           intcon	equ	0xFF2
  8337                           indf0	equ	0xFEF
  8338                           postinc0	equ	0xFEE
  8339                           fsr0h	equ	0xFEA
  8340                           fsr0l	equ	0xFE9
  8341                           wreg	equ	0xFE8
  8342                           postdec1	equ	0xFE5
  8343                           fsr1h	equ	0xFE2
  8344                           fsr1l	equ	0xFE1
  8345                           indf2	equ	0xFDF
  8346                           postinc2	equ	0xFDE
  8347                           postdec2	equ	0xFDD
  8348                           fsr2h	equ	0xFDA
  8349                           fsr2l	equ	0xFD9
  8350                           status	equ	0xFD8
  8351                           
  8352 ;; *************** function i2_BusyXLCD *****************
  8353 ;; Defined at:
  8354 ;;		line 12 in file "busyxlcd.c"
  8355 ;; Parameters:    Size  Location     Type
  8356 ;;		None
  8357 ;; Auto vars:     Size  Location     Type
  8358 ;;		None
  8359 ;; Return value:  Size  Location     Type
  8360 ;;                  1    wreg      unsigned char 
  8361 ;; Registers used:
  8362 ;;		wreg, cstack
  8363 ;; Tracked objects:
  8364 ;;		On entry : 0/0
  8365 ;;		On exit  : 0/0
  8366 ;;		Unchanged: 0/0
  8367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8368 ;;      Params:         0       0       0       0       0       0       0
  8369 ;;      Locals:         0       0       0       0       0       0       0
  8370 ;;      Temps:          0       0       0       0       0       0       0
  8371 ;;      Totals:         0       0       0       0       0       0       0
  8372 ;;Total ram usage:        0 bytes
  8373 ;; Hardware stack levels used:    1
  8374 ;; Hardware stack levels required when called:    1
  8375 ;; This function calls:
  8376 ;;		i2_DelayFor18TCY
  8377 ;; This function is called by:
  8378 ;;		_putsXLCD
  8379 ;;		i2_initXLCD
  8380 ;;		i2_OpenXLCD
  8381 ;; This function uses a non-reentrant model
  8382 ;;
  8383                           
  8384                           	psect	text47
  8385  0025E0                     __ptext47:
  8386                           	opt stack 0
  8387  0025E0                     i2_BusyXLCD:
  8388                           	opt stack 22
  8389                           
  8390                           ;busyxlcd.c: 14: LATAbits.LATA2 = 1;
  8391                           
  8392                           ;incstack = 0
  8393  0025E0  8489               	bsf	3977,2,c	;volatile
  8394                           
  8395                           ;busyxlcd.c: 15: LATAbits.LATA3 = 0;
  8396  0025E2  9689               	bcf	3977,3,c	;volatile
  8397                           
  8398                           ;busyxlcd.c: 16: DelayFor18TCY();
  8399  0025E4  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8400                           
  8401                           ;busyxlcd.c: 17: LATAbits.LATA1 = 1;
  8402  0025E8  8289               	bsf	3977,1,c	;volatile
  8403                           
  8404                           ;busyxlcd.c: 18: DelayFor18TCY();
  8405  0025EA  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8406                           
  8407                           ;busyxlcd.c: 36: if(PORTB&0x08)
  8408  0025EE  A681               	btfss	3969,3,c	;volatile
  8409  0025F0  D00A               	goto	i2l9
  8410                           
  8411                           ;busyxlcd.c: 38: {
  8412                           ;busyxlcd.c: 39: LATAbits.LATA1 = 0;
  8413  0025F2  9289               	bcf	3977,1,c	;volatile
  8414                           
  8415                           ;busyxlcd.c: 40: DelayFor18TCY();
  8416  0025F4  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8417                           
  8418                           ;busyxlcd.c: 41: LATAbits.LATA1 = 1;
  8419  0025F8  8289               	bsf	3977,1,c	;volatile
  8420                           
  8421                           ;busyxlcd.c: 42: DelayFor18TCY();
  8422  0025FA  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8423                           
  8424                           ;busyxlcd.c: 43: LATAbits.LATA1 = 0;
  8425  0025FE  9289               	bcf	3977,1,c	;volatile
  8426                           
  8427                           ;busyxlcd.c: 44: LATAbits.LATA2 = 0;
  8428  002600  9489               	bcf	3977,2,c	;volatile
  8429                           
  8430                           ;busyxlcd.c: 45: return 1;
  8431  002602  0E01               	movlw	1
  8432                           
  8433                           ;busyxlcd.c: 46: }
  8434  002604  0012               	return	
  8435  002606                     i2l9:
  8436                           
  8437                           ;busyxlcd.c: 47: else
  8438                           ;busyxlcd.c: 48: {
  8439                           ;busyxlcd.c: 49: LATAbits.LATA1 = 0;
  8440  002606  9289               	bcf	3977,1,c	;volatile
  8441                           
  8442                           ;busyxlcd.c: 50: DelayFor18TCY();
  8443  002608  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8444                           
  8445                           ;busyxlcd.c: 51: LATAbits.LATA1 = 1;
  8446  00260C  8289               	bsf	3977,1,c	;volatile
  8447                           
  8448                           ;busyxlcd.c: 52: DelayFor18TCY();
  8449  00260E  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8450                           
  8451                           ;busyxlcd.c: 53: LATAbits.LATA1 = 0;
  8452  002612  9289               	bcf	3977,1,c	;volatile
  8453                           
  8454                           ;busyxlcd.c: 54: LATAbits.LATA2 = 0;
  8455  002614  9489               	bcf	3977,2,c	;volatile
  8456                           
  8457                           ;busyxlcd.c: 55: return 0;
  8458  002616  0E00               	movlw	0
  8459  002618  0012               	return	
  8460  00261A                     __end_ofi2_BusyXLCD:
  8461                           	opt stack 0
  8462                           pclatu	equ	0xFFB
  8463                           pclath	equ	0xFFA
  8464                           tblptru	equ	0xFF8
  8465                           tblptrh	equ	0xFF7
  8466                           tblptrl	equ	0xFF6
  8467                           tablat	equ	0xFF5
  8468                           prodh	equ	0xFF4
  8469                           prodl	equ	0xFF3
  8470                           intcon	equ	0xFF2
  8471                           indf0	equ	0xFEF
  8472                           postinc0	equ	0xFEE
  8473                           fsr0h	equ	0xFEA
  8474                           fsr0l	equ	0xFE9
  8475                           wreg	equ	0xFE8
  8476                           postdec1	equ	0xFE5
  8477                           fsr1h	equ	0xFE2
  8478                           fsr1l	equ	0xFE1
  8479                           indf2	equ	0xFDF
  8480                           postinc2	equ	0xFDE
  8481                           postdec2	equ	0xFDD
  8482                           fsr2h	equ	0xFDA
  8483                           fsr2l	equ	0xFD9
  8484                           status	equ	0xFD8
  8485                           
  8486 ;; *************** function _WriteDataXLCD *****************
  8487 ;; Defined at:
  8488 ;;		line 17 in file "writdata.c"
  8489 ;; Parameters:    Size  Location     Type
  8490 ;;  data            1    wreg     unsigned char 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  data            1    0[COMRAM] unsigned char 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  1    wreg      void 
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0, cstack
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8502 ;;      Params:         0       0       0       0       0       0       0
  8503 ;;      Locals:         1       0       0       0       0       0       0
  8504 ;;      Temps:          0       0       0       0       0       0       0
  8505 ;;      Totals:         1       0       0       0       0       0       0
  8506 ;;Total ram usage:        1 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    1
  8509 ;; This function calls:
  8510 ;;		i2_DelayFor18TCY
  8511 ;; This function is called by:
  8512 ;;		_putsXLCD
  8513 ;;		_putrsXLCD
  8514 ;; This function uses a non-reentrant model
  8515 ;;
  8516                           
  8517                           	psect	text48
  8518  00252E                     __ptext48:
  8519                           	opt stack 0
  8520  00252E                     _WriteDataXLCD:
  8521                           	opt stack 23
  8522                           
  8523                           ;incstack = 0
  8524                           ;WriteDataXLCD@data stored from wreg
  8525  00252E  6E01               	movwf	WriteDataXLCD@data,c
  8526                           
  8527                           ;writdata.c: 36: TRISB &= 0xf0;
  8528  002530  0EF0               	movlw	240
  8529  002532  1693               	andwf	3987,f,c	;volatile
  8530                           
  8531                           ;writdata.c: 37: PORTB &= 0xf0;
  8532  002534  0EF0               	movlw	240
  8533  002536  1681               	andwf	3969,f,c	;volatile
  8534                           
  8535                           ;writdata.c: 38: PORTB |= ((data>>4)&0x0f);
  8536  002538  3801               	swapf	WriteDataXLCD@data,w,c
  8537  00253A  0B0F               	andlw	15
  8538  00253C  0B0F               	andlw	15
  8539  00253E  1281               	iorwf	3969,f,c	;volatile
  8540                           
  8541                           ;writdata.c: 40: LATAbits.LATA3 = 1;
  8542  002540  8689               	bsf	3977,3,c	;volatile
  8543                           
  8544                           ;writdata.c: 41: LATAbits.LATA2 = 0;
  8545  002542  9489               	bcf	3977,2,c	;volatile
  8546                           
  8547                           ;writdata.c: 42: DelayFor18TCY();
  8548  002544  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8549                           
  8550                           ;writdata.c: 43: LATAbits.LATA1 = 1;
  8551  002548  8289               	bsf	3977,1,c	;volatile
  8552                           
  8553                           ;writdata.c: 44: DelayFor18TCY();
  8554  00254A  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8555                           
  8556                           ;writdata.c: 45: LATAbits.LATA1 = 0;
  8557  00254E  9289               	bcf	3977,1,c	;volatile
  8558                           
  8559                           ;writdata.c: 50: PORTB &= 0xf0;
  8560  002550  0EF0               	movlw	240
  8561  002552  1681               	andwf	3969,f,c	;volatile
  8562                           
  8563                           ;writdata.c: 51: PORTB |= (data&0x0f);
  8564  002554  5001               	movf	WriteDataXLCD@data,w,c
  8565  002556  0B0F               	andlw	15
  8566  002558  1281               	iorwf	3969,f,c	;volatile
  8567                           
  8568                           ;writdata.c: 53: DelayFor18TCY();
  8569  00255A  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8570                           
  8571                           ;writdata.c: 54: LATAbits.LATA1 = 1;
  8572  00255E  8289               	bsf	3977,1,c	;volatile
  8573                           
  8574                           ;writdata.c: 55: DelayFor18TCY();
  8575  002560  EC08  F014         	call	i2_DelayFor18TCY	;wreg free
  8576                           
  8577                           ;writdata.c: 56: LATAbits.LATA1 = 0;
  8578  002564  9289               	bcf	3977,1,c	;volatile
  8579                           
  8580                           ;writdata.c: 60: TRISB |= 0x0f;
  8581  002566  0E0F               	movlw	15
  8582  002568  1293               	iorwf	3987,f,c	;volatile
  8583  00256A  0012               	return	
  8584  00256C                     __end_of_WriteDataXLCD:
  8585                           	opt stack 0
  8586                           pclatu	equ	0xFFB
  8587                           pclath	equ	0xFFA
  8588                           tblptru	equ	0xFF8
  8589                           tblptrh	equ	0xFF7
  8590                           tblptrl	equ	0xFF6
  8591                           tablat	equ	0xFF5
  8592                           prodh	equ	0xFF4
  8593                           prodl	equ	0xFF3
  8594                           intcon	equ	0xFF2
  8595                           indf0	equ	0xFEF
  8596                           postinc0	equ	0xFEE
  8597                           fsr0h	equ	0xFEA
  8598                           fsr0l	equ	0xFE9
  8599                           wreg	equ	0xFE8
  8600                           postdec1	equ	0xFE5
  8601                           fsr1h	equ	0xFE2
  8602                           fsr1l	equ	0xFE1
  8603                           indf2	equ	0xFDF
  8604                           postinc2	equ	0xFDE
  8605                           postdec2	equ	0xFDD
  8606                           fsr2h	equ	0xFDA
  8607                           fsr2l	equ	0xFD9
  8608                           status	equ	0xFD8
  8609                           
  8610 ;; *************** function i2_DelayFor18TCY *****************
  8611 ;; Defined at:
  8612 ;;		line 102 in file "main.c"
  8613 ;; Parameters:    Size  Location     Type
  8614 ;;		None
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;		None
  8617 ;; Return value:  Size  Location     Type
  8618 ;;                  1    wreg      void 
  8619 ;; Registers used:
  8620 ;;		wreg
  8621 ;; Tracked objects:
  8622 ;;		On entry : 0/0
  8623 ;;		On exit  : 0/0
  8624 ;;		Unchanged: 0/0
  8625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8626 ;;      Params:         0       0       0       0       0       0       0
  8627 ;;      Locals:         0       0       0       0       0       0       0
  8628 ;;      Temps:          0       0       0       0       0       0       0
  8629 ;;      Totals:         0       0       0       0       0       0       0
  8630 ;;Total ram usage:        0 bytes
  8631 ;; Hardware stack levels used:    1
  8632 ;; This function calls:
  8633 ;;		Nothing
  8634 ;; This function is called by:
  8635 ;;		_WriteDataXLCD
  8636 ;;		i2_BusyXLCD
  8637 ;;		i2_SetDDRamAddr
  8638 ;;		i2_WriteCmdXLCD
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642                           	psect	text49
  8643  002810                     __ptext49:
  8644                           	opt stack 0
  8645  002810                     i2_DelayFor18TCY:
  8646                           	opt stack 23
  8647                           
  8648                           ;main.c: 104: _delay((unsigned long)((20)*(4000000/4000000.0)));
  8649                           
  8650                           ;incstack = 0
  8651  002810  0E06               	movlw	6
  8652  002812                     i2u690_47:
  8653  002812  2EE8               	decfsz	wreg,f,c
  8654  002814  D7FE               	bra	i2u690_47
  8655  002816  D000               	nop2	
  8656  002818  0012               	return		;funcret
  8657  00281A                     __end_ofi2_DelayFor18TCY:
  8658                           	opt stack 0
  8659                           pclatu	equ	0xFFB
  8660                           pclath	equ	0xFFA
  8661                           tblptru	equ	0xFF8
  8662                           tblptrh	equ	0xFF7
  8663                           tblptrl	equ	0xFF6
  8664                           tablat	equ	0xFF5
  8665                           prodh	equ	0xFF4
  8666                           prodl	equ	0xFF3
  8667                           intcon	equ	0xFF2
  8668                           indf0	equ	0xFEF
  8669                           postinc0	equ	0xFEE
  8670                           fsr0h	equ	0xFEA
  8671                           fsr0l	equ	0xFE9
  8672                           wreg	equ	0xFE8
  8673                           postdec1	equ	0xFE5
  8674                           fsr1h	equ	0xFE2
  8675                           fsr1l	equ	0xFE1
  8676                           indf2	equ	0xFDF
  8677                           postinc2	equ	0xFDE
  8678                           postdec2	equ	0xFDD
  8679                           fsr2h	equ	0xFDA
  8680                           fsr2l	equ	0xFD9
  8681                           status	equ	0xFD8
  8682                           pclatu	equ	0xFFB
  8683                           pclath	equ	0xFFA
  8684                           tblptru	equ	0xFF8
  8685                           tblptrh	equ	0xFF7
  8686                           tblptrl	equ	0xFF6
  8687                           tablat	equ	0xFF5
  8688                           prodh	equ	0xFF4
  8689                           prodl	equ	0xFF3
  8690                           intcon	equ	0xFF2
  8691                           indf0	equ	0xFEF
  8692                           postinc0	equ	0xFEE
  8693                           fsr0h	equ	0xFEA
  8694                           fsr0l	equ	0xFE9
  8695                           wreg	equ	0xFE8
  8696                           postdec1	equ	0xFE5
  8697                           fsr1h	equ	0xFE2
  8698                           fsr1l	equ	0xFE1
  8699                           indf2	equ	0xFDF
  8700                           postinc2	equ	0xFDE
  8701                           postdec2	equ	0xFDD
  8702                           fsr2h	equ	0xFDA
  8703                           fsr2l	equ	0xFD9
  8704                           status	equ	0xFD8
  8705                           
  8706                           	psect	rparam
  8707  0000                     pclatu	equ	0xFFB
  8708                           pclath	equ	0xFFA
  8709                           tblptru	equ	0xFF8
  8710                           tblptrh	equ	0xFF7
  8711                           tblptrl	equ	0xFF6
  8712                           tablat	equ	0xFF5
  8713                           prodh	equ	0xFF4
  8714                           prodl	equ	0xFF3
  8715                           intcon	equ	0xFF2
  8716                           indf0	equ	0xFEF
  8717                           postinc0	equ	0xFEE
  8718                           fsr0h	equ	0xFEA
  8719                           fsr0l	equ	0xFE9
  8720                           wreg	equ	0xFE8
  8721                           postdec1	equ	0xFE5
  8722                           fsr1h	equ	0xFE2
  8723                           fsr1l	equ	0xFE1
  8724                           indf2	equ	0xFDF
  8725                           postinc2	equ	0xFDE
  8726                           postdec2	equ	0xFDD
  8727                           fsr2h	equ	0xFDA
  8728                           fsr2l	equ	0xFD9
  8729                           status	equ	0xFD8
  8730                           
  8731                           	psect	temp
  8732  00007F                     btemp:
  8733                           	opt stack 0
  8734  00007F                     	ds	1
  8735  0000                     int$flags	set	btemp
  8736  0000                     wtemp6	set	btemp+1
  8737                           pclatu	equ	0xFFB
  8738                           pclath	equ	0xFFA
  8739                           tblptru	equ	0xFF8
  8740                           tblptrh	equ	0xFF7
  8741                           tblptrl	equ	0xFF6
  8742                           tablat	equ	0xFF5
  8743                           prodh	equ	0xFF4
  8744                           prodl	equ	0xFF3
  8745                           intcon	equ	0xFF2
  8746                           indf0	equ	0xFEF
  8747                           postinc0	equ	0xFEE
  8748                           fsr0h	equ	0xFEA
  8749                           fsr0l	equ	0xFE9
  8750                           wreg	equ	0xFE8
  8751                           postdec1	equ	0xFE5
  8752                           fsr1h	equ	0xFE2
  8753                           fsr1l	equ	0xFE1
  8754                           indf2	equ	0xFDF
  8755                           postinc2	equ	0xFDE
  8756                           postdec2	equ	0xFDD
  8757                           fsr2h	equ	0xFDA
  8758                           fsr2l	equ	0xFD9
  8759                           status	equ	0xFD8


Data Sizes:
    Strings     65
    Constant    118
    Data        12
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    126     126
    BANK0           128     35      94
    BANK1           256      6       6
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_10(CODE[7]), TIMER1@time(BANK0[20]), print_data@temp(COMRAM[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_9(CODE[8]), STR_8(CODE[9]), STR_2(CODE[12]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> TIMER1@str_tmp(BANK0[10]), TIMER1@time(BANK0[20]), print_data@str_temp2(COMRAM[3]), print_data@temp(COMRAM[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 14
		 -> TIMER1@str_tmp(BANK0[10]), STR_7(CODE[5]), STR_6(CODE[4]), STR_5(CODE[14]), 
		 -> STR_4(CODE[4]), STR_3(CODE[10]), print_data@str_temp2(COMRAM[3]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TIMER1 in COMRAM

    _TIMER1->_sprintf
    i2_initXLCD->i2_OpenXLCD
    i2_OpenXLCD->i2_SetDDRamAddr
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    ___ftadd->_fround
    _read_temperature->___ftdiv
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _putsXLCD->_WriteDataXLCD

Critical Paths under _main in BANK0

    _initXLCD->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _initADC->_OpenADC

Critical Paths under _TIMER1 in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_initADC

Critical Paths under _TIMER1 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TIMER1 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TIMER1 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TIMER1 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TIMER1 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     813
                        _CloseTimer1
                            _OpenI2C
                            _initADC
                          _initTimer
                           _initXLCD
 ---------------------------------------------------------------------------------
 (1) _initXLCD                                             0     0      0     176
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _OpenXLCD                                             1     1      0     132
                                             34 BANK0      1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteCmdXLCD                                         1     1      0      44
                                             30 BANK0      1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _SetDDRamAddr                                         4     4      0      44
                                             30 BANK0      4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayPORXLCD                                         1     1      0       0
                                             30 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Delay10KTCYx                                         2     2      0      22
                                             30 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              6     6      0     517
                                              0 BANK1      6     6      0
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     397
                                             30 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     120
                                             30 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _CloseTimer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _TIMER1                                              48    48      0   62584
                                            108 COMRAM    18    18      0
                                              0 BANK0     30    30      0
                           _putsXLCD
                   _read_temperature
                            _sprintf
                         i2_initXLCD
 ---------------------------------------------------------------------------------
 (6) i2_initXLCD                                           0     0      0     176
                         i2_BusyXLCD
                         i2_OpenXLCD
                     i2_WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (7) i2_OpenXLCD                                           1     1      0     132
                                              4 COMRAM     1     1      0
                         i2_BusyXLCD
                     i2_Delay10KTCYx
                     i2_DelayPORXLCD
                     i2_SetDDRamAddr
                     i2_WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (7) i2_WriteCmdXLCD                                       1     1      0      44
                                              0 COMRAM     1     1      0
                    i2_DelayFor18TCY
 ---------------------------------------------------------------------------------
 (8) i2_SetDDRamAddr                                       4     4      0      44
                                              0 COMRAM     4     4      0
                    i2_DelayFor18TCY
 ---------------------------------------------------------------------------------
 (8) i2_DelayPORXLCD                                       1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2_Delay10KTCYx                                       2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             48    36     12   50679
                                             63 COMRAM    45    33     12
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (7) _scale                                                7     4      3   11907
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _fround                                              10     7      3   11709
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (7) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (7) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (7) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     480
                                             35 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (6) _read_temperature                                     0     0      0   10972
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                           ___awtoft
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            _ReadADC (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    3063
                                             35 COMRAM    15     9      6
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) _ReadADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _putsXLCD                                             2     0      2     621
                                              1 COMRAM     2     0      2
                      _WriteDataXLCD
                         i2_BusyXLCD
 ---------------------------------------------------------------------------------
 (8) i2_BusyXLCD                                           0     0      0       0
                    i2_DelayFor18TCY
 ---------------------------------------------------------------------------------
 (7) _WriteDataXLCD                                        1     1      0      44
                                              0 COMRAM     1     1      0
                    i2_DelayFor18TCY
 ---------------------------------------------------------------------------------
 (8) i2_DelayFor18TCY                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CloseTimer1
   _OpenI2C
   _initADC
     _OpenADC
   _initTimer
   _initXLCD
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _Delay10KTCYx
       _DelayPORXLCD
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY

 _TIMER1 (ROOT)
   _putsXLCD
     _WriteDataXLCD
       i2_DelayFor18TCY
     i2_BusyXLCD
       i2_DelayFor18TCY
   _read_temperature
     _BusyADC
     _ConvertADC
     _ReadADC
     ___awtoft
       _ReadADC (ARG)
       ___ftpack (ARG)
     ___ftdiv
       _ReadADC (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ReadADC (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       _ReadADC (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ReadADC (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       _ReadADC (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ReadADC (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         _ReadADC (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ReadADC (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ReadADC (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   i2_initXLCD
     i2_BusyXLCD
       i2_DelayFor18TCY
     i2_OpenXLCD
       i2_BusyXLCD
         i2_DelayFor18TCY
       i2_Delay10KTCYx
       i2_DelayPORXLCD
       i2_SetDDRamAddr
         i2_DelayFor18TCY
       i2_WriteCmdXLCD
         i2_DelayFor18TCY
     i2_WriteCmdXLCD
       i2_DelayFor18TCY

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      6       6       7        2.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80     23      5E       5       73.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7E      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E2      15        0.0%
DATA                 0      0      E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Nov  4 23:17:54 2017

                        l9 25CC                _SSPSTATbits 000FC7               ___awdiv@sign 000C  
      ___wmul@multiplicand 0011                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$XT 000000               ___ftadd@exp1 0039               ___ftadd@exp2 0038  
             ___ftadd@sign 0037                        l310 1F02                        l304 1EE2  
                      l313 1F12                        l307 1EF2                        l316 1F22  
                      l440 2306                        l184 2720                        l273 26D2  
                      l298 1EC6                        _GIE 007F97               __CFG_CPB$OFF 000000  
                      _PR2 000FCB               __CFG_CPD$OFF 000000                        _PSA 007EAB  
                      i2l9 2606                        _min 00A4                        _sec 00A5  
    __size_of_WriteCmdXLCD 0044               ___awmod@sign 0006                        wreg 000FE8  
             __CFG_LVP$OFF 000000               ___ftdiv@cntr 002D               ___ftdiv@sign 0032  
             __CFG_WDT$OFF 000000                       l1339 273C                       STR_1 06AF  
                     STR_2 0685                       STR_3 0691                       STR_4 06B4  
                     STR_5 0677                       STR_7 06AA                       STR_8 0688  
                     STR_9 069B                       _T0CS 007EAD                       _LATA 000F89  
                     _LATB 000F8A                       u4110 1ED0                       u3555 23DC  
                     _PEIE 007F96                       u6857 27B0                       u6867 2744  
                     u6877 2808                       _TMR1 000FCE                 i2_initXLCD 2756  
                     _main 26B0               ___ftpack@arg 0001                       _hour 00A3  
                     _msec 00A6               ___ftpack@exp 0004                       _time 0080  
                     fsr0h 000FEA                       fsr1h 000FE2                       indf0 000FEF  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 007F  
   __size_of_WriteDataXLCD 003E                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000               _sprintf$3120 0052  
      __end_of_CloseTimer1 2820              __CFG_MCLRE$ON 000000               ___ftmul@cntr 0022  
             ___param_bank 000000               ___ftmul@sign 0023            __end_of_BusyADC 2806  
          __end_of_ReadADC 27EE            __end_of_OpenI2C 271A            __end_of_OpenADC 230A  
             ___fttol@exp1 0032               ___fttol@lval 002E               _WriteCmdXLCD 246C  
         ?i2_DelayFor18TCY 0001              ?_SetDDRamAddr 0001                      ?_main 0001  
          __end_of___awdiv 20EC            __end_of___ftadd 1790                      STR_10 06A3  
          __end_of___awmod 21DE            __end_of___ftdiv 1DDE            __end_of___ftneg 26F8  
          __end_of___lldiv 216E            __end_of___ftmul 1CF8            ___awdiv@divisor 0009  
                    _T1CON 000FCD            __end_of___llmod 2244            __end_of___ftsub 24F0  
          __end_of___fttol 1C04                      _T0PS0 007EA8                      _T0PS1 007EA9  
                    _T0PS2 007EAA    __size_ofi2_WriteCmdXLCD 003E                      i2l310 1FA6  
                    i2l304 1F86                      i2l313 1FB6                      i2l307 1F96  
                    i2l316 1FC6                      i2l229 2248                      i2l184 275C  
                    i2l338 239A                      i2l339 2368                      i2l267 1AC4  
                    i2l298 1F6C            ___awdiv@counter 000B                      _TMR1H 000FCF  
                    _TMR1L 000FCE                      _PORTB 000F81                      _TRISB 000F93  
                    _TRISC 000F94      __size_of_Delay10KTCYx 001E              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000               ___lltoft@exp 0011             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initADC 2652             __CFG_EBTRB$OFF 000000  
            ___awtoft@sign 000C            __end_of_dpowers 0629                      _scale 0F8A  
          __end_of_isdigit 2792              ___ftpack@sign 0005                 _ConvertADC 2820  
           __CFG_BOREN$OFF 000000                      pclath 000FFA                ?i2_BusyXLCD 0001  
                    tablat 000FF5         i2Delay10KTCYx@unit 0002                      status 000FD8  
                    wtemp6 0080            __end_of_sprintf 0F8A   __end_of_read_temperature 22A8  
              ?i2_OpenXLCD 0001            __initialization 256C               __end_of_main 26D4  
         __end_of_BusyXLCD 25E0           ??i2_SetDDRamAddr 0001               _Delay10KTCYx 2738  
    __size_of_DelayPORXLCD 0014             ??_SetDDRamAddr 00CD           __end_of_OpenXLCD 1F34  
                   ??_main 00D2              ___fttol@sign1 002D    __size_ofi2_Delay10KTCYx 0016  
            __activetblptr 000002              _WriteDataXLCD 252E       __size_of__tdiv_to_l_ 0132  
           _converted_temp 009E                     _ADCON0 000FC2                     _ADCON1 000FC1  
                   _ADCON2 000FC0           ___llmod@dividend 000E                     ?_scale 0024  
                   _ADRESH 000FC4                     _ADRESL 000FC3                     _CCPR1L 000FBE  
                   _T08BIT 007EAE           ___awdiv@dividend 0007           __end_of___awtoft 268A  
         __end_of___ftpack 1E8C           __end_of___lltoft 2366                OpenI2C@slew 00CD  
                   i2l1110 0B8C                     i2l1112 0C3E                     i2l1104 0B30  
                   i2l1121 0DD6                     i2l1113 0C28                     i2l1122 0DC0  
                   i2l1051 1192                     i2l1131 0EAA                     i2l1115 0C62  
                   i2l1052 10BE                     i2l1124 0E1A                     i2l1116 0C66  
                   i2l1045 14D8                     i2l1133 0F52                     i2l1125 0E32  
                   i2l1117 0C88                     i2l1109 0C1E                     i2l1134 0ECC  
                   i2l1118 0DB6                     i2l1062 06C6                     i2l1055 116E  
                   i2l1119 0CD8                     i2l1063 06E2                     i2l1312 20CA  
                   i2l1048 15A4                     i2l1056 12BE                     i2l1072 0764  
                   i2l1064 0758                     i2l1313 20D4                     i2l1305 207C  
                   i2l1321 21A4                     i2l1129 0E8A                     i2l1073 0866  
                   i2l1065 0742                     i2l1314 20E2                     i2l1306 208C  
                   i2l1322 219C                     i2l1058 136E                     i2l1090 094A  
                   i2l1082 0820                     i2l1066 070C                     i2l1411 1660  
                   i2l1091 09AE                     i2l1083 07EE                     i2l1308 20AA  
                   i2l1076 0768                     i2l1333 2666                     i2l1421 16BC  
                   i2l1501 1BD6                     i2l1309 20A2                     i2l1325 21BC  
                   i2l1093 09D2                     i2l1069 0832                     i2l1077 0790  
                   i2l1430 16FA                     i2l1422 16B2                     i2l1502 1BCA  
                   i2l1350 19AE                     i2l1326 21C6                     i2l1318 2182  
                   i2l1086 0DE0                     i2l1094 0A10                     i2l1078 079E  
                   i2l1431 16F0                     i2l1407 1636                     i2l1351 199E  
                   i2l1327 21D4                     i2l1319 218E                     i2l1095 0ACC  
                   i2l1087 087A                     i2l1079 079A                     i2l1440 1D20  
                   i2l1416 16C6                     i2l1504 1BF2                     i2l1344 18E0  
                   i2l1088 08BA                     i2l1433 171E                     i2l1442 1D48  
                   i2l1434 173A                     i2l1346 18FE                     i2l1450 17E8  
                   i2l1098 0A78                     i2l1443 1D86                     i2l1435 176A  
                   i2l1347 1940                     i2l1451 1822                     i2l1339 2794  
                   i2l1380 1E24                     i2l1444 1DAC                     i2l1356 19D2  
                   i2l1348 1970                     i2l1460 18AA                     i2l1452 184A  
                   i2l1508 278A                     i2l1357 19C6                     i2l1461 189E  
                   i2l1382 1E62                     i2l1534 211A                     i2l1454 1886  
                   i2l1383 1E58                     i2l1535 210E                     i2l1455 1876  
                   i2l1376 1E06                     i2l1472 1C2C                     i2l1544 21FC  
                   i2l1448 17BC                     i2l1377 1DFC                     i2l1465 2008  
                   i2l1545 21F0                     i2l1474 1C54                     i2l1466 2038  
                   i2l1538 214E                     i2l1379 1E3A                     i2l1475 1C86  
                   i2l1483 26EA                     i2l1539 215C                     i2l1555 231C  
                   i2l5011 0B34                     i2l1476 1C96                     i2l1548 2224  
                   i2l1556 2310                     i2l1493 1B3C                     i2l1549 2232  
                   i2l5101 0E36                     i2l1478 1CAE                     i2l1479 1CBE  
                   i2l1495 1BB2                     i2l1496 1BA2                     i2l1489 24C6  
                   i2l5131 0F4E                     i2l5127 0ECC                     i2l5039 0C28  
                   i2l3765 2064                     i2l4923 07EE                     i2l4991 0A54  
                   i2l4983 0A10                     u431_41 17CC                ?i2_initXLCD 0001  
                   u356_41 15F4                     u445_41 1D08                     u357_41 1608  
                   u429_41 17A0                     u447_41 1D30                     u456_41 1B20  
                   u377_41 1C14                     u379_41 1C3C                _CloseTimer1 281A  
                   _TIMER1 0008                     _TMR0IE 007F95                     _TMR1IE 007CE8  
                   _TMR1IF 007CF0                     _TMR0ON 007EAF                     _SSPADD 000FC8  
                   _SSPBUF 000FC9                  ??_BusyADC 0001                  ??_ReadADC 0003  
                ??_OpenI2C 00CE                  ??_OpenADC 00CF               _DelayPORXLCD 27A8  
           __CFG_XINST$OFF 000000           __end_of__powers_ 0650                     ___ftge 1FD8  
                   ___wmul 268A    __size_ofi2_DelayPORXLCD 0010                  ??___awdiv 000B  
                ??___ftadd 0034             __CFG_STVREN$ON 000000                  ??___awmod 0005  
                ??___ftdiv 002A                  ??___ftneg 0004                  ??___lldiv 0009  
                ??___ftmul 001B                  ??___llmod 0016                  ??___ftsub 0040  
                ??___fttol 0028           __end_of_initXLCD 2738                     _fround 1392  
                   clear_0 2592           ___awdiv@quotient 000D            ___awmod@divisor 0003  
                   _result 00A9            ___awmod@counter 0005        __size_ofi2_BusyXLCD 003A  
           ?_WriteDataXLCD 0001                  ??_initADC 00D2      ___ftmul@f3_as_product 001F  
                ??_isdigit 0001        __size_ofi2_OpenXLCD 00A4               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
         __end_of_putsXLCD 23C2                  ??_sprintf 004C                ?_ConvertADC 0001  
               __accesstop 0080    __end_of__initialization 2598            __CFG_PBADEN$OFF 000000  
               ___ftadd@f1 002E                 ___ftadd@f2 0031                 ___ftge@ff1 0001  
               ___ftge@ff2 0004              ___rparam_used 000001                 ___ftdiv@f1 0024  
               ___ftdiv@f2 0027                 ___ftdiv@f3 002E                 ___ftneg@f1 0001  
               ___awtoft@c 0009                 ___ftmul@f1 0015                 ___ftmul@f2 0018  
               ___ftsub@f1 003A                 ___ftsub@f2 003D                 ___fttol@f1 0024  
           __pcstackCOMRAM 0001               __pidataBANK0 27EE                 ___lltoft@c 0009  
            __end_of_scale 1392        __size_ofi2_initXLCD 001E             i2_WriteCmdXLCD 24F0  
               __div_to_l_ 18C2            __div_to_l_@exp1 000C            __div_to_l_@cntr 000B  
                  ??_scale 0027     __size_of_DelayFor18TCY 000A            __div_to_l_@quot 0007  
               __pbssBANK0 0080                  ?_BusyXLCD 0001            WriteCmdXLCD@cmd 00CD  
                  ?_TIMER1 0001       __end_of_SetDDRamAddr 241A         __size_of_initTimer 0014  
                ?_OpenXLCD 0001              __div_to_l_@f1 0001              __div_to_l_@f2 0004  
                  ?___ftge 0001          WriteDataXLCD@data 0001                    ?___wmul 000F  
                  _CCP1CON 000FBD                 _block_size 00DC     __end_ofi2_WriteCmdXLCD 252E  
          ??_WriteDataXLCD 0001                    ?_fround 0024        __size_of_ConvertADC 0004  
                ?___awtoft 0009                  ?___ftpack 0001                  ?___lltoft 0009  
           i2_Delay10KTCYx 2792              TIMER1@str_tmp 00C3                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7               ??i2_BusyXLCD 0001  
               ??_BusyXLCD 00CD                  ?_initXLCD 0001            __size_of_TIMER1 1B08  
                  _BusyADC 27FA                    _ReadADC 27E0               ??i2_OpenXLCD 0005  
               ??_OpenXLCD 00D1          ?_read_temperature 0001                    _OpenI2C 26F8  
                  _OpenADC 22A8          __end_of__npowers_ 0677                    __Hparam 0000  
               _scale$3119 0027                    __Lparam 0000         ??_read_temperature 0033  
           i2_DelayPORXLCD 27D0            __size_of___ftge 0090                    ___awdiv 2068  
            _DelayFor18TCY 2806          i2OpenXLCD@lcdtype 0005                    ___ftadd 15E4  
                  ___awmod 216E                    ___ftdiv 1CF8                    ___ftneg 26D4  
                  ___lldiv 20EC            __size_of___wmul 0026                    ___ftmul 1C04  
                  ___llmod 21DE                    ___ftsub 24B0                    ___fttol 1B10  
                ?_putsXLCD 0002               __psmallconst 0600     __end_ofi2_Delay10KTCYx 27A8  
          ?i2_WriteCmdXLCD 0001                    __pcinit 256C                 ??___awtoft 000C  
               ??___ftpack 0006            __size_of_fround 0252                    __ramtop 0600  
               ??___lltoft 000D                    __ptext0 26B0                    __ptext1 271A  
                  __ptext2 1E8C                    __ptext3 246C                    __ptext4 23C2  
                  __ptext5 27A8                    __ptext6 2738                    __ptext7 25A6  
                  __ptext8 2806                    __ptext9 27BC         __end_ofi2_BusyXLCD 261A  
                  _initADC 261A                  _T1CONbits 000FCD                ?__div_to_l_ 0001  
        __end_of_initTimer 27D0                    _counter 00A1                    _dpowers 0601  
                _T2CONbits 000FCA                    _isdigit 2774           ___awmod@dividend 0001  
 __size_ofi2_DelayFor18TCY 000A         __end_ofi2_OpenXLCD 1FD8             OpenADC@config2 00CD  
                  _sprintf 06BA                    _str_tmp 0094             __pintcode_body 19EA  
     end_of_initialization 2598               ??i2_initXLCD 0006                 ??_initXLCD 00D2  
             ?_CloseTimer1 0001              __Lmediumconst 0000                    int_func 19EA  
          ___lldiv@divisor 0005     __end_ofi2_DelayPORXLCD 27E0            ___lldiv@counter 000D  
           ?_DelayFor18TCY 0001                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc2 000FDE                 ??_putsXLCD 0004  
           __tdiv_to_l_@f1 0001             __tdiv_to_l_@f2 0004            ?i2_Delay10KTCYx 0001  
            ??__tdiv_to_l_ 0007         __end_ofi2_initXLCD 2774                  _TRISAbits 000F92  
                _TRISCbits 000F94                  _TRISDbits 000F95      __size_of_SetDDRamAddr 0058  
             ??_ConvertADC 0001                ___ftdiv@exp 0031             __end_of_TIMER1 1B10  
      __size_of__div_to_l_ 0128            ?i2_DelayPORXLCD 0001                ___ftmul@exp 001E  
           __end_of___ftge 2068             __end_of___wmul 26B0         __end_of_ConvertADC 2824  
           __end_of_fround 15E4               _SetDDRamAddr 23C2         SetDDRamAddr@DDaddr 00D0  
      start_initialization 256C    __size_ofi2_SetDDRamAddr 0052        __end_of__tdiv_to_l_ 18C2  
          _eeprom_haddress 00A7            _eeprom_laddress 00A8          ??i2_DelayFor18TCY 0001  
                 ??_TIMER1 006D            ___llmod@divisor 0012          __size_of_BusyXLCD 003A  
          ___llmod@counter 0016            ??_DelayFor18TCY 00CD          __size_of_OpenXLCD 00A8  
                 ??___ftge 0007                   ??___wmul 0013              ?_WriteCmdXLCD 0001  
              __pdataBANK0 00D2           __CFG_LPT1OSC$OFF 000000                   ??_fround 0027  
            sprintf@tmpval 005F          initADC@portconfig 0105                 fround@prec 002D  
        __size_of___awtoft 0038          __size_of___ftpack 00AE          __size_of___lltoft 005C  
            __pcstackBANK0 00AF              __pcstackBANK1 0100               _isdigit$2678 0002  
              sprintf@flag 005B                sprintf@fval 0067                sprintf@prec 006A  
                 ?_BusyADC 0001                   ?_ReadADC 0001          __size_of_initXLCD 001E  
     __size_of_CloseTimer1 0006          OpenADC@portconfig 00CE                   ?_OpenI2C 00CD  
                 ?_OpenADC 00CD             putsXLCD@buffer 0002           ??i2_WriteCmdXLCD 0001  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008                 TIMER1@time 00AF  
           ??_WriteCmdXLCD 00CD                   ?___awdiv 0007                   ?___ftadd 002E  
                 ?___awmod 0001                   ?___ftdiv 0024                   ?___ftneg 0001  
                 ?___lldiv 0001                   ?___ftmul 0015                   ?___llmod 000E  
                 ?___ftsub 003A                  __npowers_ 0650                   ?___fttol 0024  
            ?_Delay10KTCYx 0001             initADC@channel 0100             initADC@config3 0101  
              __tdiv_to_l_ 1790          __size_of_putsXLCD 005C      __end_of_WriteDataXLCD 256C  
                 ?_initADC 0001               ??__div_to_l_ 0007  __size_of_read_temperature 0064  
              __smallconst 0600                   ?_isdigit 0001                  _initTimer 27BC  
                 ?_sprintf 0040             __size_of_scale 0408             ___wmul@product 0013  
            OpenADC@config 00D1                   _LATAbits 000F89                   _PIE1bits 000F9D  
            ?_DelayPORXLCD 0001           ??i2_Delay10KTCYx 0001                   i2u501_40 07CA  
                 i2u501_47 07C0                   i2u351_40 1E6C                   i2u511_40 08F2  
                 i2u511_45 08E8                   i2u360_40 1628                   i2u505_40 0816  
                 _PIR1bits 000F9E            OpenXLCD@lcdtype 00D1         __end_of__div_to_l_ 19EA  
                 i2u505_47 080C                   i2u370_40 16CE                   i2u419_40 2802  
                 i2u347_40 1DEE                   i2u363_40 1652                   i2u523_40 0B6C  
                 i2u515_40 09E2                   _PIR2bits 000FA1                   i2u444_40 19D8  
                 i2u540_40 0F62                   i2u516_40 0A20                   i2u373_40 1702  
                 i2u437_40 18B0                   i2u541_40 0F7C                   i2u366_40 1690  
                 i2u462_40 1BDC                   i2u526_40 0C4C                   i2u543_40 2392  
                 i2u527_40 0C5C                   i2u519_40 0A54                   i2u471_40 1F76  
                 i2u543_47 2388                   i2u544_40 23BA                   i2u392_40 21A8  
                 i2u536_40 0E6E                   i2u544_47 23B0                   i2u465_40 211E  
                 i2u458_40 1B5A                   i2u386_40 20AE                   i2u458_45 1B52  
                 i2u468_40 2200                   i2u396_45 2430                   i2u690_47 2812  
                 i2u688_47 27D6                   i2u689_47 279A           __CFG_WDTPS$32768 000000  
                _temp_size 00DA             ??_Delay10KTCYx 00CD                  _time_size 00D8  
               _ADCON0bits 000FC2          ___wmul@multiplier 000F             i2_SetDDRamAddr 241A  
         Delay10KTCYx@unit 00CE                 ?_initTimer 0001                  copy_data0 2580  
                 _BusyXLCD 25A6           OpenI2C@sync_mode 00CE           ??i2_DelayPORXLCD 0001  
       initADC@adc_config1 0103         initADC@adc_config2 0104             ??_DelayPORXLCD 00CD  
                 _OpenXLCD 1E8C           __size_of_BusyADC 000C           __size_of_ReadADC 000E  
                 __Hrparam 0000           __size_of_OpenI2C 0022           __size_of_OpenADC 0062  
                 __Lrparam 0000           __size_of___awdiv 0084           __size_of___ftadd 01AC  
         __size_of___awmod 0070           __size_of___ftdiv 00E6           __size_of___ftneg 0024  
         __size_of___lldiv 0082           __size_of___ftmul 00F4           __size_of___llmod 0066  
         __size_of___ftsub 0040           __size_of___fttol 00F4                   ___awtoft 2652  
                 ___ftpack 1DDE                _fround$3117 002A                _fround$3118 0027  
                 ___lltoft 230A     __end_ofi2_SetDDRamAddr 246C            i2_DelayFor18TCY 2810  
               sprintf@len 0055                 sprintf@exp 005D                 sprintf@val 0063  
         __size_of_initADC 0038           __size_of_isdigit 001E                   __ptext10 261A  
                 __ptext11 22A8                   __ptext20 2792                   __ptext12 26F8  
                 __ptext21 06BA                   __ptext13 281A                   __ptext30 230A  
                 __ptext22 0F8A                   __ptext31 21DE                   __ptext23 2774  
                 __ptext15 2756                   __ptext40 1CF8                   __ptext32 20EC  
                 __ptext24 1392                   __ptext16 1F34                   __ptext41 2652  
                 __ptext33 1B10                   __ptext25 268A                   __ptext17 24F0  
                 __ptext42 1DDE                   __ptext34 24B0                   __ptext26 216E  
                 __ptext18 241A                   __ptext43 27E0                   __ptext35 15E4  
                 __ptext27 2068                   __ptext19 27D0                   __ptext44 2820  
                 __ptext36 26D4                   __ptext28 1790                   __ptext45 27FA  
                 __ptext37 1FD8                   __ptext29 18C2                   __ptext46 2366  
                 __ptext38 2244                   __ptext47 25E0                   __ptext39 1C04  
                 __ptext48 252E                   __ptext49 2810                   __powers_ 0629  
     __end_of_WriteCmdXLCD 24B0           __size_of_sprintf 08D0                   _initXLCD 271A  
                 _max_temp 00D5              __size_of_main 0024                   _min_temp 00D2  
                 int$flags 007F                   _putsXLCD 2366                   initADC@i 0102  
         _read_temperature 2244            ?i2_SetDDRamAddr 0001                 _INTCONbits 000FF2  
              ??_initTimer 00CD                   isdigit@c 0003                   scale@scl 002A  
     __end_of_Delay10KTCYx 2756                   intlevel2 0000                  sprintf@ap 0059  
                sprintf@cp 0057           __tdiv_to_l_@exp1 000F                  sprintf@sp 0040  
         __tdiv_to_l_@cntr 000E           __tdiv_to_l_@quot 000A           ___lldiv@dividend 0001  
    __end_of_DelayFor18TCY 2810    __end_ofi2_DelayFor18TCY 281A               ?__tdiv_to_l_ 0001  
                 sprintf@c 006C                   sprintf@f 0042       __end_of_DelayPORXLCD 27BC  
     i2SetDDRamAddr@DDaddr 0004           ___lldiv@quotient 0009                _SSPCON1bits 000FC6  
              _SSPCON2bits 000FC5                 i2_BusyXLCD 25E0              ??_CloseTimer1 00CD  
        i2WriteCmdXLCD@cmd 0001                 i2_OpenXLCD 1F34  
