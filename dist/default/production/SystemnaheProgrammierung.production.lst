

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Nov  3 12:01:35 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73  0000                     
    74                           ; Version 1.44
    75                           ; Generated 14/09/2017 GMT
    76                           ; 
    77                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC18F4520 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     
   109                           	psect	idataBANK0
   110  002C86                     __pidataBANK0:
   111                           	opt stack 0
   112                           
   113                           ;initializer for _min_temp
   114  002C86  00                 	db	0
   115  002C87  90                 	db	144
   116  002C88  41                 	db	65
   117                           
   118                           ;initializer for _max_temp
   119  002C89  00                 	db	0
   120  002C8A  94                 	db	148
   121  002C8B  41                 	db	65
   122                           
   123                           ;initializer for _time_size
   124  002C8C  0003               	dw	3
   125                           
   126                           ;initializer for _temp_size
   127  002C8E  0003               	dw	3
   128                           
   129                           ;initializer for _block_size
   130  002C90  0006               	dw	6
   131                           
   132                           	psect	smallconst
   133  000600                     __psmallconst:
   134                           	opt stack 0
   135  000600  00                 	db	0
   136  000601                     _dpowers:
   137                           	opt stack 0
   138  000601  0001               	dw	1
   139  000603  0000               	dw	0
   140  000605  000A               	dw	10
   141  000607  0000               	dw	0
   142  000609  0064               	dw	100
   143  00060B  0000               	dw	0
   144  00060D  03E8               	dw	1000
   145  00060F  0000               	dw	0
   146  000611  2710               	dw	10000
   147  000613  0000               	dw	0
   148  000615  86A0               	dw	34464
   149  000617  0001               	dw	1
   150  000619  4240               	dw	16960
   151  00061B  000F               	dw	15
   152  00061D  9680               	dw	38528
   153  00061F  0098               	dw	152
   154  000621  E100               	dw	57600
   155  000623  05F5               	dw	1525
   156  000625  CA00               	dw	51712
   157  000627  3B9A               	dw	15258
   158  000629                     __end_of_dpowers:
   159                           	opt stack 0
   160  000629                     __powers_:
   161                           	opt stack 0
   162  000629  00                 	db	0
   163  00062A  80                 	db	128
   164  00062B  3F                 	db	63
   165  00062C  00                 	db	0
   166  00062D  20                 	db	32
   167  00062E  41                 	db	65
   168  00062F  00                 	db	0
   169  000630  C8                 	db	200
   170  000631  42                 	db	66
   171  000632  00                 	db	0
   172  000633  7A                 	db	122
   173  000634  44                 	db	68
   174  000635  40                 	db	64
   175  000636  1C                 	db	28
   176  000637  46                 	db	70
   177  000638  50                 	db	80
   178  000639  C3                 	db	195
   179  00063A  47                 	db	71
   180  00063B  24                 	db	36
   181  00063C  74                 	db	116
   182  00063D  49                 	db	73
   183  00063E  97                 	db	151
   184  00063F  18                 	db	24
   185  000640  4B                 	db	75
   186  000641  BC                 	db	188
   187  000642  BE                 	db	190
   188  000643  4C                 	db	76
   189  000644  6B                 	db	107
   190  000645  6E                 	db	110
   191  000646  4E                 	db	78
   192  000647  03                 	db	3
   193  000648  15                 	db	21
   194  000649  50                 	db	80
   195  00064A  79                 	db	121
   196  00064B  AD                 	db	173
   197  00064C  60                 	db	96
   198  00064D  F3                 	db	243
   199  00064E  49                 	db	73
   200  00064F  71                 	db	113
   201  000650                     __end_of__powers_:
   202                           	opt stack 0
   203  000650                     __npowers_:
   204                           	opt stack 0
   205  000650  00                 	db	0
   206  000651  80                 	db	128
   207  000652  3F                 	db	63
   208  000653  CD                 	db	205
   209  000654  CC                 	db	204
   210  000655  3D                 	db	61
   211  000656  D7                 	db	215
   212  000657  23                 	db	35
   213  000658  3C                 	db	60
   214  000659  12                 	db	18
   215  00065A  83                 	db	131
   216  00065B  3A                 	db	58
   217  00065C  B7                 	db	183
   218  00065D  D1                 	db	209
   219  00065E  38                 	db	56
   220  00065F  C6                 	db	198
   221  000660  27                 	db	39
   222  000661  37                 	db	55
   223  000662  38                 	db	56
   224  000663  86                 	db	134
   225  000664  35                 	db	53
   226  000665  C0                 	db	192
   227  000666  D6                 	db	214
   228  000667  33                 	db	51
   229  000668  CC                 	db	204
   230  000669  2B                 	db	43
   231  00066A  32                 	db	50
   232  00066B  70                 	db	112
   233  00066C  89                 	db	137
   234  00066D  30                 	db	48
   235  00066E  E7                 	db	231
   236  00066F  DB                 	db	219
   237  000670  2E                 	db	46
   238  000671  E5                 	db	229
   239  000672  3C                 	db	60
   240  000673  1E                 	db	30
   241  000674  42                 	db	66
   242  000675  A2                 	db	162
   243  000676  0D                 	db	13
   244  000677                     __end_of__npowers_:
   245                           	opt stack 0
   246  0000                     _TRISDbits	set	3989
   247  0000                     _CCPR1L	set	4030
   248  0000                     _PR2	set	4043
   249  0000                     _T2CONbits	set	4042
   250  0000                     _CCP1CON	set	4029
   251  0000                     _TMR1L	set	4046
   252  0000                     _TMR1H	set	4047
   253  0000                     _T1CON	set	4045
   254  0000                     _T1CONbits	set	4045
   255  0000                     _SSPCON1bits	set	4038
   256  0000                     _TRISCbits	set	3988
   257  0000                     _SSPSTAT	set	4039
   258  0000                     _SSPCON2	set	4037
   259  0000                     _SSPBUF	set	4041
   260  0000                     _PIR2bits	set	4001
   261  0000                     _SSPSTATbits	set	4039
   262  0000                     _SSPCON1	set	4038
   263  0000                     _ADRESL	set	4035
   264  0000                     _ADRESH	set	4036
   265  0000                     _INTCONbits	set	4082
   266  0000                     _ADCON1	set	4033
   267  0000                     _ADCON2	set	4032
   268  0000                     _ADCON0	set	4034
   269  0000                     _PIE1bits	set	3997
   270  0000                     _ADCON0bits	set	4034
   271  0000                     _TRISB	set	3987
   272  0000                     _PIR1bits	set	3998
   273  0000                     _SSPADD	set	4040
   274  0000                     _TRISC	set	3988
   275  0000                     _LATB	set	3978
   276  0000                     _LATA	set	3977
   277  0000                     _TRISAbits	set	3986
   278  0000                     _SSPCON2bits	set	4037
   279  0000                     _PORTB	set	3969
   280  0000                     _LATAbits	set	3977
   281  000677  53                 	db	83	;'S'
   282  000678  48                 	db	72	;'H'
   283  000679  4F                 	db	79	;'O'
   284  00067A  57                 	db	87	;'W'
   285  00067B  20                 	db	32
   286  00067C  41                 	db	65	;'A'
   287  00067D  4C                 	db	76	;'L'
   288  00067E  4C                 	db	76	;'L'
   289  00067F  20                 	db	32
   290  000680  44                 	db	68	;'D'
   291  000681  41                 	db	65	;'A'
   292  000682  54                 	db	84	;'T'
   293  000683  41                 	db	65	;'A'
   294  000684  00                 	db	0
   295  000685                     STR_2:
   296  000685  25                 	db	37
   297  000686  73                 	db	115	;'s'
   298  000687  20                 	db	32
   299  000688  25                 	db	37
   300  000689  64                 	db	100	;'d'
   301  00068A  3A                 	db	58	;':'
   302  00068B  25                 	db	37
   303  00068C  64                 	db	100	;'d'
   304  00068D  3A                 	db	58	;':'
   305  00068E  25                 	db	37
   306  00068F  64                 	db	100	;'d'
   307  000690  00                 	db	0
   308  000691                     STR_10:
   309  000691  6D                 	db	109	;'m'
   310  000692  65                 	db	101	;'e'
   311  000693  6D                 	db	109	;'m'
   312  000694  6F                 	db	111	;'o'
   313  000695  72                 	db	114	;'r'
   314  000696  79                 	db	121	;'y'
   315  000697  20                 	db	32
   316  000698  66                 	db	102	;'f'
   317  000699  75                 	db	117	;'u'
   318  00069A  6C                 	db	108	;'l'
   319  00069B  6C                 	db	108	;'l'
   320  00069C  00                 	db	0
   321  00069D                     STR_3:
   322  00069D  53                 	db	83	;'S'
   323  00069E  48                 	db	72	;'H'
   324  00069F  4F                 	db	79	;'O'
   325  0006A0  57                 	db	87	;'W'
   326  0006A1  20                 	db	32
   327  0006A2  44                 	db	68	;'D'
   328  0006A3  41                 	db	65	;'A'
   329  0006A4  54                 	db	84	;'T'
   330  0006A5  41                 	db	65	;'A'
   331  0006A6  00                 	db	0
   332  0006A7                     STR_9:
   333  0006A7  25                 	db	37
   334  0006A8  2E                 	db	46
   335  0006A9  32                 	db	50	;'2'
   336  0006AA  66                 	db	102	;'f'
   337  0006AB  20                 	db	32
   338  0006AC  25                 	db	37
   339  0006AD  73                 	db	115	;'s'
   340  0006AE  00                 	db	0
   341  0006AF                     STR_11:
   342  0006AF  28                 	db	40
   343  0006B0  6E                 	db	110	;'n'
   344  0006B1  75                 	db	117	;'u'
   345  0006B2  6C                 	db	108	;'l'
   346  0006B3  6C                 	db	108	;'l'
   347  0006B4  29                 	db	41
   348  0006B5  00                 	db	0
   349  0006B6  4E                 	db	78	;'N'
   350  0006B7  45                 	db	69	;'E'
   351  0006B8  58                 	db	88	;'X'
   352  0006B9  54                 	db	84	;'T'
   353  0006BA  00                 	db	0
   354  0006BB                     STR_1:
   355  0006BB  25                 	db	37
   356  0006BC  2E                 	db	46
   357  0006BD  32                 	db	50	;'2'
   358  0006BE  66                 	db	102	;'f'
   359  0006BF  00                 	db	0
   360  0006C0                     STR_4:
   361  0006C0  45                 	db	69	;'E'
   362  0006C1  4E                 	db	78	;'N'
   363  0006C2  44                 	db	68	;'D'
   364  0006C3  00                 	db	0
   365  0000                     
   366                           ; #config settings
   367  0006C4  00                 	db	0	; dummy byte at the end
   368  0000                     
   369                           	psect	cinit
   370  002A9E                     __pcinit:
   371                           	opt stack 0
   372  002A9E                     start_initialization:
   373                           	opt stack 0
   374  002A9E                     __initialization:
   375                           	opt stack 0
   376                           
   377                           ; Initialize objects allocated to BANK0 (12 bytes)
   378                           ; load TBLPTR registers with __pidataBANK0
   379  002A9E  0E86               	movlw	low __pidataBANK0
   380  002AA0  6EF6               	movwf	tblptrl,c
   381  002AA2  0E2C               	movlw	high __pidataBANK0
   382  002AA4  6EF7               	movwf	tblptrh,c
   383  002AA6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   384  002AA8  6EF8               	movwf	tblptru,c
   385  002AAA  EE00  F0B2         	lfsr	0,__pdataBANK0
   386  002AAE  EE10 F00C          	lfsr	1,12
   387  002AB2                     copy_data0:
   388  002AB2  0009               	tblrd		*+
   389  002AB4  CFF5 FFEE          	movff	tablat,postinc0
   390  002AB8  50E5               	movf	postdec1,w,c
   391  002ABA  50E1               	movf	fsr1l,w,c
   392  002ABC  E1FA               	bnz	copy_data0
   393                           
   394                           ; Clear objects allocated to BANK0 (15 bytes)
   395  002ABE  EE00  F0A3         	lfsr	0,__pbssBANK0
   396  002AC2  0E0F               	movlw	15
   397  002AC4                     clear_0:
   398  002AC4  6AEE               	clrf	postinc0,c
   399  002AC6  06E8               	decf	wreg,f,c
   400  002AC8  E1FD               	bnz	clear_0
   401  002ACA                     end_of_initialization:
   402                           	opt stack 0
   403  002ACA                     __end_of__initialization:
   404                           	opt stack 0
   405  002ACA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   406  002ACC  6EF8               	movwf	tblptru,c
   407  002ACE  0100               	movlb	0
   408  002AD0  EFCE  F00B         	goto	_main	;jump to C main() function
   409                           tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           postinc0	equ	0xFEE
   414                           wreg	equ	0xFE8
   415                           postdec1	equ	0xFE5
   416                           fsr1l	equ	0xFE1
   417                           
   418                           	psect	bssBANK0
   419  0000A3                     __pbssBANK0:
   420                           	opt stack 0
   421  0000A3                     _hour:
   422                           	opt stack 0
   423  0000A3                     	ds	1
   424  0000A4                     _min:
   425                           	opt stack 0
   426  0000A4                     	ds	1
   427  0000A5                     _sec:
   428                           	opt stack 0
   429  0000A5                     	ds	1
   430  0000A6                     _msec:
   431                           	opt stack 0
   432  0000A6                     	ds	1
   433  0000A7                     _eeprom_haddress:
   434                           	opt stack 0
   435  0000A7                     	ds	1
   436  0000A8                     _eeprom_laddress:
   437                           	opt stack 0
   438  0000A8                     	ds	1
   439  0000A9                     _result:
   440                           	opt stack 0
   441  0000A9                     	ds	6
   442  0000AF                     _converted_temp:
   443                           	opt stack 0
   444  0000AF                     	ds	3
   445                           tblptru	equ	0xFF8
   446                           tblptrh	equ	0xFF7
   447                           tblptrl	equ	0xFF6
   448                           tablat	equ	0xFF5
   449                           postinc0	equ	0xFEE
   450                           wreg	equ	0xFE8
   451                           postdec1	equ	0xFE5
   452                           fsr1l	equ	0xFE1
   453                           
   454                           	psect	dataBANK0
   455  0000B2                     __pdataBANK0:
   456                           	opt stack 0
   457  0000B2                     _min_temp:
   458                           	opt stack 0
   459  0000B2                     	ds	3
   460  0000B5                     _max_temp:
   461                           	opt stack 0
   462  0000B5                     	ds	3
   463  0000B8                     _time_size:
   464                           	opt stack 0
   465  0000B8                     	ds	2
   466  0000BA                     _temp_size:
   467                           	opt stack 0
   468  0000BA                     	ds	2
   469  0000BC                     _block_size:
   470                           	opt stack 0
   471  0000BC                     	ds	2
   472                           tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           wreg	equ	0xFE8
   478                           postdec1	equ	0xFE5
   479                           fsr1l	equ	0xFE1
   480                           
   481                           	psect	cstackBANK0
   482  000080                     __pcstackBANK0:
   483                           	opt stack 0
   484  000080                     ??_test_readwrite:
   485                           
   486                           ; 1 bytes @ 0x0
   487  000080                     	ds	2
   488  000082                     main@time:
   489                           	opt stack 0
   490                           
   491                           ; 20 bytes @ 0x2
   492  000082                     	ds	20
   493  000096                     main@str_tmp:
   494                           	opt stack 0
   495                           
   496                           ; 10 bytes @ 0x16
   497  000096                     	ds	10
   498  0000A0                     main@date:
   499                           	opt stack 0
   500                           
   501                           ; 3 bytes @ 0x20
   502  0000A0                     	ds	3
   503                           tblptru	equ	0xFF8
   504                           tblptrh	equ	0xFF7
   505                           tblptrl	equ	0xFF6
   506                           tablat	equ	0xFF5
   507                           postinc0	equ	0xFEE
   508                           wreg	equ	0xFE8
   509                           postdec1	equ	0xFE5
   510                           fsr1l	equ	0xFE1
   511                           
   512                           	psect	cstackCOMRAM
   513  000001                     __pcstackCOMRAM:
   514                           	opt stack 0
   515  000001                     ??_IdleI2C:
   516  000001                     ??_Delay10KTCYx:
   517  000001                     ??_SetDDRamAddr:
   518  000001                     ??_isdigit:
   519  000001                     ??_DelayPORXLCD:
   520  000001                     ?_ReadADC:
   521                           	opt stack 0
   522  000001                     ?___awmod:
   523                           	opt stack 0
   524  000001                     ?___ftpack:
   525                           	opt stack 0
   526  000001                     ?___ftneg:
   527                           	opt stack 0
   528  000001                     ?__tdiv_to_l_:
   529                           	opt stack 0
   530  000001                     ?__div_to_l_:
   531                           	opt stack 0
   532  000001                     ?___lldiv:
   533                           	opt stack 0
   534  000001                     WriteCmdXLCD@cmd:
   535                           	opt stack 0
   536  000001                     WriteDataXLCD@data:
   537                           	opt stack 0
   538  000001                     OpenADC@config2:
   539                           	opt stack 0
   540  000001                     OpenI2C@slew:
   541                           	opt stack 0
   542  000001                     OpenTimer1@config:
   543                           	opt stack 0
   544  000001                     OpenPWM1@period:
   545                           	opt stack 0
   546  000001                     SetOutputPWM1@outputmode:
   547                           	opt stack 0
   548  000001                     getsI2C@rdptr:
   549                           	opt stack 0
   550  000001                     WriteTimer1@timer1:
   551                           	opt stack 0
   552  000001                     SetDCPWM1@dutycycle:
   553                           	opt stack 0
   554  000001                     ___awmod@dividend:
   555                           	opt stack 0
   556  000001                     __div_to_l_@f1:
   557                           	opt stack 0
   558  000001                     ___ftpack@arg:
   559                           	opt stack 0
   560  000001                     __tdiv_to_l_@f1:
   561                           	opt stack 0
   562  000001                     ___ftge@ff1:
   563                           	opt stack 0
   564  000001                     ___ftneg@f1:
   565                           	opt stack 0
   566  000001                     ___lldiv@dividend:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0x0
   570  000001                     	ds	1
   571  000002                     OpenADC@portconfig:
   572                           	opt stack 0
   573  000002                     OpenI2C@sync_mode:
   574                           	opt stack 0
   575  000002                     WriteI2C@data_out:
   576                           	opt stack 0
   577  000002                     SetOutputPWM1@outputconfig:
   578                           	opt stack 0
   579  000002                     Delay10KTCYx@unit:
   580                           	opt stack 0
   581  000002                     _isdigit$2685:
   582                           	opt stack 0
   583  000002                     putsXLCD@buffer:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x1
   587  000002                     	ds	1
   588  000003                     ??_OpenADC:
   589  000003                     ??_ReadADC:
   590  000003                     ??_SetDCPWM1:
   591  000003                     EEAckPolling@control:
   592                           	opt stack 0
   593  000003                     getsI2C@length:
   594                           	opt stack 0
   595  000003                     isdigit@c:
   596                           	opt stack 0
   597  000003                     WriteTimer1@timer:
   598                           	opt stack 0
   599  000003                     ___awmod@divisor:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x2
   603  000003                     	ds	1
   604  000004                     HDByteWriteI2C@HighAdd:
   605                           	opt stack 0
   606  000004                     HDByteReadI2C@HighAdd:
   607                           	opt stack 0
   608  000004                     SetDDRamAddr@DDaddr:
   609                           	opt stack 0
   610  000004                     ___ftpack@exp:
   611                           	opt stack 0
   612  000004                     __div_to_l_@f2:
   613                           	opt stack 0
   614  000004                     __tdiv_to_l_@f2:
   615                           	opt stack 0
   616  000004                     ___ftge@ff2:
   617                           	opt stack 0
   618                           
   619                           ; 3 bytes @ 0x3
   620  000004                     	ds	1
   621  000005                     HDByteWriteI2C@LowAdd:
   622                           	opt stack 0
   623  000005                     HDByteReadI2C@LowAdd:
   624                           	opt stack 0
   625  000005                     initTimer@timer_config2:
   626                           	opt stack 0
   627  000005                     OpenXLCD@lcdtype:
   628                           	opt stack 0
   629  000005                     OpenADC@config:
   630                           	opt stack 0
   631  000005                     ___awmod@counter:
   632                           	opt stack 0
   633  000005                     ___ftpack@sign:
   634                           	opt stack 0
   635  000005                     SetDCPWM1@DCycle:
   636                           	opt stack 0
   637  000005                     ___lldiv@divisor:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x4
   641  000005                     	ds	1
   642  000006                     ??___ftpack:
   643  000006                     HDByteWriteI2C@data:
   644                           	opt stack 0
   645  000006                     initADC@channel:
   646                           	opt stack 0
   647  000006                     ___awmod@sign:
   648                           	opt stack 0
   649  000006                     HDByteReadI2C@data:
   650                           	opt stack 0
   651  000006                     initTimer@timer_value:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x5
   655  000006                     	ds	1
   656  000007                     ??__tdiv_to_l_:
   657  000007                     ??_alarm:
   658  000007                     ??___ftge:
   659  000007                     ?___awdiv:
   660                           	opt stack 0
   661  000007                     HDByteWriteI2C@ControlByte:
   662                           	opt stack 0
   663  000007                     initADC@config3:
   664                           	opt stack 0
   665  000007                     ___awdiv@dividend:
   666                           	opt stack 0
   667  000007                     __div_to_l_@quot:
   668                           	opt stack 0
   669                           
   670                           ; 4 bytes @ 0x6
   671  000007                     	ds	1
   672  000008                     ?_write_one_block:
   673                           	opt stack 0
   674  000008                     HDByteReadI2C@length:
   675                           	opt stack 0
   676  000008                     initADC@i:
   677                           	opt stack 0
   678  000008                     initTimer@timer_config1:
   679                           	opt stack 0
   680  000008                     write_one_block@d:
   681                           	opt stack 0
   682                           
   683                           ; 2 bytes @ 0x7
   684  000008                     	ds	1
   685  000009                     ?___awtoft:
   686                           	opt stack 0
   687  000009                     ?___lltoft:
   688                           	opt stack 0
   689  000009                     HDByteReadI2C@ControlByte:
   690                           	opt stack 0
   691  000009                     initADC@adc_config1:
   692                           	opt stack 0
   693  000009                     ___awdiv@divisor:
   694                           	opt stack 0
   695  000009                     ___awtoft@c:
   696                           	opt stack 0
   697  000009                     ___lldiv@quotient:
   698                           	opt stack 0
   699  000009                     ___lltoft@c:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x8
   703  000009                     	ds	1
   704  00000A                     ?_read_data:
   705                           	opt stack 0
   706  00000A                     initADC@adc_config2:
   707                           	opt stack 0
   708  00000A                     write_one_block@size:
   709                           	opt stack 0
   710  00000A                     __tdiv_to_l_@quot:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x9
   714  00000A                     	ds	1
   715  00000B                     initADC@portconfig:
   716                           	opt stack 0
   717  00000B                     ___awdiv@counter:
   718                           	opt stack 0
   719  00000B                     __div_to_l_@cntr:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0xA
   723  00000B                     	ds	1
   724  00000C                     ??_write_one_block:
   725  00000C                     ___awdiv@sign:
   726                           	opt stack 0
   727  00000C                     ___awtoft@sign:
   728                           	opt stack 0
   729  00000C                     __div_to_l_@exp1:
   730                           	opt stack 0
   731  00000C                     read_data@tha:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0xB
   735  00000C                     	ds	1
   736  00000D                     ??___lltoft:
   737  00000D                     ___lldiv@counter:
   738                           	opt stack 0
   739  00000D                     write_one_block@i:
   740                           	opt stack 0
   741  00000D                     ___awdiv@quotient:
   742                           	opt stack 0
   743                           
   744                           ; 2 bytes @ 0xC
   745  00000D                     	ds	1
   746  00000E                     ?___llmod:
   747                           	opt stack 0
   748  00000E                     __tdiv_to_l_@cntr:
   749                           	opt stack 0
   750  00000E                     read_data@tla:
   751                           	opt stack 0
   752  00000E                     ___llmod@dividend:
   753                           	opt stack 0
   754                           
   755                           ; 4 bytes @ 0xD
   756  00000E                     	ds	1
   757  00000F                     ?_write_data:
   758                           	opt stack 0
   759  00000F                     ?___wmul:
   760                           	opt stack 0
   761  00000F                     __tdiv_to_l_@exp1:
   762                           	opt stack 0
   763  00000F                     write_data@temp:
   764                           	opt stack 0
   765  00000F                     ___wmul@multiplier:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0xE
   769  00000F                     	ds	1
   770  000010                     read_data@counter:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0xF
   774  000010                     	ds	1
   775  000011                     ___lltoft@exp:
   776                           	opt stack 0
   777  000011                     write_data@date:
   778                           	opt stack 0
   779  000011                     ___wmul@multiplicand:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x10
   783  000011                     	ds	1
   784  000012                     ___llmod@divisor:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x11
   788  000012                     	ds	1
   789  000013                     ??_write_data:
   790  000013                     ___wmul@product:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x12
   794  000013                     	ds	2
   795  000015                     ?___ftmul:
   796                           	opt stack 0
   797  000015                     ___ftmul@f1:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x14
   801  000015                     	ds	1
   802  000016                     ___llmod@counter:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x15
   806  000016                     	ds	2
   807  000018                     ___ftmul@f2:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x17
   811  000018                     	ds	3
   812  00001B                     ??___ftmul:
   813                           
   814                           ; 1 bytes @ 0x1A
   815  00001B                     	ds	3
   816  00001E                     ___ftmul@exp:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x1D
   820  00001E                     	ds	1
   821  00001F                     ___ftmul@f3_as_product:
   822                           	opt stack 0
   823                           
   824                           ; 3 bytes @ 0x1E
   825  00001F                     	ds	3
   826  000022                     ___ftmul@cntr:
   827                           	opt stack 0
   828                           
   829                           ; 1 bytes @ 0x21
   830  000022                     	ds	1
   831  000023                     ___ftmul@sign:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x22
   835  000023                     	ds	1
   836  000024                     ?___ftdiv:
   837                           	opt stack 0
   838  000024                     ?_fround:
   839                           	opt stack 0
   840  000024                     ?_scale:
   841                           	opt stack 0
   842  000024                     ___ftdiv@f1:
   843                           	opt stack 0
   844                           
   845                           ; 3 bytes @ 0x23
   846  000024                     	ds	3
   847  000027                     ___ftdiv@f2:
   848                           	opt stack 0
   849  000027                     _fround$3113:
   850                           	opt stack 0
   851  000027                     _scale$3114:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x26
   855  000027                     	ds	3
   856  00002A                     ??___ftdiv:
   857  00002A                     scale@scl:
   858                           	opt stack 0
   859  00002A                     _fround$3112:
   860                           	opt stack 0
   861                           
   862                           ; 3 bytes @ 0x29
   863  00002A                     	ds	1
   864  00002B                     ?___fttol:
   865                           	opt stack 0
   866  00002B                     ___fttol@f1:
   867                           	opt stack 0
   868                           
   869                           ; 3 bytes @ 0x2A
   870  00002B                     	ds	2
   871  00002D                     fround@prec:
   872                           	opt stack 0
   873  00002D                     ___ftdiv@cntr:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x2C
   877  00002D                     	ds	1
   878  00002E                     ?___ftadd:
   879                           	opt stack 0
   880  00002E                     ___ftadd@f1:
   881                           	opt stack 0
   882  00002E                     ___ftdiv@f3:
   883                           	opt stack 0
   884                           
   885                           ; 3 bytes @ 0x2D
   886  00002E                     	ds	1
   887  00002F                     ??___fttol:
   888                           
   889                           ; 1 bytes @ 0x2E
   890  00002F                     	ds	2
   891  000031                     ___ftdiv@exp:
   892                           	opt stack 0
   893  000031                     ___ftadd@f2:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0x30
   897  000031                     	ds	1
   898  000032                     ___ftdiv@sign:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x31
   902  000032                     	ds	1
   903  000033                     
   904                           ; 1 bytes @ 0x32
   905  000033                     	ds	1
   906  000034                     ??___ftadd:
   907  000034                     ___fttol@sign1:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x33
   911  000034                     	ds	1
   912  000035                     ___fttol@lval:
   913                           	opt stack 0
   914                           
   915                           ; 4 bytes @ 0x34
   916  000035                     	ds	2
   917  000037                     ___ftadd@sign:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x36
   921  000037                     	ds	1
   922  000038                     ___ftadd@exp2:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x37
   926  000038                     	ds	1
   927  000039                     ___ftadd@exp1:
   928                           	opt stack 0
   929  000039                     ___fttol@exp1:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x38
   933  000039                     	ds	1
   934  00003A                     ?___ftsub:
   935                           	opt stack 0
   936  00003A                     ___ftsub@f1:
   937                           	opt stack 0
   938                           
   939                           ; 3 bytes @ 0x39
   940  00003A                     	ds	3
   941  00003D                     ___ftsub@f2:
   942                           	opt stack 0
   943                           
   944                           ; 3 bytes @ 0x3C
   945  00003D                     	ds	3
   946  000040                     ?_sprintf:
   947                           	opt stack 0
   948  000040                     sprintf@sp:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x3F
   952  000040                     	ds	2
   953  000042                     sprintf@f:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x41
   957  000042                     	ds	10
   958  00004C                     ??_sprintf:
   959                           
   960                           ; 1 bytes @ 0x4B
   961  00004C                     	ds	6
   962  000052                     _sprintf$3115:
   963                           	opt stack 0
   964                           
   965                           ; 3 bytes @ 0x51
   966  000052                     	ds	3
   967  000055                     sprintf@len:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x54
   971  000055                     	ds	2
   972  000057                     sprintf@cp:
   973                           	opt stack 0
   974                           
   975                           ; 2 bytes @ 0x56
   976  000057                     	ds	2
   977  000059                     sprintf@ap:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x58
   981  000059                     	ds	2
   982  00005B                     sprintf@flag:
   983                           	opt stack 0
   984                           
   985                           ; 2 bytes @ 0x5A
   986  00005B                     	ds	2
   987  00005D                     sprintf@exp:
   988                           	opt stack 0
   989                           
   990                           ; 2 bytes @ 0x5C
   991  00005D                     	ds	2
   992  00005F                     sprintf@tmpval:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0x5E
   996  00005F                     	ds	4
   997  000063                     sprintf@val:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x62
  1001  000063                     	ds	4
  1002  000067                     sprintf@fval:
  1003                           	opt stack 0
  1004                           
  1005                           ; 3 bytes @ 0x66
  1006  000067                     	ds	3
  1007  00006A                     sprintf@prec:
  1008                           	opt stack 0
  1009                           
  1010                           ; 2 bytes @ 0x69
  1011  00006A                     	ds	2
  1012  00006C                     sprintf@c:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0x6B
  1016  00006C                     	ds	1
  1017  00006D                     ??_print_data:
  1018                           
  1019                           ; 1 bytes @ 0x6C
  1020  00006D                     	ds	4
  1021  000071                     print_data@time:
  1022                           	opt stack 0
  1023                           
  1024                           ; 3 bytes @ 0x70
  1025  000071                     	ds	3
  1026  000074                     print_data@funion2:
  1027                           	opt stack 0
  1028                           
  1029                           ; 3 bytes @ 0x73
  1030  000074                     	ds	3
  1031  000077                     print_data@temp:
  1032                           	opt stack 0
  1033                           
  1034                           ; 3 bytes @ 0x76
  1035  000077                     	ds	3
  1036  00007A                     print_data@str_temp2:
  1037                           	opt stack 0
  1038                           
  1039                           ; 3 bytes @ 0x79
  1040  00007A                     	ds	3
  1041  00007D                     print_data@j:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x7C
  1045  00007D                     	ds	2
  1046  00007F                     ??_main:
  1047                           
  1048                           ; 1 bytes @ 0x7E
  1049  00007F                     	ds	1
  1050                           tblptru	equ	0xFF8
  1051                           tblptrh	equ	0xFF7
  1052                           tblptrl	equ	0xFF6
  1053                           tablat	equ	0xFF5
  1054                           postinc0	equ	0xFEE
  1055                           wreg	equ	0xFE8
  1056                           postdec1	equ	0xFE5
  1057                           fsr1l	equ	0xFE1
  1058                           
  1059 ;;
  1060 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1061 ;;
  1062 ;; *************** function _main *****************
  1063 ;; Defined at:
  1064 ;;		line 324 in file "main.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;  date            3   32[BANK0 ] unsigned char [3]
  1069 ;;  time           20    2[BANK0 ] unsigned char [20]
  1070 ;;  str_tmp        10   22[BANK0 ] unsigned char [10]
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  2  228[None  ] int 
  1073 ;; Registers used:
  1074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1080 ;;      Params:         0       0       0       0       0       0       0
  1081 ;;      Locals:         0      33       0       0       0       0       0
  1082 ;;      Temps:          1       0       0       0       0       0       0
  1083 ;;      Totals:         1      33       0       0       0       0       0
  1084 ;;Total ram usage:       34 bytes
  1085 ;; Hardware stack levels required when called:    6
  1086 ;; This function calls:
  1087 ;;		_OpenI2C
  1088 ;;		___ftge
  1089 ;;		_alarm
  1090 ;;		_initADC
  1091 ;;		_initTimer
  1092 ;;		_initXLCD
  1093 ;;		_putsXLCD
  1094 ;;		_read_data
  1095 ;;		_read_temperature
  1096 ;;		_sprintf
  1097 ;;		_test_readwrite
  1098 ;;		_write_data
  1099 ;; This function is called by:
  1100 ;;		Startup code after reset
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text0
  1105  00179C                     __ptext0:
  1106                           	opt stack 0
  1107  00179C                     _main:
  1108                           	opt stack 25
  1109                           
  1110                           ;main.c: 326: LATA = 0xFF;
  1111                           
  1112                           ;incstack = 0
  1113  00179C  6889               	setf	3977,c	;volatile
  1114                           
  1115                           ;main.c: 327: LATB = 0xFF;
  1116  00179E  688A               	setf	3978,c	;volatile
  1117                           
  1118                           ;main.c: 328: TRISC = 0xFF;
  1119  0017A0  6894               	setf	3988,c	;volatile
  1120                           
  1121                           ;main.c: 329: SSPADD = 0x27;
  1122  0017A2  0E27               	movlw	39
  1123  0017A4  6EC8               	movwf	4040,c	;volatile
  1124                           
  1125                           ;main.c: 331: initADC();
  1126  0017A6  EC6A  F015         	call	_initADC	;wreg free
  1127                           
  1128                           ;main.c: 332: initTimer();
  1129  0017AA  EC9A  F015         	call	_initTimer	;wreg free
  1130                           
  1131                           ;main.c: 333: OpenI2C(0b00001000, 0b10000000);
  1132  0017AE  0E80               	movlw	128
  1133  0017B0  6E01               	movwf	OpenI2C@slew,c
  1134  0017B2  0E08               	movlw	8
  1135  0017B4  ECF1  F015         	call	_OpenI2C
  1136  0017B8                     
  1137                           ;main.c: 339: {
  1138                           ;main.c: 340: if(PIR1bits.TMR1IF=1)
  1139  0017B8  809E               	bsf	3998,0,c	;volatile
  1140                           
  1141                           ;main.c: 341: {
  1142                           ;main.c: 342: msec++;
  1143  0017BA  0100               	movlb	0	; () banked
  1144  0017BC  2BA6               	incf	_msec& (0+255),f,b
  1145                           
  1146                           ; BSR set to: 0
  1147                           ;main.c: 343: if(msec>=10)
  1148  0017BE  0E09               	movlw	9
  1149  0017C0  65A6               	cpfsgt	_msec& (0+255),b
  1150  0017C2  D00F               	goto	l233
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;main.c: 344: {
  1154                           ;main.c: 345: sec++;
  1155  0017C4  2BA5               	incf	_sec& (0+255),f,b
  1156                           
  1157                           ; BSR set to: 0
  1158                           ;main.c: 346: msec=0;
  1159  0017C6  0E00               	movlw	0
  1160  0017C8  6FA6               	movwf	_msec& (0+255),b
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 347: if(sec>=60)
  1164  0017CA  0E3B               	movlw	59
  1165  0017CC  65A5               	cpfsgt	_sec& (0+255),b
  1166  0017CE  D009               	goto	l233
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;main.c: 348: {
  1170                           ;main.c: 349: min++;
  1171  0017D0  2BA4               	incf	_min& (0+255),f,b
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;main.c: 350: sec=0;
  1175  0017D2  0E00               	movlw	0
  1176  0017D4  6FA5               	movwf	_sec& (0+255),b
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;main.c: 351: if(min>=60)
  1180  0017D6  0E3B               	movlw	59
  1181  0017D8  65A4               	cpfsgt	_min& (0+255),b
  1182  0017DA  D003               	goto	l233
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;main.c: 352: {
  1186                           ;main.c: 353: hour++;
  1187  0017DC  2BA3               	incf	_hour& (0+255),f,b
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;main.c: 354: min=0;
  1191  0017DE  0E00               	movlw	0
  1192  0017E0  6FA4               	movwf	_min& (0+255),b
  1193  0017E2                     l233:
  1194                           
  1195                           ; BSR set to: 0
  1196                           ;main.c: 355: }
  1197                           ;main.c: 356: }
  1198                           ;main.c: 357: }
  1199                           ;main.c: 358: initXLCD();
  1200                           
  1201                           ; BSR set to: 0
  1202                           
  1203                           ; BSR set to: 0
  1204                           
  1205                           ; BSR set to: 0
  1206  0017E2  ECE2  F015         	call	_initXLCD	;wreg free
  1207                           
  1208                           ;main.c: 359: read_temperature();
  1209  0017E6  ECCF  F012         	call	_read_temperature	;wreg free
  1210                           
  1211                           ;main.c: 360: sprintf(time, "%d:%d:%d", hour,min,sec);
  1212  0017EA  0E82               	movlw	low main@time
  1213  0017EC  6E40               	movwf	sprintf@sp,c
  1214  0017EE  0E00               	movlw	high main@time
  1215  0017F0  6E41               	movwf	sprintf@sp+1,c
  1216  0017F2  0E88               	movlw	low (STR_2+3)
  1217  0017F4  6E42               	movwf	sprintf@f,c
  1218  0017F6  0E06               	movlw	high (STR_2+3)
  1219  0017F8  6E43               	movwf	sprintf@f+1,c
  1220  0017FA  C0A3  F044         	movff	_hour,?_sprintf+4
  1221  0017FE  6A45               	clrf	?_sprintf+5,c
  1222  001800  C0A4  F046         	movff	_min,?_sprintf+6
  1223  001804  6A47               	clrf	?_sprintf+7,c
  1224  001806  C0A5  F048         	movff	_sec,?_sprintf+8
  1225  00180A  6A49               	clrf	?_sprintf+9,c
  1226  00180C  EC63  F003         	call	_sprintf	;wreg free
  1227                           
  1228                           ;main.c: 361: sprintf(str_tmp, "%.2f %s",converted_temp.number, time);
  1229  001810  0E96               	movlw	low main@str_tmp
  1230  001812  6E40               	movwf	sprintf@sp,c
  1231  001814  0E00               	movlw	high main@str_tmp
  1232  001816  6E41               	movwf	sprintf@sp+1,c
  1233  001818  0EA7               	movlw	low STR_9
  1234  00181A  6E42               	movwf	sprintf@f,c
  1235  00181C  0E06               	movlw	high STR_9
  1236  00181E  6E43               	movwf	sprintf@f+1,c
  1237  001820  C0AF  F044         	movff	_converted_temp,?_sprintf+4
  1238  001824  C0B0  F045         	movff	_converted_temp+1,?_sprintf+5
  1239  001828  C0B1  F046         	movff	_converted_temp+2,?_sprintf+6
  1240  00182C  0E82               	movlw	low main@time
  1241  00182E  6E47               	movwf	?_sprintf+7,c
  1242  001830  0E00               	movlw	high main@time
  1243  001832  6E48               	movwf	?_sprintf+8,c
  1244  001834  EC63  F003         	call	_sprintf	;wreg free
  1245                           
  1246                           ;main.c: 362: putsXLCD(str_tmp);
  1247  001838  0E96               	movlw	low main@str_tmp
  1248  00183A  6E02               	movwf	putsXLCD@buffer,c
  1249  00183C  0E00               	movlw	high main@str_tmp
  1250  00183E  6E03               	movwf	putsXLCD@buffer+1,c
  1251  001840  EC8D  F013         	call	_putsXLCD	;wreg free
  1252                           
  1253                           ;main.c: 365: if((sec == 30 || sec == 0) && msec == 1)
  1254  001844  0E1E               	movlw	30
  1255  001846  0100               	movlb	0	; () banked
  1256  001848  19A5               	xorwf	_sec& (0+255),w,b
  1257  00184A  B4D8               	btfsc	status,2,c
  1258  00184C  D003               	goto	u5830
  1259                           
  1260                           ; BSR set to: 0
  1261  00184E  51A5               	movf	_sec& (0+255),w,b
  1262  001850  A4D8               	btfss	status,2,c
  1263  001852  D029               	goto	l237
  1264  001854                     u5830:
  1265                           
  1266                           ; BSR set to: 0
  1267                           
  1268                           ; BSR set to: 0
  1269  001854  05A6               	decf	_msec& (0+255),w,b
  1270  001856  A4D8               	btfss	status,2,c
  1271  001858  D026               	goto	l237
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;main.c: 366: {
  1275                           ;main.c: 367: if(converted_temp.number > max_temp || converted_temp.number < min_temp){
  1276  00185A  C0B5  F001         	movff	_max_temp,___ftge@ff1
  1277  00185E  C0B6  F002         	movff	_max_temp+1,___ftge@ff1+1
  1278  001862  C0B7  F003         	movff	_max_temp+2,___ftge@ff1+2
  1279  001866  C0AF  F004         	movff	_converted_temp,___ftge@ff2
  1280  00186A  C0B0  F005         	movff	_converted_temp+1,___ftge@ff2+1
  1281  00186E  C0B1  F006         	movff	_converted_temp+2,___ftge@ff2+2
  1282  001872  ECEC  F010         	call	___ftge	;wreg free
  1283  001876  A0D8               	btfss	status,0,c
  1284  001878  D010               	goto	u5860
  1285  00187A  C0AF  F001         	movff	_converted_temp,___ftge@ff1
  1286  00187E  C0B0  F002         	movff	_converted_temp+1,___ftge@ff1+1
  1287  001882  C0B1  F003         	movff	_converted_temp+2,___ftge@ff1+2
  1288  001886  C0B2  F004         	movff	_min_temp,___ftge@ff2
  1289  00188A  C0B3  F005         	movff	_min_temp+1,___ftge@ff2+1
  1290  00188E  C0B4  F006         	movff	_min_temp+2,___ftge@ff2+2
  1291  001892  ECEC  F010         	call	___ftge	;wreg free
  1292  001896  B0D8               	btfsc	status,0,c
  1293  001898  D006               	goto	l237
  1294  00189A                     u5860:
  1295                           
  1296                           ;main.c: 368: alarm();alarm();alarm();
  1297  00189A  EC59  F014         	call	_alarm	;wreg free
  1298  00189E  EC59  F014         	call	_alarm	;wreg free
  1299  0018A2  EC59  F014         	call	_alarm	;wreg free
  1300  0018A6                     l237:
  1301                           
  1302                           ;main.c: 369: }
  1303                           ;main.c: 370: }
  1304                           ;main.c: 374: if(min % 2 == 0 && sec == 0 && msec == 1)
  1305  0018A6  0100               	movlb	0	; () banked
  1306  0018A8  B1A4               	btfsc	_min& (0+255),0,b
  1307  0018AA  D786               	goto	l229
  1308                           
  1309                           ; BSR set to: 0
  1310  0018AC  51A5               	movf	_sec& (0+255),w,b
  1311  0018AE  A4D8               	btfss	status,2,c
  1312  0018B0  D783               	goto	l229
  1313                           
  1314                           ; BSR set to: 0
  1315  0018B2  05A6               	decf	_msec& (0+255),w,b
  1316  0018B4  A4D8               	btfss	status,2,c
  1317  0018B6  D780               	goto	l229
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;main.c: 375: {
  1321                           ;main.c: 376: unsigned char date[3];
  1322                           ;main.c: 377: date[0] = hour;
  1323  0018B8  C0A3  F0A0         	movff	_hour,main@date
  1324                           
  1325                           ;main.c: 378: date[1] = min;
  1326  0018BC  C0A4  F0A1         	movff	_min,main@date+1
  1327                           
  1328                           ;main.c: 379: date[2] = sec;
  1329  0018C0  C0A5  F0A2         	movff	_sec,main@date+2
  1330                           
  1331                           ; BSR set to: 0
  1332                           ;main.c: 380: if(write_data(converted_temp.bytes,date) < 0)
  1333  0018C4  0EAF               	movlw	low _converted_temp
  1334  0018C6  6E0F               	movwf	write_data@temp,c
  1335  0018C8  0E00               	movlw	high _converted_temp
  1336  0018CA  6E10               	movwf	write_data@temp+1,c
  1337  0018CC  0EA0               	movlw	low main@date
  1338  0018CE  6E11               	movwf	write_data@date,c
  1339  0018D0  0E00               	movlw	high main@date
  1340  0018D2  6E12               	movwf	write_data@date+1,c
  1341  0018D4  EC9C  F014         	call	_write_data	;wreg free
  1342  0018D8  AE10               	btfss	?_write_data+1,7,c
  1343  0018DA  D00F               	goto	l241
  1344                           
  1345                           ;main.c: 381: {
  1346                           ;main.c: 382: initXLCD();
  1347  0018DC  ECE2  F015         	call	_initXLCD	;wreg free
  1348                           
  1349                           ;main.c: 383: putsXLCD("memory full");
  1350  0018E0  0E91               	movlw	low STR_10
  1351  0018E2  6E02               	movwf	putsXLCD@buffer,c
  1352  0018E4  0E06               	movlw	high STR_10
  1353  0018E6  6E03               	movwf	putsXLCD@buffer+1,c
  1354  0018E8  EC8D  F013         	call	_putsXLCD	;wreg free
  1355                           
  1356                           ;main.c: 384: _delay((unsigned long)((100)*(4000000/4000.0)));
  1357  0018EC  0E82               	movlw	130
  1358  0018EE  6E7F               	movwf	??_main& (0+255),c
  1359  0018F0  0EDE               	movlw	222
  1360  0018F2                     u6897:
  1361  0018F2  2EE8               	decfsz	wreg,f,c
  1362  0018F4  D7FE               	bra	u6897
  1363  0018F6  2E7F               	decfsz	??_main& (0+255),f,c
  1364  0018F8  D7FC               	bra	u6897
  1365  0018FA                     l241:
  1366                           
  1367                           ;main.c: 385: }
  1368                           ;main.c: 389: _delay((unsigned long)((100)*(4000000/4000.0)));
  1369  0018FA  0E82               	movlw	130
  1370  0018FC  6E7F               	movwf	??_main& (0+255),c
  1371  0018FE  0EDE               	movlw	222
  1372  001900                     u6907:
  1373  001900  2EE8               	decfsz	wreg,f,c
  1374  001902  D7FE               	bra	u6907
  1375  001904  2E7F               	decfsz	??_main& (0+255),f,c
  1376  001906  D7FC               	bra	u6907
  1377                           
  1378                           ;main.c: 390: read_data();
  1379  001908  ECE9  F00F         	call	_read_data	;wreg free
  1380                           
  1381                           ;main.c: 391: test_readwrite();
  1382  00190C  ECB7  F011         	call	_test_readwrite	;wreg free
  1383  001910  D753               	goto	l229
  1384  001912                     __end_of_main:
  1385                           	opt stack 0
  1386                           tblptru	equ	0xFF8
  1387                           tblptrh	equ	0xFF7
  1388                           tblptrl	equ	0xFF6
  1389                           tablat	equ	0xFF5
  1390                           postinc0	equ	0xFEE
  1391                           wreg	equ	0xFE8
  1392                           postdec1	equ	0xFE5
  1393                           fsr1l	equ	0xFE1
  1394                           status	equ	0xFD8
  1395                           
  1396 ;; *************** function _write_data *****************
  1397 ;; Defined at:
  1398 ;;		line 174 in file "main.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  temp            2   14[COMRAM] PTR unsigned char 
  1401 ;;		 -> converted_temp(3), 
  1402 ;;  date            2   16[COMRAM] PTR unsigned char 
  1403 ;;		 -> main@date(3), 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;		None
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  2   14[COMRAM] int 
  1408 ;; Registers used:
  1409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1415 ;;      Params:         4       0       0       0       0       0       0
  1416 ;;      Locals:         0       0       0       0       0       0       0
  1417 ;;      Temps:          2       0       0       0       0       0       0
  1418 ;;      Totals:         6       0       0       0       0       0       0
  1419 ;;Total ram usage:        6 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    5
  1422 ;; This function calls:
  1423 ;;		_write_one_block
  1424 ;; This function is called by:
  1425 ;;		_main
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text1
  1430  002938                     __ptext1:
  1431                           	opt stack 0
  1432  002938                     _write_data:
  1433                           	opt stack 25
  1434                           
  1435                           ;main.c: 176: return write_one_block(temp,temp_size) + write_one_block(date,time_size);
  1436                           
  1437                           ;incstack = 0
  1438  002938  C00F  F008         	movff	write_data@temp,write_one_block@d
  1439  00293C  C010  F009         	movff	write_data@temp+1,write_one_block@d+1
  1440  002940  C0BA  F00A         	movff	_temp_size,write_one_block@size
  1441  002944  C0BB  F00B         	movff	_temp_size+1,write_one_block@size+1
  1442  002948  EC8F  F00F         	call	_write_one_block	;wreg free
  1443  00294C  C008  F013         	movff	?_write_one_block,??_write_data
  1444  002950  C009  F014         	movff	?_write_one_block+1,??_write_data+1
  1445  002954  C011  F008         	movff	write_data@date,write_one_block@d
  1446  002958  C012  F009         	movff	write_data@date+1,write_one_block@d+1
  1447  00295C  C0B8  F00A         	movff	_time_size,write_one_block@size
  1448  002960  C0B9  F00B         	movff	_time_size+1,write_one_block@size+1
  1449  002964  EC8F  F00F         	call	_write_one_block	;wreg free
  1450  002968  5008               	movf	?_write_one_block,w,c
  1451  00296A  2413               	addwf	??_write_data,w,c
  1452  00296C  6E0F               	movwf	?_write_data,c
  1453  00296E  5009               	movf	?_write_one_block+1,w,c
  1454  002970  2014               	addwfc	??_write_data+1,w,c
  1455  002972  6E10               	movwf	?_write_data+1,c
  1456  002974  0012               	return	
  1457  002976                     __end_of_write_data:
  1458                           	opt stack 0
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           postinc0	equ	0xFEE
  1464                           wreg	equ	0xFE8
  1465                           postdec1	equ	0xFE5
  1466                           fsr1l	equ	0xFE1
  1467                           status	equ	0xFD8
  1468                           
  1469 ;; *************** function _write_one_block *****************
  1470 ;; Defined at:
  1471 ;;		line 146 in file "main.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;  d               2    7[COMRAM] PTR unsigned char 
  1474 ;;		 -> main@date(3), converted_temp(3), 
  1475 ;;  size            2    9[COMRAM] int 
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  i               2   12[COMRAM] int 
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  2    7[COMRAM] int 
  1480 ;; Registers used:
  1481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1487 ;;      Params:         4       0       0       0       0       0       0
  1488 ;;      Locals:         2       0       0       0       0       0       0
  1489 ;;      Temps:          1       0       0       0       0       0       0
  1490 ;;      Totals:         7       0       0       0       0       0       0
  1491 ;;Total ram usage:        7 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    4
  1494 ;; This function calls:
  1495 ;;		_HDByteWriteI2C
  1496 ;; This function is called by:
  1497 ;;		_write_data
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text2
  1502  001F1E                     __ptext2:
  1503                           	opt stack 0
  1504  001F1E                     _write_one_block:
  1505                           	opt stack 25
  1506                           
  1507                           ;main.c: 148: int i = 0;
  1508                           
  1509                           ;incstack = 0
  1510  001F1E  0E00               	movlw	0
  1511  001F20  6E0E               	movwf	write_one_block@i+1,c
  1512  001F22  0E00               	movlw	0
  1513  001F24  6E0D               	movwf	write_one_block@i,c
  1514                           
  1515                           ;main.c: 149: while(eeprom_laddress < 0xFF & i < size)
  1516  001F26  D013               	goto	l165
  1517  001F28                     
  1518                           ;main.c: 150: {
  1519                           ;main.c: 151: HDByteWriteI2C(0xA0,eeprom_haddress,eeprom_laddress++,*d);
  1520  001F28  C0A7  F004         	movff	_eeprom_haddress,HDByteWriteI2C@HighAdd
  1521  001F2C  C0A8  F005         	movff	_eeprom_laddress,HDByteWriteI2C@LowAdd
  1522  001F30  C008  FFD9         	movff	write_one_block@d,fsr2l
  1523  001F34  C009  FFDA         	movff	write_one_block@d+1,fsr2h
  1524  001F38  50DF               	movf	indf2,w,c
  1525  001F3A  6E06               	movwf	HDByteWriteI2C@data,c
  1526  001F3C  0EA0               	movlw	160
  1527  001F3E  ECE4  F013         	call	_HDByteWriteI2C
  1528  001F42  0100               	movlb	0	; () banked
  1529  001F44  2BA8               	incf	_eeprom_laddress& (0+255),f,b
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;main.c: 152: i++;d++;
  1533  001F46  4A0D               	infsnz	write_one_block@i,f,c
  1534  001F48  2A0E               	incf	write_one_block@i+1,f,c
  1535                           
  1536                           ; BSR set to: 0
  1537  001F4A  4A08               	infsnz	write_one_block@d,f,c
  1538  001F4C  2A09               	incf	write_one_block@d+1,f,c
  1539  001F4E                     l165:
  1540                           
  1541                           ; BSR set to: 0
  1542  001F4E  0100               	movlb	0	; () banked
  1543  001F50  29A8               	incf	_eeprom_laddress& (0+255),w,b
  1544  001F52  B4D8               	btfsc	status,2,c
  1545  001F54  D00A               	goto	u5500
  1546                           
  1547                           ; BSR set to: 0
  1548  001F56  500A               	movf	write_one_block@size,w,c
  1549  001F58  5C0D               	subwf	write_one_block@i,w,c
  1550  001F5A  500E               	movf	write_one_block@i+1,w,c
  1551  001F5C  0A80               	xorlw	128
  1552  001F5E  6E0C               	movwf	??_write_one_block& (0+255),c
  1553  001F60  500B               	movf	write_one_block@size+1,w,c
  1554  001F62  0A80               	xorlw	128
  1555  001F64  580C               	subwfb	??_write_one_block& (0+255),w,c
  1556  001F66  A0D8               	btfss	status,0,c
  1557  001F68  D7DF               	goto	l166
  1558  001F6A                     u5500:
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;main.c: 153: }
  1562                           ;main.c: 154: if( i != size)
  1563                           
  1564                           ; BSR set to: 0
  1565                           
  1566                           ; BSR set to: 0
  1567  001F6A  500A               	movf	write_one_block@size,w,c
  1568  001F6C  180D               	xorwf	write_one_block@i,w,c
  1569  001F6E  E104               	bnz	u5510
  1570  001F70  500B               	movf	write_one_block@size+1,w,c
  1571  001F72  180E               	xorwf	write_one_block@i+1,w,c
  1572  001F74  B4D8               	btfsc	status,2,c
  1573  001F76  D028               	goto	l175
  1574  001F78                     u5510:
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 155: {
  1578                           ;main.c: 156: eeprom_laddress = 0;
  1579  001F78  0E00               	movlw	0
  1580  001F7A  6FA8               	movwf	_eeprom_laddress& (0+255),b
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;main.c: 157: if(eeprom_haddress < 0xFF)
  1584  001F7C  29A7               	incf	_eeprom_haddress& (0+255),w,b
  1585  001F7E  B4D8               	btfsc	status,2,c
  1586  001F80  D020               	goto	l171
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;main.c: 158: {
  1590                           ;main.c: 159: eeprom_haddress++;
  1591  001F82  2BA7               	incf	_eeprom_haddress& (0+255),f,b
  1592                           
  1593                           ;main.c: 160: while(i < size){
  1594  001F84  D013               	goto	l172
  1595  001F86                     
  1596                           ; BSR set to: 0
  1597                           ;main.c: 161: HDByteWriteI2C(0xA0,eeprom_haddress,eeprom_laddress++,*d);
  1598                           
  1599                           ; BSR set to: 0
  1600  001F86  C0A7  F004         	movff	_eeprom_haddress,HDByteWriteI2C@HighAdd
  1601  001F8A  C0A8  F005         	movff	_eeprom_laddress,HDByteWriteI2C@LowAdd
  1602  001F8E  C008  FFD9         	movff	write_one_block@d,fsr2l
  1603  001F92  C009  FFDA         	movff	write_one_block@d+1,fsr2h
  1604  001F96  50DF               	movf	indf2,w,c
  1605  001F98  6E06               	movwf	HDByteWriteI2C@data,c
  1606  001F9A  0EA0               	movlw	160
  1607  001F9C  ECE4  F013         	call	_HDByteWriteI2C
  1608  001FA0  0100               	movlb	0	; () banked
  1609  001FA2  2BA8               	incf	_eeprom_laddress& (0+255),f,b
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;main.c: 162: i++;d++;
  1613  001FA4  4A0D               	infsnz	write_one_block@i,f,c
  1614  001FA6  2A0E               	incf	write_one_block@i+1,f,c
  1615                           
  1616                           ; BSR set to: 0
  1617  001FA8  4A08               	infsnz	write_one_block@d,f,c
  1618  001FAA  2A09               	incf	write_one_block@d+1,f,c
  1619  001FAC                     l172:
  1620                           
  1621                           ; BSR set to: 0
  1622                           
  1623                           ; BSR set to: 0
  1624  001FAC  500A               	movf	write_one_block@size,w,c
  1625  001FAE  5C0D               	subwf	write_one_block@i,w,c
  1626  001FB0  500E               	movf	write_one_block@i+1,w,c
  1627  001FB2  0A80               	xorlw	128
  1628  001FB4  6E0C               	movwf	??_write_one_block& (0+255),c
  1629  001FB6  500B               	movf	write_one_block@size+1,w,c
  1630  001FB8  0A80               	xorlw	128
  1631  001FBA  580C               	subwfb	??_write_one_block& (0+255),w,c
  1632  001FBC  B0D8               	btfsc	status,0,c
  1633  001FBE  D004               	goto	l175
  1634  001FC0  D7E2               	goto	l173
  1635  001FC2                     l171:
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;main.c: 165: else
  1639                           ;main.c: 166: {
  1640                           ;main.c: 168: return -1;
  1641  001FC2  6808               	setf	?_write_one_block,c
  1642  001FC4  6809               	setf	?_write_one_block+1,c
  1643  001FC6  0012               	return	
  1644  001FC8                     l175:
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;main.c: 169: }
  1648                           ;main.c: 170: }
  1649                           ;main.c: 171: return 0;
  1650                           
  1651                           ; BSR set to: 0
  1652                           
  1653                           ; BSR set to: 0
  1654  001FC8  0E00               	movlw	0
  1655  001FCA  6E09               	movwf	?_write_one_block+1,c
  1656  001FCC  0E00               	movlw	0
  1657  001FCE  6E08               	movwf	?_write_one_block,c
  1658  001FD0  0012               	return	
  1659  001FD2                     __end_of_write_one_block:
  1660                           	opt stack 0
  1661                           tblptru	equ	0xFF8
  1662                           tblptrh	equ	0xFF7
  1663                           tblptrl	equ	0xFF6
  1664                           tablat	equ	0xFF5
  1665                           postinc0	equ	0xFEE
  1666                           wreg	equ	0xFE8
  1667                           postdec1	equ	0xFE5
  1668                           fsr1l	equ	0xFE1
  1669                           indf2	equ	0xFDF
  1670                           fsr2h	equ	0xFDA
  1671                           fsr2l	equ	0xFD9
  1672                           status	equ	0xFD8
  1673                           
  1674 ;; *************** function _HDByteWriteI2C *****************
  1675 ;; Defined at:
  1676 ;;		line 43 in file "main.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;  ControlByte     1    wreg     unsigned char 
  1679 ;;  HighAdd         1    3[COMRAM] unsigned char 
  1680 ;;  LowAdd          1    4[COMRAM] unsigned char 
  1681 ;;  data            1    5[COMRAM] unsigned char 
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;  ControlByte     1    6[COMRAM] unsigned char 
  1684 ;; Return value:  Size  Location     Type
  1685 ;;                  1    wreg      unsigned char 
  1686 ;; Registers used:
  1687 ;;		wreg, status,2, status,0, cstack
  1688 ;; Tracked objects:
  1689 ;;		On entry : 0/0
  1690 ;;		On exit  : 0/0
  1691 ;;		Unchanged: 0/0
  1692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1693 ;;      Params:         3       0       0       0       0       0       0
  1694 ;;      Locals:         1       0       0       0       0       0       0
  1695 ;;      Temps:          0       0       0       0       0       0       0
  1696 ;;      Totals:         4       0       0       0       0       0       0
  1697 ;;Total ram usage:        4 bytes
  1698 ;; Hardware stack levels used:    1
  1699 ;; Hardware stack levels required when called:    3
  1700 ;; This function calls:
  1701 ;;		_EEAckPolling
  1702 ;;		_IdleI2C
  1703 ;;		_WriteI2C
  1704 ;; This function is called by:
  1705 ;;		_write_one_block
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           	psect	text3
  1710  0027C8                     __ptext3:
  1711                           	opt stack 0
  1712  0027C8                     _HDByteWriteI2C:
  1713                           	opt stack 25
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;incstack = 0
  1717                           ;HDByteWriteI2C@ControlByte stored from wreg
  1718  0027C8  6E07               	movwf	HDByteWriteI2C@ControlByte,c
  1719                           
  1720                           ;main.c: 45: IdleI2C();
  1721  0027CA  EC19  F016         	call	_IdleI2C	;wreg free
  1722                           
  1723                           ;main.c: 46: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1724  0027CE  80C5               	bsf	4037,0,c	;volatile
  1725  0027D0  B0C5               	btfsc	4037,0,c	;volatile
  1726  0027D2  D7FE               	goto	l97
  1727  0027D4                     u4750:
  1728                           
  1729                           ;main.c: 47: while ( SSPCON2bits.SEN );
  1730  0027D4  B0C5               	btfsc	4037,0,c	;volatile
  1731  0027D6  D7FE               	goto	u4750
  1732                           
  1733                           ;main.c: 48: WriteI2C( ControlByte );
  1734  0027D8  5007               	movf	HDByteWriteI2C@ControlByte,w,c
  1735  0027DA  EC01  F013         	call	_WriteI2C
  1736                           
  1737                           ;main.c: 49: IdleI2C();
  1738  0027DE  EC19  F016         	call	_IdleI2C	;wreg free
  1739                           
  1740                           ;main.c: 50: WriteI2C( HighAdd );
  1741  0027E2  5004               	movf	HDByteWriteI2C@HighAdd,w,c
  1742  0027E4  EC01  F013         	call	_WriteI2C
  1743                           
  1744                           ;main.c: 51: IdleI2C();
  1745  0027E8  EC19  F016         	call	_IdleI2C	;wreg free
  1746                           
  1747                           ;main.c: 52: WriteI2C( LowAdd );
  1748  0027EC  5005               	movf	HDByteWriteI2C@LowAdd,w,c
  1749  0027EE  EC01  F013         	call	_WriteI2C
  1750                           
  1751                           ;main.c: 53: IdleI2C();
  1752  0027F2  EC19  F016         	call	_IdleI2C	;wreg free
  1753                           
  1754                           ;main.c: 54: WriteI2C ( data );
  1755  0027F6  5006               	movf	HDByteWriteI2C@data,w,c
  1756  0027F8  EC01  F013         	call	_WriteI2C
  1757                           
  1758                           ;main.c: 55: IdleI2C();
  1759  0027FC  EC19  F016         	call	_IdleI2C	;wreg free
  1760                           
  1761                           ;main.c: 56: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1762  002800  84C5               	bsf	4037,2,c	;volatile
  1763  002802  B4C5               	btfsc	4037,2,c	;volatile
  1764  002804  D7FE               	goto	l103
  1765  002806                     u4770:
  1766                           
  1767                           ;main.c: 57: while ( SSPCON2bits.PEN );
  1768  002806  B4C5               	btfsc	4037,2,c	;volatile
  1769  002808  D7FE               	goto	u4770
  1770  00280A                     u4780:
  1771                           
  1772                           ;main.c: 58: while (EEAckPolling(ControlByte));
  1773  00280A  5007               	movf	HDByteWriteI2C@ControlByte,w,c
  1774  00280C  EC2C  F012         	call	_EEAckPolling
  1775  002810  0900               	iorlw	0
  1776  002812  B4D8               	btfsc	status,2,c
  1777  002814  0012               	return	
  1778  002816  D7F9               	goto	u4780
  1779  002818                     __end_of_HDByteWriteI2C:
  1780                           	opt stack 0
  1781                           tblptru	equ	0xFF8
  1782                           tblptrh	equ	0xFF7
  1783                           tblptrl	equ	0xFF6
  1784                           tablat	equ	0xFF5
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1l	equ	0xFE1
  1789                           indf2	equ	0xFDF
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           status	equ	0xFD8
  1793                           
  1794 ;; *************** function _EEAckPolling *****************
  1795 ;; Defined at:
  1796 ;;		line 15 in file "i2c_eeap.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;  control         1    wreg     unsigned char 
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  control         1    2[COMRAM] unsigned char 
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      char 
  1803 ;; Registers used:
  1804 ;;		wreg, status,2, status,0, cstack
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1810 ;;      Params:         0       0       0       0       0       0       0
  1811 ;;      Locals:         1       0       0       0       0       0       0
  1812 ;;      Temps:          0       0       0       0       0       0       0
  1813 ;;      Totals:         1       0       0       0       0       0       0
  1814 ;;Total ram usage:        1 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; Hardware stack levels required when called:    2
  1817 ;; This function calls:
  1818 ;;		_IdleI2C
  1819 ;;		_WriteI2C
  1820 ;; This function is called by:
  1821 ;;		_HDByteWriteI2C
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text4
  1826  002458                     __ptext4:
  1827                           	opt stack 0
  1828  002458                     _EEAckPolling:
  1829                           	opt stack 25
  1830                           
  1831                           ;incstack = 0
  1832                           ;EEAckPolling@control stored from wreg
  1833  002458  6E03               	movwf	EEAckPolling@control,c
  1834                           
  1835                           ;i2c_eeap.c: 17: IdleI2C();
  1836  00245A  EC19  F016         	call	_IdleI2C	;wreg free
  1837                           
  1838                           ;i2c_eeap.c: 18: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  1839  00245E  80C5               	bsf	4037,0,c	;volatile
  1840  002460  B0C5               	btfsc	4037,0,c	;volatile
  1841  002462  D7FE               	goto	l457
  1842  002464                     u4060:
  1843                           
  1844                           ;i2c_eeap.c: 19: while ( SSPCON2bits.SEN );
  1845  002464  B0C5               	btfsc	4037,0,c	;volatile
  1846  002466  D7FE               	goto	u4060
  1847                           
  1848                           ;i2c_eeap.c: 20: if ( PIR2bits.BCLIF )
  1849  002468  A6A1               	btfss	4001,3,c	;volatile
  1850  00246A  D002               	goto	l462
  1851                           
  1852                           ;i2c_eeap.c: 21: {
  1853                           ;i2c_eeap.c: 22: return ( -1 );
  1854  00246C  0EFF               	movlw	255
  1855  00246E  0012               	return	
  1856  002470                     l462:
  1857                           
  1858                           ;i2c_eeap.c: 25: else
  1859                           ;i2c_eeap.c: 26: {
  1860                           ;i2c_eeap.c: 27: if ( WriteI2C( control ) == -1)
  1861  002470  5003               	movf	EEAckPolling@control,w,c
  1862  002472  EC01  F013         	call	_WriteI2C
  1863  002476  0AFF               	xorlw	-1
  1864  002478  A4D8               	btfss	status,2,c
  1865  00247A  D019               	goto	l478
  1866                           
  1867                           ;i2c_eeap.c: 28: {
  1868                           ;i2c_eeap.c: 29: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1869  00247C  84C5               	bsf	4037,2,c	;volatile
  1870  00247E  B4C5               	btfsc	4037,2,c	;volatile
  1871  002480  D7FE               	goto	l467
  1872                           
  1873                           ;i2c_eeap.c: 30: return ( -3 );
  1874  002482  0EFD               	movlw	253
  1875  002484  0012               	return	
  1876  002486                     l470:
  1877                           
  1878                           ;i2c_eeap.c: 34: {
  1879                           ;i2c_eeap.c: 35: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  1880  002486  82C5               	bsf	4037,1,c	;volatile
  1881  002488  B2C5               	btfsc	4037,1,c	;volatile
  1882  00248A  D7FE               	goto	l472
  1883  00248C                     u4110:
  1884                           
  1885                           ;i2c_eeap.c: 36: while ( SSPCON2bits.RSEN );
  1886  00248C  B2C5               	btfsc	4037,1,c	;volatile
  1887  00248E  D7FE               	goto	u4110
  1888                           
  1889                           ;i2c_eeap.c: 37: if ( PIR2bits.BCLIF )
  1890  002490  A6A1               	btfss	4001,3,c	;volatile
  1891  002492  D002               	goto	l477
  1892                           
  1893                           ;i2c_eeap.c: 38: {
  1894                           ;i2c_eeap.c: 39: return ( -1 );
  1895  002494  0EFF               	movlw	255
  1896  002496  0012               	return	
  1897  002498                     l477:
  1898                           
  1899                           ;i2c_eeap.c: 40: }
  1900                           ;i2c_eeap.c: 42: if ( WriteI2C( control ) == -1)
  1901  002498  5003               	movf	EEAckPolling@control,w,c
  1902  00249A  EC01  F013         	call	_WriteI2C
  1903  00249E  0AFF               	xorlw	-1
  1904  0024A0  A4D8               	btfss	status,2,c
  1905  0024A2  D005               	goto	l478
  1906                           
  1907                           ;i2c_eeap.c: 43: {
  1908                           ;i2c_eeap.c: 44: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1909  0024A4  84C5               	bsf	4037,2,c	;volatile
  1910  0024A6  B4C5               	btfsc	4037,2,c	;volatile
  1911  0024A8  D7FE               	goto	l480
  1912                           
  1913                           ;i2c_eeap.c: 45: return ( -3 );
  1914  0024AA  0EFD               	movlw	253
  1915  0024AC  0012               	return	
  1916  0024AE                     l478:
  1917  0024AE  BCC5               	btfsc	4037,6,c	;volatile
  1918  0024B0  D7EA               	goto	l470
  1919                           
  1920                           ;i2c_eeap.c: 46: }
  1921                           ;i2c_eeap.c: 47: }
  1922                           ;i2c_eeap.c: 48: }
  1923                           ;i2c_eeap.c: 50: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  1924  0024B2  84C5               	bsf	4037,2,c	;volatile
  1925  0024B4  B4C5               	btfsc	4037,2,c	;volatile
  1926  0024B6  D7FE               	goto	l484
  1927  0024B8                     u4170:
  1928                           
  1929                           ;i2c_eeap.c: 51: while ( SSPCON2bits.PEN );
  1930  0024B8  B4C5               	btfsc	4037,2,c	;volatile
  1931  0024BA  D7FE               	goto	u4170
  1932                           
  1933                           ;i2c_eeap.c: 52: if ( PIR2bits.BCLIF )
  1934  0024BC  A6A1               	btfss	4001,3,c	;volatile
  1935  0024BE  D002               	goto	l489
  1936                           
  1937                           ;i2c_eeap.c: 53: {
  1938                           ;i2c_eeap.c: 54: return ( -1 );
  1939  0024C0  0EFF               	movlw	255
  1940  0024C2  0012               	return	
  1941  0024C4                     l489:
  1942                           
  1943                           ;i2c_eeap.c: 55: }
  1944                           ;i2c_eeap.c: 56: return ( 0 );
  1945  0024C4  0E00               	movlw	0
  1946  0024C6  0012               	return	
  1947  0024C8                     __end_of_EEAckPolling:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           postinc0	equ	0xFEE
  1954                           wreg	equ	0xFE8
  1955                           postdec1	equ	0xFE5
  1956                           fsr1l	equ	0xFE1
  1957                           indf2	equ	0xFDF
  1958                           fsr2h	equ	0xFDA
  1959                           fsr2l	equ	0xFD9
  1960                           status	equ	0xFD8
  1961                           
  1962 ;; *************** function _test_readwrite *****************
  1963 ;; Defined at:
  1964 ;;		line 252 in file "main.c"
  1965 ;; Parameters:    Size  Location     Type
  1966 ;;		None
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;		None
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1978 ;;      Params:         0       0       0       0       0       0       0
  1979 ;;      Locals:         0       0       0       0       0       0       0
  1980 ;;      Temps:          0       2       0       0       0       0       0
  1981 ;;      Totals:         0       2       0       0       0       0       0
  1982 ;;Total ram usage:        2 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:    5
  1985 ;; This function calls:
  1986 ;;		_initXLCD
  1987 ;;		_print_data
  1988 ;;		_putsXLCD
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text5
  1995  00236E                     __ptext5:
  1996                           	opt stack 0
  1997  00236E                     _test_readwrite:
  1998                           	opt stack 25
  1999                           
  2000                           ;main.c: 262: initXLCD();
  2001                           
  2002                           ;incstack = 0
  2003  00236E  ECE2  F015         	call	_initXLCD	;wreg free
  2004                           
  2005                           ;main.c: 263: putsXLCD("SHOW DATA");
  2006  002372  0E9D               	movlw	low STR_3
  2007  002374  6E02               	movwf	putsXLCD@buffer,c
  2008  002376  0E06               	movlw	high STR_3
  2009  002378  6E03               	movwf	putsXLCD@buffer+1,c
  2010  00237A  EC8D  F013         	call	_putsXLCD	;wreg free
  2011                           
  2012                           ;main.c: 264: _delay((unsigned long)((2000)*(4000000/4000.0)));
  2013  00237E  0E0B               	movlw	11
  2014  002380  0100               	movlb	0	; () banked
  2015  002382  6F81               	movwf	(??_test_readwrite+1)& (0+255),b
  2016  002384  0E26               	movlw	38
  2017  002386  6F80               	movwf	??_test_readwrite& (0+255),b
  2018  002388  0E5D               	movlw	93
  2019  00238A                     u6917:
  2020  00238A  2EE8               	decfsz	wreg,f,c
  2021  00238C  D7FE               	bra	u6917
  2022  00238E  2F80               	decfsz	??_test_readwrite& (0+255),f,b
  2023  002390  D7FC               	bra	u6917
  2024  002392  2F81               	decfsz	(??_test_readwrite+1)& (0+255),f,b
  2025  002394  D7FA               	bra	u6917
  2026  002396  D000               	nop2	
  2027                           
  2028                           ;main.c: 265: initXLCD();
  2029  002398  ECE2  F015         	call	_initXLCD	;wreg free
  2030                           
  2031                           ;main.c: 267: print_data();
  2032  00239C  EC1D  F00F         	call	_print_data	;wreg free
  2033                           
  2034                           ;main.c: 269: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2035  0023A0  0E06               	movlw	6
  2036  0023A2  0100               	movlb	0	; () banked
  2037  0023A4  6F81               	movwf	(??_test_readwrite+1)& (0+255),b
  2038  0023A6  0E13               	movlw	19
  2039  0023A8  6F80               	movwf	??_test_readwrite& (0+255),b
  2040  0023AA  0EAD               	movlw	173
  2041  0023AC                     u6927:
  2042  0023AC  2EE8               	decfsz	wreg,f,c
  2043  0023AE  D7FE               	bra	u6927
  2044  0023B0  2F80               	decfsz	??_test_readwrite& (0+255),f,b
  2045  0023B2  D7FC               	bra	u6927
  2046  0023B4  2F81               	decfsz	(??_test_readwrite+1)& (0+255),f,b
  2047  0023B6  D7FA               	bra	u6927
  2048  0023B8  D000               	nop2	
  2049                           
  2050                           ;main.c: 270: initXLCD();
  2051  0023BA  ECE2  F015         	call	_initXLCD	;wreg free
  2052                           
  2053                           ;main.c: 271: putsXLCD("END");
  2054  0023BE  0EC0               	movlw	low STR_4
  2055  0023C0  6E02               	movwf	putsXLCD@buffer,c
  2056  0023C2  0E06               	movlw	high STR_4
  2057  0023C4  6E03               	movwf	putsXLCD@buffer+1,c
  2058  0023C6  EC8D  F013         	call	_putsXLCD	;wreg free
  2059                           
  2060                           ;main.c: 272: _delay((unsigned long)((1000)*(4000000/4000.0)));
  2061  0023CA  0E06               	movlw	6
  2062  0023CC  0100               	movlb	0	; () banked
  2063  0023CE  6F81               	movwf	(??_test_readwrite+1)& (0+255),b
  2064  0023D0  0E13               	movlw	19
  2065  0023D2  6F80               	movwf	??_test_readwrite& (0+255),b
  2066  0023D4  0EAD               	movlw	173
  2067  0023D6                     u6937:
  2068  0023D6  2EE8               	decfsz	wreg,f,c
  2069  0023D8  D7FE               	bra	u6937
  2070  0023DA  2F80               	decfsz	??_test_readwrite& (0+255),f,b
  2071  0023DC  D7FC               	bra	u6937
  2072  0023DE  2F81               	decfsz	(??_test_readwrite+1)& (0+255),f,b
  2073  0023E0  D7FA               	bra	u6937
  2074  0023E2  D000               	nop2	
  2075  0023E4  0012               	return		;funcret
  2076  0023E6                     __end_of_test_readwrite:
  2077                           	opt stack 0
  2078                           tblptru	equ	0xFF8
  2079                           tblptrh	equ	0xFF7
  2080                           tblptrl	equ	0xFF6
  2081                           tablat	equ	0xFF5
  2082                           postinc0	equ	0xFEE
  2083                           wreg	equ	0xFE8
  2084                           postdec1	equ	0xFE5
  2085                           fsr1l	equ	0xFE1
  2086                           indf2	equ	0xFDF
  2087                           fsr2h	equ	0xFDA
  2088                           fsr2l	equ	0xFD9
  2089                           status	equ	0xFD8
  2090                           
  2091 ;; *************** function _print_data *****************
  2092 ;; Defined at:
  2093 ;;		line 229 in file "main.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;		None
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  str_temp2       3  121[COMRAM] unsigned char [3]
  2098 ;;  temp            3  118[COMRAM] unsigned char [3]
  2099 ;;  time            3  112[COMRAM] unsigned char [3]
  2100 ;;  funion2         3  115[COMRAM] struct FLOAT
  2101 ;;  j               2  124[COMRAM] int 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  1    wreg      void 
  2104 ;; Registers used:
  2105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2111 ;;      Params:         0       0       0       0       0       0       0
  2112 ;;      Locals:        14       0       0       0       0       0       0
  2113 ;;      Temps:          4       0       0       0       0       0       0
  2114 ;;      Totals:        18       0       0       0       0       0       0
  2115 ;;Total ram usage:       18 bytes
  2116 ;; Hardware stack levels used:    1
  2117 ;; Hardware stack levels required when called:    4
  2118 ;; This function calls:
  2119 ;;		_initXLCD
  2120 ;;		_putsXLCD
  2121 ;;		_sprintf
  2122 ;; This function is called by:
  2123 ;;		_test_readwrite
  2124 ;;		_print_all_data
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text6
  2129  001E3A                     __ptext6:
  2130                           	opt stack 0
  2131  001E3A                     _print_data:
  2132                           	opt stack 25
  2133                           
  2134                           ;main.c: 231: int j = 0;
  2135                           
  2136                           ;incstack = 0
  2137  001E3A  0E00               	movlw	0
  2138  001E3C  6E7E               	movwf	print_data@j+1,c
  2139  001E3E  0E00               	movlw	0
  2140  001E40  6E7D               	movwf	print_data@j,c
  2141  001E42                     l4851:
  2142                           
  2143                           ;main.c: 232: union FLOAT funion2;
  2144                           ;main.c: 233: for(; j<3; j++)
  2145  001E42  BE7E               	btfsc	print_data@j+1,7,c
  2146  001E44  D006               	goto	l204
  2147  001E46  507E               	movf	print_data@j+1,w,c
  2148  001E48  E115               	bnz	l4861
  2149  001E4A  0E03               	movlw	3
  2150  001E4C  5C7D               	subwf	print_data@j,w,c
  2151  001E4E  B0D8               	btfsc	status,0,c
  2152  001E50  D011               	goto	u5560
  2153  001E52                     l204:
  2154                           
  2155                           ;main.c: 234: funion2.bytes[j] = result[j];
  2156  001E52  0EA9               	movlw	low _result
  2157  001E54  247D               	addwf	print_data@j,w,c
  2158  001E56  6ED9               	movwf	fsr2l,c
  2159  001E58  0E00               	movlw	high _result
  2160  001E5A  207E               	addwfc	print_data@j+1,w,c
  2161  001E5C  6EDA               	movwf	fsr2h,c
  2162  001E5E  0E74               	movlw	low print_data@funion2
  2163  001E60  247D               	addwf	print_data@j,w,c
  2164  001E62  6EE1               	movwf	fsr1l,c
  2165  001E64  0E00               	movlw	high print_data@funion2
  2166  001E66  207E               	addwfc	print_data@j+1,w,c
  2167  001E68  6EE2               	movwf	fsr1h,c
  2168  001E6A  CFDF FFE7          	movff	indf2,indf1
  2169  001E6E  4A7D               	infsnz	print_data@j,f,c
  2170  001E70  2A7E               	incf	print_data@j+1,f,c
  2171  001E72  D7E7               	goto	l4851
  2172  001E74                     u5560:
  2173  001E74                     l4861:
  2174                           
  2175                           ;main.c: 236: char temp[3];
  2176                           ;main.c: 237: sprintf(temp,"%.2f",funion2.number);
  2177  001E74  0E77               	movlw	low print_data@temp
  2178  001E76  6E40               	movwf	sprintf@sp,c
  2179  001E78  0E00               	movlw	high print_data@temp
  2180  001E7A  6E41               	movwf	sprintf@sp+1,c
  2181  001E7C  0EBB               	movlw	low STR_1
  2182  001E7E  6E42               	movwf	sprintf@f,c
  2183  001E80  0E06               	movlw	high STR_1
  2184  001E82  6E43               	movwf	sprintf@f+1,c
  2185  001E84  C074  F044         	movff	print_data@funion2,?_sprintf+4
  2186  001E88  C075  F045         	movff	print_data@funion2+1,?_sprintf+5
  2187  001E8C  C076  F046         	movff	print_data@funion2+2,?_sprintf+6
  2188  001E90  EC63  F003         	call	_sprintf	;wreg free
  2189  001E94                     l4863:
  2190                           
  2191                           ;main.c: 239: unsigned char time[3];
  2192                           ;main.c: 240: for(; j<6; j++)
  2193  001E94  BE7E               	btfsc	print_data@j+1,7,c
  2194  001E96  D006               	goto	l206
  2195  001E98  507E               	movf	print_data@j+1,w,c
  2196  001E9A  E121               	bnz	l4873
  2197  001E9C  0E06               	movlw	6
  2198  001E9E  5C7D               	subwf	print_data@j,w,c
  2199  001EA0  B0D8               	btfsc	status,0,c
  2200  001EA2  D01D               	goto	u5580
  2201  001EA4                     l206:
  2202                           
  2203                           ;main.c: 241: time[j-3] = result[j];
  2204  001EA4  0EA9               	movlw	low _result
  2205  001EA6  247D               	addwf	print_data@j,w,c
  2206  001EA8  6ED9               	movwf	fsr2l,c
  2207  001EAA  0E00               	movlw	high _result
  2208  001EAC  207E               	addwfc	print_data@j+1,w,c
  2209  001EAE  6EDA               	movwf	fsr2h,c
  2210  001EB0  0EFD               	movlw	253
  2211  001EB2  6E6D               	movwf	??_print_data& (0+255),c
  2212  001EB4  0EFF               	movlw	255
  2213  001EB6  6E6E               	movwf	(??_print_data+1)& (0+255),c
  2214  001EB8  C07D  F06F         	movff	print_data@j,??_print_data+2
  2215  001EBC  C07E  F070         	movff	print_data@j+1,??_print_data+3
  2216  001EC0  506D               	movf	??_print_data,w,c
  2217  001EC2  266F               	addwf	??_print_data+2,f,c
  2218  001EC4  506E               	movf	??_print_data+1,w,c
  2219  001EC6  2270               	addwfc	??_print_data+3,f,c
  2220  001EC8  0E71               	movlw	low print_data@time
  2221  001ECA  246F               	addwf	??_print_data+2,w,c
  2222  001ECC  6EE1               	movwf	fsr1l,c
  2223  001ECE  0E00               	movlw	high print_data@time
  2224  001ED0  2070               	addwfc	??_print_data+3,w,c
  2225  001ED2  6EE2               	movwf	fsr1h,c
  2226  001ED4  CFDF FFE7          	movff	indf2,indf1
  2227  001ED8  4A7D               	infsnz	print_data@j,f,c
  2228  001EDA  2A7E               	incf	print_data@j+1,f,c
  2229  001EDC  D7DB               	goto	l4863
  2230  001EDE                     u5580:
  2231  001EDE                     l4873:
  2232                           
  2233                           ;main.c: 243: initXLCD();
  2234  001EDE  ECE2  F015         	call	_initXLCD	;wreg free
  2235                           
  2236                           ;main.c: 244: unsigned char str_temp2[3];
  2237                           ;main.c: 245: sprintf(str_temp2,"%s %d:%d:%d",temp, time[0],time[1],time[2]);
  2238  001EE2  0E7A               	movlw	low print_data@str_temp2
  2239  001EE4  6E40               	movwf	sprintf@sp,c
  2240  001EE6  0E00               	movlw	high print_data@str_temp2
  2241  001EE8  6E41               	movwf	sprintf@sp+1,c
  2242  001EEA  0E85               	movlw	low STR_2
  2243  001EEC  6E42               	movwf	sprintf@f,c
  2244  001EEE  0E06               	movlw	high STR_2
  2245  001EF0  6E43               	movwf	sprintf@f+1,c
  2246  001EF2  0E77               	movlw	low print_data@temp
  2247  001EF4  6E44               	movwf	?_sprintf+4,c
  2248  001EF6  0E00               	movlw	high print_data@temp
  2249  001EF8  6E45               	movwf	?_sprintf+5,c
  2250  001EFA  C071  F046         	movff	print_data@time,?_sprintf+6
  2251  001EFE  6A47               	clrf	?_sprintf+7,c
  2252  001F00  C072  F048         	movff	print_data@time+1,?_sprintf+8
  2253  001F04  6A49               	clrf	?_sprintf+9,c
  2254  001F06  C073  F04A         	movff	print_data@time+2,?_sprintf+10
  2255  001F0A  6A4B               	clrf	?_sprintf+11,c
  2256  001F0C  EC63  F003         	call	_sprintf	;wreg free
  2257                           
  2258                           ;main.c: 246: putsXLCD(str_temp2);
  2259  001F10  0E7A               	movlw	low print_data@str_temp2
  2260  001F12  6E02               	movwf	putsXLCD@buffer,c
  2261  001F14  0E00               	movlw	high print_data@str_temp2
  2262  001F16  6E03               	movwf	putsXLCD@buffer+1,c
  2263  001F18  EC8D  F013         	call	_putsXLCD	;wreg free
  2264  001F1C  0012               	return		;funcret
  2265  001F1E                     __end_of_print_data:
  2266                           	opt stack 0
  2267                           tblptru	equ	0xFF8
  2268                           tblptrh	equ	0xFF7
  2269                           tblptrl	equ	0xFF6
  2270                           tablat	equ	0xFF5
  2271                           postinc0	equ	0xFEE
  2272                           wreg	equ	0xFE8
  2273                           indf1	equ	0xFE7
  2274                           postdec1	equ	0xFE5
  2275                           fsr1h	equ	0xFE2
  2276                           fsr1l	equ	0xFE1
  2277                           indf2	equ	0xFDF
  2278                           fsr2h	equ	0xFDA
  2279                           fsr2l	equ	0xFD9
  2280                           status	equ	0xFD8
  2281                           
  2282 ;; *************** function _sprintf *****************
  2283 ;; Defined at:
  2284 ;;		line 492 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;  sp              2   63[COMRAM] PTR unsigned char 
  2287 ;;		 -> main@str_tmp(10), main@time(20), print_data@str_temp2(3), print_data@temp(3), 
  2288 ;;  f               2   65[COMRAM] PTR const unsigned char 
  2289 ;;		 -> STR_9(8), STR_8(9), STR_2(12), STR_1(5), 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  val             4   98[COMRAM] unsigned long 
  2292 ;;  tmpval          4   94[COMRAM] struct .
  2293 ;;  fval            3  102[COMRAM] struct .
  2294 ;;  prec            2  105[COMRAM] int 
  2295 ;;  exp             2   92[COMRAM] int 
  2296 ;;  flag            2   90[COMRAM] unsigned short 
  2297 ;;  ap              2   88[COMRAM] PTR void [1]
  2298 ;;		 -> ?_sprintf(2), 
  2299 ;;  cp              2   86[COMRAM] PTR const unsigned char 
  2300 ;;		 -> STR_11(7), main@time(20), print_data@temp(3), 
  2301 ;;  len             2   84[COMRAM] unsigned int 
  2302 ;;  width           2    0        int 
  2303 ;;  c               1  107[COMRAM] char 
  2304 ;;  d               1    0        unsigned char 
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  2   63[COMRAM] int 
  2307 ;; Registers used:
  2308 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2314 ;;      Params:        12       0       0       0       0       0       0
  2315 ;;      Locals:        27       0       0       0       0       0       0
  2316 ;;      Temps:          6       0       0       0       0       0       0
  2317 ;;      Totals:        45       0       0       0       0       0       0
  2318 ;;Total ram usage:       45 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    3
  2321 ;; This function calls:
  2322 ;;		___awdiv
  2323 ;;		___ftadd
  2324 ;;		___ftge
  2325 ;;		___ftmul
  2326 ;;		___ftneg
  2327 ;;		___ftsub
  2328 ;;		___fttol
  2329 ;;		___lldiv
  2330 ;;		___llmod
  2331 ;;		___lltoft
  2332 ;;		___wmul
  2333 ;;		__div_to_l_
  2334 ;;		__tdiv_to_l_
  2335 ;;		_fround
  2336 ;;		_isdigit
  2337 ;;		_scale
  2338 ;; This function is called by:
  2339 ;;		_print_data
  2340 ;;		_main
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text7
  2345  0006C6                     __ptext7:
  2346                           	opt stack 0
  2347  0006C6                     _sprintf:
  2348                           	opt stack 25
  2349                           
  2350                           ;doprnt.c: 494: va_list ap;
  2351                           ;doprnt.c: 499: signed char c;
  2352                           ;doprnt.c: 501: int width;
  2353                           ;doprnt.c: 504: int prec;
  2354                           ;doprnt.c: 508: unsigned short flag;
  2355                           ;doprnt.c: 515: char d;
  2356                           ;doprnt.c: 516: double fval;
  2357                           ;doprnt.c: 517: int exp;
  2358                           ;doprnt.c: 523: union {
  2359                           ;doprnt.c: 524: unsigned long vd;
  2360                           ;doprnt.c: 525: double integ;
  2361                           ;doprnt.c: 526: } tmpval;
  2362                           ;doprnt.c: 528: unsigned long val;
  2363                           ;doprnt.c: 529: unsigned len;
  2364                           ;doprnt.c: 530: const char * cp;
  2365                           ;doprnt.c: 533: *ap = __va_start();
  2366                           
  2367                           ;incstack = 0
  2368  0006C6  0E44               	movlw	low (?_sprintf+4)
  2369  0006C8  6E59               	movwf	sprintf@ap,c
  2370  0006CA  0E00               	movlw	high (?_sprintf+4)
  2371  0006CC  6E5A               	movwf	sprintf@ap+1,c
  2372                           
  2373                           ;doprnt.c: 536: while(c = *f++) {
  2374  0006CE  EFB7  F007         	goto	u5310
  2375  0006D2                     
  2376                           ;doprnt.c: 538: if(c != '%')
  2377  0006D2  0E25               	movlw	37
  2378  0006D4  186C               	xorwf	sprintf@c,w,c
  2379  0006D6  B4D8               	btfsc	status,2,c
  2380  0006D8  D00A               	goto	l1031
  2381                           
  2382                           ;doprnt.c: 540: {
  2383                           ;doprnt.c: 541: ((*sp++ = (c)));
  2384  0006DA  C040  FFD9         	movff	sprintf@sp,fsr2l
  2385  0006DE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2386  0006E2  C06C  FFDF         	movff	sprintf@c,indf2
  2387  0006E6  4A40               	infsnz	sprintf@sp,f,c
  2388  0006E8  2A41               	incf	sprintf@sp+1,f,c
  2389                           
  2390                           ;doprnt.c: 542: continue;
  2391  0006EA  EFB7  F007         	goto	u5310
  2392  0006EE                     l1031:
  2393                           
  2394                           ;doprnt.c: 543: }
  2395                           ;doprnt.c: 548: flag = 0;
  2396  0006EE  0E00               	movlw	0
  2397  0006F0  6E5C               	movwf	sprintf@flag+1,c
  2398  0006F2  0E00               	movlw	0
  2399  0006F4  6E5B               	movwf	sprintf@flag,c
  2400                           
  2401                           ;doprnt.c: 611: if(*f == '.') {
  2402  0006F6  C042  FFF6         	movff	sprintf@f,tblptrl
  2403  0006FA  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2404  0006FE                     	if	0	;tblptru may be non-zero
  2405  0006FE                     	endif
  2406  0006FE                     	if	0	;tblptru may be non-zero
  2407  0006FE                     	endif
  2408  0006FE  0008               	tblrd		*
  2409  000700  50F5               	movf	tablat,w,c
  2410  000702  0A2E               	xorlw	46
  2411  000704  A4D8               	btfss	status,2,c
  2412  000706  D02E               	goto	l1032
  2413                           
  2414                           ;doprnt.c: 612: flag |= 0x4000;
  2415  000708  8C5C               	bsf	sprintf@flag+1,6,c
  2416                           
  2417                           ;doprnt.c: 613: f++;
  2418  00070A  4A42               	infsnz	sprintf@f,f,c
  2419  00070C  2A43               	incf	sprintf@f+1,f,c
  2420                           
  2421                           ;doprnt.c: 620: {
  2422                           ;doprnt.c: 621: prec = 0;
  2423  00070E  0E00               	movlw	0
  2424  000710  6E6B               	movwf	sprintf@prec+1,c
  2425  000712  0E00               	movlw	0
  2426  000714  6E6A               	movwf	sprintf@prec,c
  2427                           
  2428                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2429  000716  D01B               	goto	l1033
  2430  000718                     
  2431                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2432  000718  C06A  F00F         	movff	sprintf@prec,___wmul@multiplier
  2433  00071C  C06B  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  2434  000720  0E00               	movlw	0
  2435  000722  6E12               	movwf	___wmul@multiplicand+1,c
  2436  000724  0E0A               	movlw	10
  2437  000726  6E11               	movwf	___wmul@multiplicand,c
  2438  000728  ECAE  F015         	call	___wmul	;wreg free
  2439  00072C  C042  FFF6         	movff	sprintf@f,tblptrl
  2440  000730  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2441  000734                     	if	0	;tblptru may be non-zero
  2442  000734                     	endif
  2443  000734                     	if	0	;tblptru may be non-zero
  2444  000734                     	endif
  2445  000734  0008               	tblrd		*
  2446  000736  50F5               	movf	tablat,w,c
  2447  000738  260F               	addwf	?___wmul,f,c
  2448  00073A  0E00               	movlw	0
  2449  00073C  2210               	addwfc	?___wmul+1,f,c
  2450  00073E  0ED0               	movlw	208
  2451  000740  240F               	addwf	?___wmul,w,c
  2452  000742  6E6A               	movwf	sprintf@prec,c
  2453  000744  0EFF               	movlw	255
  2454  000746  2010               	addwfc	?___wmul+1,w,c
  2455  000748  6E6B               	movwf	sprintf@prec+1,c
  2456  00074A  4A42               	infsnz	sprintf@f,f,c
  2457  00074C  2A43               	incf	sprintf@f+1,f,c
  2458  00074E                     l1033:
  2459  00074E  C042  FFF6         	movff	sprintf@f,tblptrl
  2460  000752  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2461  000756                     	if	0	;tblptru may be non-zero
  2462  000756                     	endif
  2463  000756                     	if	0	;tblptru may be non-zero
  2464  000756                     	endif
  2465  000756  0008               	tblrd		*
  2466  000758  50F5               	movf	tablat,w,c
  2467  00075A  ECD3  F015         	call	_isdigit
  2468  00075E  A0D8               	btfss	status,0,c
  2469  000760  D06E               	goto	l1037
  2470  000762  D7DA               	goto	l1034
  2471  000764                     l1032:
  2472                           
  2473                           ;doprnt.c: 626: prec = 0;
  2474  000764  0E00               	movlw	0
  2475  000766  6E6B               	movwf	sprintf@prec+1,c
  2476  000768  0E00               	movlw	0
  2477  00076A  6E6A               	movwf	sprintf@prec,c
  2478                           
  2479                           ;doprnt.c: 628: flag |= 0x1000;
  2480  00076C  885C               	bsf	sprintf@flag+1,4,c
  2481                           
  2482                           ;doprnt.c: 630: }
  2483                           ;doprnt.c: 635: switch(c = *f++) {
  2484  00076E  D067               	goto	l1037
  2485  000770                     
  2486                           ;doprnt.c: 663: flag |= 0x400;
  2487  000770  845C               	bsf	sprintf@flag+1,2,c
  2488                           
  2489                           ;doprnt.c: 698: case 'i':
  2490                           ;doprnt.c: 699: break;
  2491                           
  2492                           ;doprnt.c: 697: case 'd':
  2493                           
  2494                           ;doprnt.c: 664: break;
  2495  000772  D07F               	goto	l1041
  2496  000774                     
  2497                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2498  000774  C059  FFD9         	movff	sprintf@ap,fsr2l
  2499  000778  C05A  FFDA         	movff	sprintf@ap+1,fsr2h
  2500  00077C  CFDE F057          	movff	postinc2,sprintf@cp
  2501  000780  CFDD F058          	movff	postdec2,sprintf@cp+1
  2502  000784  0E02               	movlw	2
  2503  000786  2659               	addwf	sprintf@ap,f,c
  2504  000788  0E00               	movlw	0
  2505  00078A  225A               	addwfc	sprintf@ap+1,f,c
  2506                           
  2507                           ;doprnt.c: 740: if(!cp)
  2508  00078C  5057               	movf	sprintf@cp,w,c
  2509  00078E  1058               	iorwf	sprintf@cp+1,w,c
  2510  000790  A4D8               	btfss	status,2,c
  2511  000792  D004               	goto	l1045
  2512                           
  2513                           ;doprnt.c: 741: cp = "(null)";
  2514  000794  0EAF               	movlw	low STR_11
  2515  000796  6E57               	movwf	sprintf@cp,c
  2516  000798  0E06               	movlw	high STR_11
  2517  00079A  6E58               	movwf	sprintf@cp+1,c
  2518  00079C                     l1045:
  2519                           
  2520                           ;doprnt.c: 745: len = 0;
  2521  00079C  0E00               	movlw	0
  2522  00079E  6E56               	movwf	sprintf@len+1,c
  2523  0007A0  0E00               	movlw	0
  2524  0007A2  6E55               	movwf	sprintf@len,c
  2525                           
  2526                           ;doprnt.c: 746: while(cp[len])
  2527  0007A4  D002               	goto	l1046
  2528  0007A6                     
  2529                           ;doprnt.c: 747: len++;
  2530  0007A6  4A55               	infsnz	sprintf@len,f,c
  2531  0007A8  2A56               	incf	sprintf@len+1,f,c
  2532  0007AA                     l1046:
  2533  0007AA  5055               	movf	sprintf@len,w,c
  2534  0007AC  2457               	addwf	sprintf@cp,w,c
  2535  0007AE  6E4C               	movwf	??_sprintf& (0+255),c
  2536  0007B0  5056               	movf	sprintf@len+1,w,c
  2537  0007B2  2058               	addwfc	sprintf@cp+1,w,c
  2538  0007B4  6E4D               	movwf	(??_sprintf+1)& (0+255),c
  2539  0007B6  C04C  FFF6         	movff	??_sprintf,tblptrl
  2540  0007BA  C04D  FFF7         	movff	??_sprintf+1,tblptrh
  2541  0007BE  6AF8               	clrf	tblptru,c
  2542  0007C0  0E05               	movlw	(high __ramtop+-1)
  2543  0007C2  64F7               	cpfsgt	tblptrh,c
  2544  0007C4  D003               	bra	u4927
  2545  0007C6  0008               	tblrd		*
  2546  0007C8  50F5               	movf	tablat,w,c
  2547  0007CA  D005               	bra	u4920
  2548  0007CC                     u4927:
  2549  0007CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  2550  0007D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  2551  0007D4  50EF               	movf	indf0,w,c
  2552  0007D6                     u4920:
  2553  0007D6  0900               	iorlw	0
  2554  0007D8  A4D8               	btfss	status,2,c
  2555  0007DA  D7E5               	goto	l1047
  2556                           
  2557                           ;doprnt.c: 753: if(prec && prec < len)
  2558  0007DC  506A               	movf	sprintf@prec,w,c
  2559  0007DE  106B               	iorwf	sprintf@prec+1,w,c
  2560  0007E0  B4D8               	btfsc	status,2,c
  2561  0007E2  D024               	goto	l1050
  2562  0007E4  5055               	movf	sprintf@len,w,c
  2563  0007E6  5C6A               	subwf	sprintf@prec,w,c
  2564  0007E8  5056               	movf	sprintf@len+1,w,c
  2565  0007EA  586B               	subwfb	sprintf@prec+1,w,c
  2566  0007EC  B0D8               	btfsc	status,0,c
  2567  0007EE  D01E               	goto	l1050
  2568                           
  2569                           ;doprnt.c: 754: len = prec;
  2570  0007F0  C06A  F055         	movff	sprintf@prec,sprintf@len
  2571  0007F4  C06B  F056         	movff	sprintf@prec+1,sprintf@len+1
  2572                           
  2573                           ;doprnt.c: 767: while(len--)
  2574  0007F8  D019               	goto	l1050
  2575  0007FA                     l4525:
  2576                           
  2577                           ;doprnt.c: 768: ((*sp++ = (*cp++)));
  2578  0007FA  C057  FFF6         	movff	sprintf@cp,tblptrl
  2579  0007FE  C058  FFF7         	movff	sprintf@cp+1,tblptrh
  2580  000802  6AF8               	clrf	tblptru,c
  2581  000804  C040  FFD9         	movff	sprintf@sp,fsr2l
  2582  000808  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2583  00080C  0E05               	movlw	(high __ramtop+-1)
  2584  00080E  64F7               	cpfsgt	tblptrh,c
  2585  000810  D003               	bra	u4967
  2586  000812  0008               	tblrd		*
  2587  000814  50F5               	movf	tablat,w,c
  2588  000816  D005               	bra	u4960
  2589  000818                     u4967:
  2590  000818  CFF6 FFE9          	movff	tblptrl,fsr0l
  2591  00081C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2592  000820  50EF               	movf	indf0,w,c
  2593  000822                     u4960:
  2594  000822  6EDF               	movwf	indf2,c
  2595  000824  4A57               	infsnz	sprintf@cp,f,c
  2596  000826  2A58               	incf	sprintf@cp+1,f,c
  2597  000828  4A40               	infsnz	sprintf@sp,f,c
  2598  00082A  2A41               	incf	sprintf@sp+1,f,c
  2599  00082C                     l1050:
  2600  00082C  0655               	decf	sprintf@len,f,c
  2601  00082E  A0D8               	btfss	status,0,c
  2602  000830  0656               	decf	sprintf@len+1,f,c
  2603  000832  2855               	incf	sprintf@len,w,c
  2604  000834  E1E2               	bnz	l4525
  2605  000836  2856               	incf	sprintf@len+1,w,c
  2606  000838  B4D8               	btfsc	status,2,c
  2607  00083A  D399               	goto	u5310
  2608  00083C  D7DE               	goto	l1051
  2609  00083E                     l1037:
  2610  00083E  C042  FFF6         	movff	sprintf@f,tblptrl
  2611  000842  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2612  000846  4A42               	infsnz	sprintf@f,f,c
  2613  000848  2A43               	incf	sprintf@f+1,f,c
  2614  00084A                     	if	0	;tblptru may be non-zero
  2615  00084A                     	endif
  2616  00084A                     	if	0	;tblptru may be non-zero
  2617  00084A                     	endif
  2618  00084A  0008               	tblrd		*
  2619  00084C  CFF5 F06C          	movff	tablat,sprintf@c
  2620  000850  506C               	movf	sprintf@c,w,c
  2621                           
  2622                           ; Switch size 1, requested type "space"
  2623                           ; Number of cases is 5, Range of values is 0 to 115
  2624                           ; switch strategies available:
  2625                           ; Name         Instructions Cycles
  2626                           ; simple_byte           16     9 (average)
  2627                           ;	Chosen strategy is simple_byte
  2628  000852  0A00               	xorlw	0	; case 0
  2629  000854  B4D8               	btfsc	status,2,c
  2630  000856  D398               	goto	u5320
  2631  000858  0A64               	xorlw	100	; case 100
  2632  00085A  B4D8               	btfsc	status,2,c
  2633  00085C  D00A               	goto	l1041
  2634  00085E  0A02               	xorlw	2	; case 102
  2635  000860  B4D8               	btfsc	status,2,c
  2636  000862  D786               	goto	l1040
  2637  000864  0A0F               	xorlw	15	; case 105
  2638  000866  B4D8               	btfsc	status,2,c
  2639  000868  D004               	goto	l1041
  2640  00086A  0A1A               	xorlw	26	; case 115
  2641  00086C  B4D8               	btfsc	status,2,c
  2642  00086E  D782               	goto	l1044
  2643  000870  D37E               	goto	u5310
  2644  000872                     l1041:
  2645                           
  2646                           ;doprnt.c: 825: if(flag & (0x700)) {
  2647  000872  0E07               	movlw	7
  2648  000874  145C               	andwf	sprintf@flag+1,w,c
  2649  000876  B4D8               	btfsc	status,2,c
  2650  000878  D2B9               	goto	l1054
  2651                           
  2652                           ;doprnt.c: 827: if(flag & 0x1000)
  2653  00087A  A85C               	btfss	sprintf@flag+1,4,c
  2654  00087C  D004               	goto	l1055
  2655                           
  2656                           ;doprnt.c: 829: prec = 6;
  2657  00087E  0E00               	movlw	0
  2658  000880  6E6B               	movwf	sprintf@prec+1,c
  2659  000882  0E06               	movlw	6
  2660  000884  6E6A               	movwf	sprintf@prec,c
  2661  000886                     l1055:
  2662                           
  2663                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2664  000886  C059  FFD9         	movff	sprintf@ap,fsr2l
  2665  00088A  C05A  FFDA         	movff	sprintf@ap+1,fsr2h
  2666  00088E  CFDE F067          	movff	postinc2,sprintf@fval
  2667  000892  CFDE F068          	movff	postinc2,sprintf@fval+1
  2668  000896  CFDD F069          	movff	postdec2,sprintf@fval+2
  2669  00089A  0E03               	movlw	3
  2670  00089C  2659               	addwf	sprintf@ap,f,c
  2671  00089E  0E00               	movlw	0
  2672  0008A0  225A               	addwfc	sprintf@ap+1,f,c
  2673                           
  2674                           ;doprnt.c: 831: if(fval < 0.0) {
  2675  0008A2  AE69               	btfss	sprintf@fval+2,7,c
  2676  0008A4  D010               	goto	l1056
  2677                           
  2678                           ;doprnt.c: 832: fval = -fval;
  2679  0008A6  C067  F001         	movff	sprintf@fval,___ftneg@f1
  2680  0008AA  C068  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  2681  0008AE  C069  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  2682  0008B2  ECC1  F015         	call	___ftneg	;wreg free
  2683  0008B6  C001  F067         	movff	?___ftneg,sprintf@fval
  2684  0008BA  C002  F068         	movff	?___ftneg+1,sprintf@fval+1
  2685  0008BE  C003  F069         	movff	?___ftneg+2,sprintf@fval+2
  2686                           
  2687                           ;doprnt.c: 833: flag |= 0x03;
  2688  0008C2  0E03               	movlw	3
  2689  0008C4  125B               	iorwf	sprintf@flag,f,c
  2690  0008C6                     l1056:
  2691                           
  2692                           ;doprnt.c: 834: }
  2693                           ;doprnt.c: 835: exp = 0;
  2694  0008C6  0E00               	movlw	0
  2695  0008C8  6E5E               	movwf	sprintf@exp+1,c
  2696  0008CA  0E00               	movlw	0
  2697  0008CC  6E5D               	movwf	sprintf@exp,c
  2698                           
  2699                           ;doprnt.c: 836: if( fval!=0) {
  2700  0008CE  5067               	movf	sprintf@fval,w,c
  2701  0008D0  1068               	iorwf	sprintf@fval+1,w,c
  2702  0008D2  1069               	iorwf	sprintf@fval+2,w,c
  2703  0008D4  B4D8               	btfsc	status,2,c
  2704  0008D6  D083               	goto	l1061
  2705                           
  2706                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2707  0008D8  0E82               	movlw	130
  2708  0008DA  6E4C               	movwf	??_sprintf& (0+255),c
  2709  0008DC  0EFF               	movlw	255
  2710  0008DE  6E4D               	movwf	(??_sprintf+1)& (0+255),c
  2711  0008E0  C067  F04E         	movff	sprintf@fval,??_sprintf+2
  2712  0008E4  C068  F04F         	movff	sprintf@fval+1,??_sprintf+3
  2713  0008E8  C069  F050         	movff	sprintf@fval+2,??_sprintf+4
  2714  0008EC  C06A  F051         	movff	sprintf@fval+3,??_sprintf+5
  2715  0008F0  0E10               	movlw	16
  2716  0008F2  D005               	goto	u5020
  2717  0008F4                     u5025:
  2718  0008F4  90D8               	bcf	status,0,c
  2719  0008F6  3251               	rrcf	??_sprintf+5,f,c
  2720  0008F8  3250               	rrcf	??_sprintf+4,f,c
  2721  0008FA  324F               	rrcf	??_sprintf+3,f,c
  2722  0008FC  324E               	rrcf	??_sprintf+2,f,c
  2723  0008FE                     u5020:
  2724  0008FE  2EE8               	decfsz	wreg,f,c
  2725  000900  D7F9               	goto	u5025
  2726  000902  504E               	movf	??_sprintf+2,w,c
  2727  000904  244C               	addwf	??_sprintf,w,c
  2728  000906  6E5D               	movwf	sprintf@exp,c
  2729  000908  0E00               	movlw	0
  2730  00090A  204D               	addwfc	??_sprintf+1,w,c
  2731  00090C  6E5E               	movwf	sprintf@exp+1,c
  2732                           
  2733                           ;doprnt.c: 838: exp--;
  2734  00090E  065D               	decf	sprintf@exp,f,c
  2735  000910  A0D8               	btfss	status,0,c
  2736  000912  065E               	decf	sprintf@exp+1,f,c
  2737                           
  2738                           ;doprnt.c: 839: exp *= 3;
  2739  000914  C05D  F00F         	movff	sprintf@exp,___wmul@multiplier
  2740  000918  C05E  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  2741  00091C  0E00               	movlw	0
  2742  00091E  6E12               	movwf	___wmul@multiplicand+1,c
  2743  000920  0E03               	movlw	3
  2744  000922  6E11               	movwf	___wmul@multiplicand,c
  2745  000924  ECAE  F015         	call	___wmul	;wreg free
  2746  000928  C00F  F05D         	movff	?___wmul,sprintf@exp
  2747  00092C  C010  F05E         	movff	?___wmul+1,sprintf@exp+1
  2748                           
  2749                           ;doprnt.c: 840: exp /= 10;
  2750  000930  C05D  F007         	movff	sprintf@exp,___awdiv@dividend
  2751  000934  C05E  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  2752  000938  0E00               	movlw	0
  2753  00093A  6E0A               	movwf	___awdiv@divisor+1,c
  2754  00093C  0E0A               	movlw	10
  2755  00093E  6E09               	movwf	___awdiv@divisor,c
  2756  000940  EC34  F011         	call	___awdiv	;wreg free
  2757  000944  C007  F05D         	movff	?___awdiv,sprintf@exp
  2758  000948  C008  F05E         	movff	?___awdiv+1,sprintf@exp+1
  2759                           
  2760                           ;doprnt.c: 841: if(exp < 0)
  2761  00094C  AE5E               	btfss	sprintf@exp+1,7,c
  2762  00094E  D003               	goto	l1058
  2763                           
  2764                           ;doprnt.c: 842: exp--;
  2765  000950  065D               	decf	sprintf@exp,f,c
  2766  000952  A0D8               	btfss	status,0,c
  2767  000954  065E               	decf	sprintf@exp+1,f,c
  2768  000956                     l1058:
  2769                           
  2770                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2771  000956  505D               	movf	sprintf@exp,w,c
  2772  000958  0800               	sublw	0
  2773  00095A  ECCB  F007         	call	_scale
  2774  00095E  C024  F05F         	movff	?_scale,sprintf@tmpval
  2775  000962  C025  F060         	movff	?_scale+1,sprintf@tmpval+1
  2776  000966  C026  F061         	movff	?_scale+2,sprintf@tmpval+2
  2777                           
  2778                           ;doprnt.c: 847: tmpval.integ *= fval;
  2779  00096A  C05F  F015         	movff	sprintf@tmpval,___ftmul@f1
  2780  00096E  C060  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  2781  000972  C061  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  2782  000976  C067  F018         	movff	sprintf@fval,___ftmul@f2
  2783  00097A  C068  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2784  00097E  C069  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2785  000982  EC30  F00E         	call	___ftmul	;wreg free
  2786  000986  C015  F05F         	movff	?___ftmul,sprintf@tmpval
  2787  00098A  C016  F060         	movff	?___ftmul+1,sprintf@tmpval+1
  2788  00098E  C017  F061         	movff	?___ftmul+2,sprintf@tmpval+2
  2789                           
  2790                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2791  000992  C05F  F001         	movff	sprintf@tmpval,___ftge@ff1
  2792  000996  C060  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2793  00099A  C061  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2794  00099E  0E00               	movlw	0
  2795  0009A0  6E04               	movwf	___ftge@ff2,c
  2796  0009A2  0E80               	movlw	128
  2797  0009A4  6E05               	movwf	___ftge@ff2+1,c
  2798  0009A6  0E3F               	movlw	63
  2799  0009A8  6E06               	movwf	___ftge@ff2+2,c
  2800  0009AA  ECEC  F010         	call	___ftge	;wreg free
  2801  0009AE  B0D8               	btfsc	status,0,c
  2802  0009B0  D004               	goto	l1059
  2803                           
  2804                           ;doprnt.c: 849: exp--;
  2805  0009B2  065D               	decf	sprintf@exp,f,c
  2806  0009B4  A0D8               	btfss	status,0,c
  2807  0009B6  065E               	decf	sprintf@exp+1,f,c
  2808  0009B8  D012               	goto	l1061
  2809  0009BA                     l1059:
  2810                           
  2811                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2812  0009BA  C05F  F001         	movff	sprintf@tmpval,___ftge@ff1
  2813  0009BE  C060  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2814  0009C2  C061  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2815  0009C6  0E00               	movlw	0
  2816  0009C8  6E04               	movwf	___ftge@ff2,c
  2817  0009CA  0E20               	movlw	32
  2818  0009CC  6E05               	movwf	___ftge@ff2+1,c
  2819  0009CE  0E41               	movlw	65
  2820  0009D0  6E06               	movwf	___ftge@ff2+2,c
  2821  0009D2  ECEC  F010         	call	___ftge	;wreg free
  2822  0009D6  A0D8               	btfss	status,0,c
  2823  0009D8  D002               	goto	l1061
  2824                           
  2825                           ;doprnt.c: 851: exp++;
  2826  0009DA  4A5D               	infsnz	sprintf@exp,f,c
  2827  0009DC  2A5E               	incf	sprintf@exp+1,f,c
  2828  0009DE                     l1061:
  2829                           
  2830                           ;doprnt.c: 852: }
  2831                           ;doprnt.c: 1112: if(prec <= 12)
  2832  0009DE  BE6B               	btfsc	sprintf@prec+1,7,c
  2833  0009E0  D006               	goto	u5060
  2834  0009E2  506B               	movf	sprintf@prec+1,w,c
  2835  0009E4  E11B               	bnz	l4585
  2836  0009E6  0E0D               	movlw	13
  2837  0009E8  5C6A               	subwf	sprintf@prec,w,c
  2838  0009EA  B0D8               	btfsc	status,0,c
  2839  0009EC  D017               	goto	l1062
  2840  0009EE                     u5060:
  2841                           
  2842                           ;doprnt.c: 1113: fval += fround(prec);
  2843  0009EE  C067  F02E         	movff	sprintf@fval,___ftadd@f1
  2844  0009F2  C068  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  2845  0009F6  C069  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  2846  0009FA  506A               	movf	sprintf@prec,w,c
  2847  0009FC  ECCF  F009         	call	_fround
  2848  000A00  C024  F031         	movff	?_fround,___ftadd@f2
  2849  000A04  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2850  000A08  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2851  000A0C  ECF8  F00A         	call	___ftadd	;wreg free
  2852  000A10  C02E  F067         	movff	?___ftadd,sprintf@fval
  2853  000A14  C02F  F068         	movff	?___ftadd+1,sprintf@fval+1
  2854  000A18  C030  F069         	movff	?___ftadd+2,sprintf@fval+2
  2855  000A1C                     l1062:
  2856  000A1C                     l4585:
  2857                           
  2858                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2859  000A1C  BE5E               	btfsc	sprintf@exp+1,7,c
  2860  000A1E  D006               	goto	u5070
  2861  000A20  505E               	movf	sprintf@exp+1,w,c
  2862  000A22  E11E               	bnz	l4593
  2863  000A24  0E0A               	movlw	10
  2864  000A26  5C5D               	subwf	sprintf@exp,w,c
  2865  000A28  B0D8               	btfsc	status,0,c
  2866  000A2A  D01A               	goto	u5100
  2867  000A2C                     u5070:
  2868  000A2C  5067               	movf	sprintf@fval,w,c
  2869  000A2E  1068               	iorwf	sprintf@fval+1,w,c
  2870  000A30  1069               	iorwf	sprintf@fval+2,w,c
  2871  000A32  B4D8               	btfsc	status,2,c
  2872  000A34  D051               	goto	l1063
  2873  000A36  C067  F02B         	movff	sprintf@fval,___fttol@f1
  2874  000A3A  C068  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2875  000A3E  C069  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2876  000A42  ECB6  F00D         	call	___fttol	;wreg free
  2877  000A46  502B               	movf	?___fttol,w,c
  2878  000A48  102C               	iorwf	?___fttol+1,w,c
  2879  000A4A  102D               	iorwf	?___fttol+2,w,c
  2880  000A4C  102E               	iorwf	?___fttol+3,w,c
  2881  000A4E  B4D8               	btfsc	status,2,c
  2882  000A50  BE5E               	btfsc	sprintf@exp+1,7,c
  2883  000A52  D042               	goto	l1063
  2884  000A54  505E               	movf	sprintf@exp+1,w,c
  2885  000A56  E104               	bnz	l4593
  2886  000A58  0E02               	movlw	2
  2887  000A5A  5C5D               	subwf	sprintf@exp,w,c
  2888  000A5C  A0D8               	btfss	status,0,c
  2889  000A5E  D03C               	goto	l1063
  2890  000A60                     u5100:
  2891  000A60                     l4593:
  2892                           
  2893                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2894  000A60  C05F  F001         	movff	sprintf@tmpval,___ftge@ff1
  2895  000A64  C060  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  2896  000A68  C061  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  2897  000A6C  0E70               	movlw	112
  2898  000A6E  6E04               	movwf	___ftge@ff2,c
  2899  000A70  0E89               	movlw	137
  2900  000A72  6E05               	movwf	___ftge@ff2+1,c
  2901  000A74  0E40               	movlw	64
  2902  000A76  6E06               	movwf	___ftge@ff2+2,c
  2903  000A78  ECEC  F010         	call	___ftge	;wreg free
  2904  000A7C  B0D8               	btfsc	status,0,c
  2905  000A7E  D002               	goto	l1066
  2906                           
  2907                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2908  000A80  0EF7               	movlw	247
  2909  000A82  D001               	goto	L1
  2910  000A84                     l1066:
  2911                           
  2912                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2913  000A84  0EF8               	movlw	248
  2914  000A86                     L1:
  2915  000A86  265D               	addwf	sprintf@exp,f,c
  2916  000A88  0EFF               	movlw	255
  2917  000A8A  225E               	addwfc	sprintf@exp+1,f,c
  2918                           
  2919                           ;doprnt.c: 1124: }
  2920                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2921  000A8C  505D               	movf	sprintf@exp,w,c
  2922  000A8E  ECCB  F007         	call	_scale
  2923  000A92  C024  F05F         	movff	?_scale,sprintf@tmpval
  2924  000A96  C025  F060         	movff	?_scale+1,sprintf@tmpval+1
  2925  000A9A  C026  F061         	movff	?_scale+2,sprintf@tmpval+2
  2926                           
  2927                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2928  000A9E  C067  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2929  000AA2  C068  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2930  000AA6  C069  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2931  000AAA  C05F  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  2932  000AAE  C060  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  2933  000AB2  C061  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  2934  000AB6  EC89  F00C         	call	__tdiv_to_l_	;wreg free
  2935  000ABA  C001  F063         	movff	?__tdiv_to_l_,sprintf@val
  2936  000ABE  C002  F064         	movff	?__tdiv_to_l_+1,sprintf@val+1
  2937  000AC2  C003  F065         	movff	?__tdiv_to_l_+2,sprintf@val+2
  2938  000AC6  C004  F066         	movff	?__tdiv_to_l_+3,sprintf@val+3
  2939                           
  2940                           ;doprnt.c: 1129: fval = 0.0;
  2941  000ACA  0E00               	movlw	0
  2942  000ACC  6E67               	movwf	sprintf@fval,c
  2943  000ACE  0E00               	movlw	0
  2944  000AD0  6E68               	movwf	sprintf@fval+1,c
  2945  000AD2  0E00               	movlw	0
  2946  000AD4  6E69               	movwf	sprintf@fval+2,c
  2947                           
  2948                           ;doprnt.c: 1130: } else {
  2949  000AD6  D032               	goto	l1072
  2950  000AD8                     l1063:
  2951                           
  2952                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2953  000AD8  C067  F02B         	movff	sprintf@fval,___fttol@f1
  2954  000ADC  C068  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2955  000AE0  C069  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2956  000AE4  ECB6  F00D         	call	___fttol	;wreg free
  2957  000AE8  C02B  F063         	movff	?___fttol,sprintf@val
  2958  000AEC  C02C  F064         	movff	?___fttol+1,sprintf@val+1
  2959  000AF0  C02D  F065         	movff	?___fttol+2,sprintf@val+2
  2960  000AF4  C02E  F066         	movff	?___fttol+3,sprintf@val+3
  2961                           
  2962                           ;doprnt.c: 1132: fval -= (double)val;
  2963  000AF8  C067  F03A         	movff	sprintf@fval,___ftsub@f1
  2964  000AFC  C068  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2965  000B00  C069  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2966  000B04  C063  F009         	movff	sprintf@val,___lltoft@c
  2967  000B08  C064  F00A         	movff	sprintf@val+1,___lltoft@c+1
  2968  000B0C  C065  F00B         	movff	sprintf@val+2,___lltoft@c+2
  2969  000B10  C066  F00C         	movff	sprintf@val+3,___lltoft@c+3
  2970  000B14  EC5F  F013         	call	___lltoft	;wreg free
  2971  000B18  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2972  000B1C  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2973  000B20  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2974  000B24  EC7C  F014         	call	___ftsub	;wreg free
  2975  000B28  C03A  F067         	movff	?___ftsub,sprintf@fval
  2976  000B2C  C03B  F068         	movff	?___ftsub+1,sprintf@fval+1
  2977  000B30  C03C  F069         	movff	?___ftsub+2,sprintf@fval+2
  2978                           
  2979                           ;doprnt.c: 1133: exp = 0;
  2980  000B34  0E00               	movlw	0
  2981  000B36  6E5E               	movwf	sprintf@exp+1,c
  2982  000B38  0E00               	movlw	0
  2983  000B3A  6E5D               	movwf	sprintf@exp,c
  2984  000B3C                     l1072:
  2985                           
  2986                           ;doprnt.c: 1134: }
  2987                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2988  000B3C  0E01               	movlw	1
  2989  000B3E  6E6C               	movwf	sprintf@c,c
  2990  000B40                     l4613:
  2991  000B40  0E0A               	movlw	10
  2992  000B42  186C               	xorwf	sprintf@c,w,c
  2993  000B44  B4D8               	btfsc	status,2,c
  2994  000B46  D018               	goto	u5140
  2995                           
  2996                           ;doprnt.c: 1137: if(val < dpowers[c])
  2997  000B48  506C               	movf	sprintf@c,w,c
  2998  000B4A  0D04               	mullw	4
  2999  000B4C  0E01               	movlw	low _dpowers
  3000  000B4E  24F3               	addwf	prodl,w,c
  3001  000B50  6EF6               	movwf	tblptrl,c
  3002  000B52  0E06               	movlw	high _dpowers
  3003  000B54  20F4               	addwfc	prodh,w,c
  3004  000B56  6EF7               	movwf	tblptrh,c
  3005  000B58                     	if	0	;There are less than 3 active tblptr bytes
  3006  000B58                     	endif
  3007  000B58  0009               	tblrd		*+
  3008  000B5A  50F5               	movf	tablat,w,c
  3009  000B5C  5C63               	subwf	sprintf@val,w,c
  3010  000B5E  0009               	tblrd		*+
  3011  000B60  50F5               	movf	tablat,w,c
  3012  000B62  5864               	subwfb	sprintf@val+1,w,c
  3013  000B64  0009               	tblrd		*+
  3014  000B66  50F5               	movf	tablat,w,c
  3015  000B68  5865               	subwfb	sprintf@val+2,w,c
  3016  000B6A  0009               	tblrd		*+
  3017  000B6C  50F5               	movf	tablat,w,c
  3018  000B6E  5866               	subwfb	sprintf@val+3,w,c
  3019  000B70  A0D8               	btfss	status,0,c
  3020  000B72  D002               	goto	u5140
  3021                           
  3022                           ;doprnt.c: 1138: break;
  3023  000B74  2A6C               	incf	sprintf@c,f,c
  3024  000B76  D7E4               	goto	l4613
  3025  000B78                     u5140:
  3026                           
  3027                           ;doprnt.c: 1175: {
  3028                           ;doprnt.c: 1188: if(flag & 0x03)
  3029  000B78  0E03               	movlw	3
  3030  000B7A  145B               	andwf	sprintf@flag,w,c
  3031  000B7C  6E4C               	movwf	??_sprintf& (0+255),c
  3032  000B7E  0E00               	movlw	0
  3033  000B80  145C               	andwf	sprintf@flag+1,w,c
  3034  000B82  6E4D               	movwf	(??_sprintf+1)& (0+255),c
  3035  000B84  504C               	movf	??_sprintf,w,c
  3036  000B86  104D               	iorwf	??_sprintf+1,w,c
  3037  000B88  B4D8               	btfsc	status,2,c
  3038  000B8A  D04F               	goto	l1077
  3039                           
  3040                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3041  000B8C  C040  FFD9         	movff	sprintf@sp,fsr2l
  3042  000B90  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3043  000B94  0E2D               	movlw	45
  3044  000B96  D046               	goto	L2
  3045  000B98                     
  3046                           ;doprnt.c: 1200: {
  3047                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3048  000B98  C063  F001         	movff	sprintf@val,___lldiv@dividend
  3049  000B9C  C064  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3050  000BA0  C065  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3051  000BA4  C066  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3052  000BA8  506C               	movf	sprintf@c,w,c
  3053  000BAA  0D04               	mullw	4
  3054  000BAC  0E01               	movlw	low _dpowers
  3055  000BAE  24F3               	addwf	prodl,w,c
  3056  000BB0  6EF6               	movwf	tblptrl,c
  3057  000BB2  0E06               	movlw	high _dpowers
  3058  000BB4  20F4               	addwfc	prodh,w,c
  3059  000BB6  6EF7               	movwf	tblptrh,c
  3060  000BB8                     	if	0	;There are less than 3 active tblptr bytes
  3061  000BB8                     	endif
  3062  000BB8  0009               	tblrd		*+
  3063  000BBA  CFF5 F005          	movff	tablat,___lldiv@divisor
  3064  000BBE  0009               	tblrd		*+
  3065  000BC0  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3066  000BC4  0009               	tblrd		*+
  3067  000BC6  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3068  000BCA  000A               	tblrd		*-
  3069  000BCC  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3070  000BD0  EC76  F011         	call	___lldiv	;wreg free
  3071  000BD4  C001  F05F         	movff	?___lldiv,sprintf@tmpval
  3072  000BD8  C002  F060         	movff	?___lldiv+1,sprintf@tmpval+1
  3073  000BDC  C003  F061         	movff	?___lldiv+2,sprintf@tmpval+2
  3074  000BE0  C004  F062         	movff	?___lldiv+3,sprintf@tmpval+3
  3075                           
  3076                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3077  000BE4  C05F  F00E         	movff	sprintf@tmpval,___llmod@dividend
  3078  000BE8  C060  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3079  000BEC  C061  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3080  000BF0  C062  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3081  000BF4  0E0A               	movlw	10
  3082  000BF6  6E12               	movwf	___llmod@divisor,c
  3083  000BF8  0E00               	movlw	0
  3084  000BFA  6E13               	movwf	___llmod@divisor+1,c
  3085  000BFC  0E00               	movlw	0
  3086  000BFE  6E14               	movwf	___llmod@divisor+2,c
  3087  000C00  0E00               	movlw	0
  3088  000C02  6E15               	movwf	___llmod@divisor+3,c
  3089  000C04  EC9C  F012         	call	___llmod	;wreg free
  3090  000C08  C00E  F05F         	movff	?___llmod,sprintf@tmpval
  3091  000C0C  C00F  F060         	movff	?___llmod+1,sprintf@tmpval+1
  3092  000C10  C010  F061         	movff	?___llmod+2,sprintf@tmpval+2
  3093  000C14  C011  F062         	movff	?___llmod+3,sprintf@tmpval+3
  3094                           
  3095                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3096  000C18  505F               	movf	sprintf@tmpval,w,c
  3097  000C1A  0F30               	addlw	48
  3098  000C1C  C040  FFD9         	movff	sprintf@sp,fsr2l
  3099  000C20  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3100  000C24                     L2:
  3101  000C24  6EDF               	movwf	indf2,c
  3102  000C26  4A40               	infsnz	sprintf@sp,f,c
  3103  000C28  2A41               	incf	sprintf@sp+1,f,c
  3104  000C2A                     l1077:
  3105  000C2A  066C               	decf	sprintf@c,f,c
  3106  000C2C  286C               	incf	sprintf@c,w,c
  3107  000C2E  B4D8               	btfsc	status,2,c
  3108  000C30  D00C               	goto	l1080
  3109  000C32  D7B2               	goto	l1078
  3110  000C34                     l4641:
  3111                           
  3112                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3113  000C34  C040  FFD9         	movff	sprintf@sp,fsr2l
  3114  000C38  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3115  000C3C  0E30               	movlw	48
  3116  000C3E  6EDF               	movwf	indf2,c
  3117  000C40  4A40               	infsnz	sprintf@sp,f,c
  3118  000C42  2A41               	incf	sprintf@sp+1,f,c
  3119                           
  3120                           ;doprnt.c: 1209: exp--;
  3121  000C44  065D               	decf	sprintf@exp,f,c
  3122  000C46  A0D8               	btfss	status,0,c
  3123  000C48  065E               	decf	sprintf@exp+1,f,c
  3124  000C4A                     l1080:
  3125  000C4A  BE5E               	btfsc	sprintf@exp+1,7,c
  3126  000C4C  D005               	goto	u5170
  3127  000C4E  505E               	movf	sprintf@exp+1,w,c
  3128  000C50  E1F1               	bnz	l4641
  3129  000C52  045D               	decf	sprintf@exp,w,c
  3130  000C54  B0D8               	btfsc	status,0,c
  3131  000C56  D7EE               	goto	l1081
  3132  000C58                     u5170:
  3133                           
  3134                           ;doprnt.c: 1210: }
  3135                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3136  000C58  BE6B               	btfsc	sprintf@prec+1,7,c
  3137  000C5A  D009               	goto	l1083
  3138  000C5C  506B               	movf	sprintf@prec+1,w,c
  3139  000C5E  E104               	bnz	u5180
  3140  000C60  0E09               	movlw	9
  3141  000C62  5C6A               	subwf	sprintf@prec,w,c
  3142  000C64  A0D8               	btfss	status,0,c
  3143  000C66  D003               	goto	l1083
  3144  000C68                     u5180:
  3145                           
  3146                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3147  000C68  0E08               	movlw	8
  3148  000C6A  6E6C               	movwf	sprintf@c,c
  3149  000C6C  D002               	goto	l1084
  3150  000C6E                     l1083:
  3151                           
  3152                           ;doprnt.c: 1213: else
  3153                           ;doprnt.c: 1214: c = prec;
  3154  000C6E  C06A  F06C         	movff	sprintf@prec,sprintf@c
  3155  000C72                     l1084:
  3156                           
  3157                           ;doprnt.c: 1215: prec -= c;
  3158  000C72  506C               	movf	sprintf@c,w,c
  3159  000C74  5E6A               	subwf	sprintf@prec,f,c
  3160  000C76  0E00               	movlw	0
  3161  000C78  BE6C               	btfsc	sprintf@c,7,c
  3162  000C7A  0EFF               	movlw	255
  3163  000C7C  5A6B               	subwfb	sprintf@prec+1,f,c
  3164                           
  3165                           ;doprnt.c: 1219: if(c)
  3166  000C7E  506C               	movf	sprintf@c,w,c
  3167  000C80  B4D8               	btfsc	status,2,c
  3168  000C82  D008               	goto	l1085
  3169                           
  3170                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3171  000C84  C040  FFD9         	movff	sprintf@sp,fsr2l
  3172  000C88  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3173  000C8C  0E2E               	movlw	46
  3174  000C8E  6EDF               	movwf	indf2,c
  3175  000C90  4A40               	infsnz	sprintf@sp,f,c
  3176  000C92  2A41               	incf	sprintf@sp+1,f,c
  3177  000C94                     l1085:
  3178                           
  3179                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3180  000C94  506C               	movf	sprintf@c,w,c
  3181  000C96  ECCB  F007         	call	_scale
  3182  000C9A  C024  F052         	movff	?_scale,_sprintf$3115
  3183  000C9E  C025  F053         	movff	?_scale+1,_sprintf$3115+1
  3184  000CA2  C026  F054         	movff	?_scale+2,_sprintf$3115+2
  3185                           
  3186                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3187  000CA6  C067  F018         	movff	sprintf@fval,___ftmul@f2
  3188  000CAA  C068  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  3189  000CAE  C069  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  3190  000CB2  C052  F015         	movff	_sprintf$3115,___ftmul@f1
  3191  000CB6  C053  F016         	movff	_sprintf$3115+1,___ftmul@f1+1
  3192  000CBA  C054  F017         	movff	_sprintf$3115+2,___ftmul@f1+2
  3193  000CBE  EC30  F00E         	call	___ftmul	;wreg free
  3194  000CC2  C015  F02B         	movff	?___ftmul,___fttol@f1
  3195  000CC6  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  3196  000CCA  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  3197  000CCE  ECB6  F00D         	call	___fttol	;wreg free
  3198  000CD2  C02B  F063         	movff	?___fttol,sprintf@val
  3199  000CD6  C02C  F064         	movff	?___fttol+1,sprintf@val+1
  3200  000CDA  C02D  F065         	movff	?___fttol+2,sprintf@val+2
  3201  000CDE  C02E  F066         	movff	?___fttol+3,sprintf@val+3
  3202                           
  3203                           ;doprnt.c: 1228: while(c--) {
  3204  000CE2  D06F               	goto	l1086
  3205  000CE4                     
  3206                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3207  000CE4  C063  F001         	movff	sprintf@val,___lldiv@dividend
  3208  000CE8  C064  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3209  000CEC  C065  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3210  000CF0  C066  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3211  000CF4  506C               	movf	sprintf@c,w,c
  3212  000CF6  0D04               	mullw	4
  3213  000CF8  0E01               	movlw	low _dpowers
  3214  000CFA  24F3               	addwf	prodl,w,c
  3215  000CFC  6EF6               	movwf	tblptrl,c
  3216  000CFE  0E06               	movlw	high _dpowers
  3217  000D00  20F4               	addwfc	prodh,w,c
  3218  000D02  6EF7               	movwf	tblptrh,c
  3219  000D04                     	if	0	;There are less than 3 active tblptr bytes
  3220  000D04                     	endif
  3221  000D04  0009               	tblrd		*+
  3222  000D06  CFF5 F005          	movff	tablat,___lldiv@divisor
  3223  000D0A  0009               	tblrd		*+
  3224  000D0C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3225  000D10  0009               	tblrd		*+
  3226  000D12  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3227  000D16  000A               	tblrd		*-
  3228  000D18  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3229  000D1C  EC76  F011         	call	___lldiv	;wreg free
  3230  000D20  C001  F05F         	movff	?___lldiv,sprintf@tmpval
  3231  000D24  C002  F060         	movff	?___lldiv+1,sprintf@tmpval+1
  3232  000D28  C003  F061         	movff	?___lldiv+2,sprintf@tmpval+2
  3233  000D2C  C004  F062         	movff	?___lldiv+3,sprintf@tmpval+3
  3234                           
  3235                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3236  000D30  C05F  F00E         	movff	sprintf@tmpval,___llmod@dividend
  3237  000D34  C060  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3238  000D38  C061  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3239  000D3C  C062  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3240  000D40  0E0A               	movlw	10
  3241  000D42  6E12               	movwf	___llmod@divisor,c
  3242  000D44  0E00               	movlw	0
  3243  000D46  6E13               	movwf	___llmod@divisor+1,c
  3244  000D48  0E00               	movlw	0
  3245  000D4A  6E14               	movwf	___llmod@divisor+2,c
  3246  000D4C  0E00               	movlw	0
  3247  000D4E  6E15               	movwf	___llmod@divisor+3,c
  3248  000D50  EC9C  F012         	call	___llmod	;wreg free
  3249  000D54  C00E  F05F         	movff	?___llmod,sprintf@tmpval
  3250  000D58  C00F  F060         	movff	?___llmod+1,sprintf@tmpval+1
  3251  000D5C  C010  F061         	movff	?___llmod+2,sprintf@tmpval+2
  3252  000D60  C011  F062         	movff	?___llmod+3,sprintf@tmpval+3
  3253                           
  3254                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3255  000D64  505F               	movf	sprintf@tmpval,w,c
  3256  000D66  0F30               	addlw	48
  3257  000D68  C040  FFD9         	movff	sprintf@sp,fsr2l
  3258  000D6C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3259  000D70  6EDF               	movwf	indf2,c
  3260  000D72  4A40               	infsnz	sprintf@sp,f,c
  3261  000D74  2A41               	incf	sprintf@sp+1,f,c
  3262                           
  3263                           ;doprnt.c: 1232: val %= dpowers[c];
  3264  000D76  C063  F00E         	movff	sprintf@val,___llmod@dividend
  3265  000D7A  C064  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  3266  000D7E  C065  F010         	movff	sprintf@val+2,___llmod@dividend+2
  3267  000D82  C066  F011         	movff	sprintf@val+3,___llmod@dividend+3
  3268  000D86  506C               	movf	sprintf@c,w,c
  3269  000D88  0D04               	mullw	4
  3270  000D8A  0E01               	movlw	low _dpowers
  3271  000D8C  24F3               	addwf	prodl,w,c
  3272  000D8E  6EF6               	movwf	tblptrl,c
  3273  000D90  0E06               	movlw	high _dpowers
  3274  000D92  20F4               	addwfc	prodh,w,c
  3275  000D94  6EF7               	movwf	tblptrh,c
  3276  000D96                     	if	0	;There are less than 3 active tblptr bytes
  3277  000D96                     	endif
  3278  000D96  0009               	tblrd		*+
  3279  000D98  CFF5 F012          	movff	tablat,___llmod@divisor
  3280  000D9C  0009               	tblrd		*+
  3281  000D9E  CFF5 F013          	movff	tablat,___llmod@divisor+1
  3282  000DA2  0009               	tblrd		*+
  3283  000DA4  CFF5 F014          	movff	tablat,___llmod@divisor+2
  3284  000DA8  000A               	tblrd		*-
  3285  000DAA  CFF5 F015          	movff	tablat,___llmod@divisor+3
  3286  000DAE  EC9C  F012         	call	___llmod	;wreg free
  3287  000DB2  C00E  F063         	movff	?___llmod,sprintf@val
  3288  000DB6  C00F  F064         	movff	?___llmod+1,sprintf@val+1
  3289  000DBA  C010  F065         	movff	?___llmod+2,sprintf@val+2
  3290  000DBE  C011  F066         	movff	?___llmod+3,sprintf@val+3
  3291  000DC2                     l1086:
  3292  000DC2  066C               	decf	sprintf@c,f,c
  3293  000DC4  286C               	incf	sprintf@c,w,c
  3294  000DC6  B4D8               	btfsc	status,2,c
  3295  000DC8  D00C               	goto	l1089
  3296  000DCA  D78C               	goto	l1087
  3297  000DCC                     
  3298                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3299  000DCC  C040  FFD9         	movff	sprintf@sp,fsr2l
  3300  000DD0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3301  000DD4  0E30               	movlw	48
  3302  000DD6  6EDF               	movwf	indf2,c
  3303  000DD8  4A40               	infsnz	sprintf@sp,f,c
  3304  000DDA  2A41               	incf	sprintf@sp+1,f,c
  3305                           
  3306                           ;doprnt.c: 1237: prec--;
  3307  000DDC  066A               	decf	sprintf@prec,f,c
  3308  000DDE  A0D8               	btfss	status,0,c
  3309  000DE0  066B               	decf	sprintf@prec+1,f,c
  3310  000DE2                     l1089:
  3311  000DE2  506A               	movf	sprintf@prec,w,c
  3312  000DE4  106B               	iorwf	sprintf@prec+1,w,c
  3313  000DE6  B4D8               	btfsc	status,2,c
  3314  000DE8  D0C2               	goto	u5310
  3315  000DEA  D7F0               	goto	l1090
  3316  000DEC                     l1054:
  3317                           
  3318                           ;doprnt.c: 1246: }
  3319                           ;doprnt.c: 1253: {
  3320                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3321  000DEC  C059  FFD9         	movff	sprintf@ap,fsr2l
  3322  000DF0  C05A  FFDA         	movff	sprintf@ap+1,fsr2h
  3323  000DF4  CFDE F063          	movff	postinc2,sprintf@val
  3324  000DF8  CFDD F064          	movff	postdec2,sprintf@val+1
  3325  000DFC  0E00               	movlw	0
  3326  000DFE  BE64               	btfsc	sprintf@val+1,7,c
  3327  000E00  0EFF               	movlw	-1
  3328  000E02  6E65               	movwf	sprintf@val+2,c
  3329  000E04  6E66               	movwf	sprintf@val+3,c
  3330  000E06  0E02               	movlw	2
  3331  000E08  2659               	addwf	sprintf@ap,f,c
  3332  000E0A  0E00               	movlw	0
  3333  000E0C  225A               	addwfc	sprintf@ap+1,f,c
  3334                           
  3335                           ;doprnt.c: 1261: if((long)val < 0) {
  3336  000E0E  AE66               	btfss	sprintf@val+3,7,c
  3337  000E10  D00A               	goto	l1092
  3338                           
  3339                           ;doprnt.c: 1262: flag |= 0x03;
  3340  000E12  0E03               	movlw	3
  3341  000E14  125B               	iorwf	sprintf@flag,f,c
  3342                           
  3343                           ;doprnt.c: 1263: val = -val;
  3344  000E16  1E66               	comf	sprintf@val+3,f,c
  3345  000E18  1E65               	comf	sprintf@val+2,f,c
  3346  000E1A  1E64               	comf	sprintf@val+1,f,c
  3347  000E1C  6C63               	negf	sprintf@val,c
  3348  000E1E  0E00               	movlw	0
  3349  000E20  2264               	addwfc	sprintf@val+1,f,c
  3350  000E22  2265               	addwfc	sprintf@val+2,f,c
  3351  000E24  2266               	addwfc	sprintf@val+3,f,c
  3352  000E26                     l1092:
  3353                           
  3354                           ;doprnt.c: 1264: }
  3355                           ;doprnt.c: 1266: }
  3356                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3357  000E26  506A               	movf	sprintf@prec,w,c
  3358  000E28  106B               	iorwf	sprintf@prec+1,w,c
  3359  000E2A  A4D8               	btfss	status,2,c
  3360  000E2C  D008               	goto	l1093
  3361  000E2E  5063               	movf	sprintf@val,w,c
  3362  000E30  1064               	iorwf	sprintf@val+1,w,c
  3363  000E32  1065               	iorwf	sprintf@val+2,w,c
  3364  000E34  1066               	iorwf	sprintf@val+3,w,c
  3365  000E36  A4D8               	btfss	status,2,c
  3366  000E38  D002               	goto	l1093
  3367                           
  3368                           ;doprnt.c: 1291: prec++;
  3369  000E3A  4A6A               	infsnz	sprintf@prec,f,c
  3370  000E3C  2A6B               	incf	sprintf@prec+1,f,c
  3371  000E3E                     l1093:
  3372                           
  3373                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3374  000E3E  0E01               	movlw	1
  3375  000E40  6E6C               	movwf	sprintf@c,c
  3376  000E42                     l4703:
  3377  000E42  0E0A               	movlw	10
  3378  000E44  186C               	xorwf	sprintf@c,w,c
  3379  000E46  B4D8               	btfsc	status,2,c
  3380  000E48  D018               	goto	u5270
  3381                           
  3382                           ;doprnt.c: 1306: if(val < dpowers[c])
  3383  000E4A  506C               	movf	sprintf@c,w,c
  3384  000E4C  0D04               	mullw	4
  3385  000E4E  0E01               	movlw	low _dpowers
  3386  000E50  24F3               	addwf	prodl,w,c
  3387  000E52  6EF6               	movwf	tblptrl,c
  3388  000E54  0E06               	movlw	high _dpowers
  3389  000E56  20F4               	addwfc	prodh,w,c
  3390  000E58  6EF7               	movwf	tblptrh,c
  3391  000E5A                     	if	0	;There are less than 3 active tblptr bytes
  3392  000E5A                     	endif
  3393  000E5A  0009               	tblrd		*+
  3394  000E5C  50F5               	movf	tablat,w,c
  3395  000E5E  5C63               	subwf	sprintf@val,w,c
  3396  000E60  0009               	tblrd		*+
  3397  000E62  50F5               	movf	tablat,w,c
  3398  000E64  5864               	subwfb	sprintf@val+1,w,c
  3399  000E66  0009               	tblrd		*+
  3400  000E68  50F5               	movf	tablat,w,c
  3401  000E6A  5865               	subwfb	sprintf@val+2,w,c
  3402  000E6C  0009               	tblrd		*+
  3403  000E6E  50F5               	movf	tablat,w,c
  3404  000E70  5866               	subwfb	sprintf@val+3,w,c
  3405  000E72  A0D8               	btfss	status,0,c
  3406  000E74  D002               	goto	u5270
  3407                           
  3408                           ;doprnt.c: 1307: break;
  3409  000E76  2A6C               	incf	sprintf@c,f,c
  3410  000E78  D7E4               	goto	l4703
  3411  000E7A                     u5270:
  3412                           
  3413                           ;doprnt.c: 1339: if(c < prec)
  3414  000E7A  0E80               	movlw	128
  3415  000E7C  BE6C               	btfsc	sprintf@c,7,c
  3416  000E7E  0E7F               	movlw	127
  3417  000E80  6E4C               	movwf	??_sprintf& (0+255),c
  3418  000E82  506A               	movf	sprintf@prec,w,c
  3419  000E84  5C6C               	subwf	sprintf@c,w,c
  3420  000E86  506B               	movf	sprintf@prec+1,w,c
  3421  000E88  0A80               	xorlw	128
  3422  000E8A  584C               	subwfb	??_sprintf& (0+255),w,c
  3423  000E8C  B0D8               	btfsc	status,0,c
  3424  000E8E  D003               	goto	l1097
  3425                           
  3426                           ;doprnt.c: 1340: c = prec;
  3427  000E90  C06A  F06C         	movff	sprintf@prec,sprintf@c
  3428  000E94  D010               	goto	l1099
  3429  000E96                     l1097:
  3430                           
  3431                           ;doprnt.c: 1341: else if(prec < c)
  3432  000E96  506B               	movf	sprintf@prec+1,w,c
  3433  000E98  0A80               	xorlw	128
  3434  000E9A  6E4C               	movwf	??_sprintf& (0+255),c
  3435  000E9C  506C               	movf	sprintf@c,w,c
  3436  000E9E  5C6A               	subwf	sprintf@prec,w,c
  3437  000EA0  0E80               	movlw	128
  3438  000EA2  BE6C               	btfsc	sprintf@c,7,c
  3439  000EA4  0E7F               	movlw	127
  3440  000EA6  584C               	subwfb	??_sprintf& (0+255),w,c
  3441  000EA8  B0D8               	btfsc	status,0,c
  3442  000EAA  D005               	goto	l1099
  3443                           
  3444                           ;doprnt.c: 1342: prec = c;
  3445  000EAC  506C               	movf	sprintf@c,w,c
  3446  000EAE  6E6A               	movwf	sprintf@prec,c
  3447  000EB0  6A6B               	clrf	sprintf@prec+1,c
  3448  000EB2  BE6A               	btfsc	sprintf@prec,7,c
  3449  000EB4  066B               	decf	sprintf@prec+1,f,c
  3450  000EB6                     l1099:
  3451                           
  3452                           ;doprnt.c: 1422: {
  3453                           ;doprnt.c: 1438: if(flag & 0x03)
  3454  000EB6  0E03               	movlw	3
  3455  000EB8  145B               	andwf	sprintf@flag,w,c
  3456  000EBA  6E4C               	movwf	??_sprintf& (0+255),c
  3457  000EBC  0E00               	movlw	0
  3458  000EBE  145C               	andwf	sprintf@flag+1,w,c
  3459  000EC0  6E4D               	movwf	(??_sprintf+1)& (0+255),c
  3460  000EC2  504C               	movf	??_sprintf,w,c
  3461  000EC4  104D               	iorwf	??_sprintf+1,w,c
  3462  000EC6  B4D8               	btfsc	status,2,c
  3463  000EC8  D04A               	goto	l1101
  3464                           
  3465                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3466  000ECA  C040  FFD9         	movff	sprintf@sp,fsr2l
  3467  000ECE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3468  000ED2  0E2D               	movlw	45
  3469  000ED4  6EDF               	movwf	indf2,c
  3470  000ED6  D041               	goto	l4733
  3471  000ED8                     l4729:
  3472                           
  3473                           ;doprnt.c: 1478: {
  3474                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3475  000ED8  C06A  F04C         	movff	sprintf@prec,??_sprintf
  3476  000EDC  C06B  F04D         	movff	sprintf@prec+1,??_sprintf+1
  3477  000EE0  90D8               	bcf	status,0,c
  3478  000EE2  364C               	rlcf	??_sprintf,f,c
  3479  000EE4  364D               	rlcf	??_sprintf+1,f,c
  3480  000EE6  90D8               	bcf	status,0,c
  3481  000EE8  364C               	rlcf	??_sprintf,f,c
  3482  000EEA  364D               	rlcf	??_sprintf+1,f,c
  3483  000EEC  0E01               	movlw	low _dpowers
  3484  000EEE  244C               	addwf	??_sprintf,w,c
  3485  000EF0  6EF6               	movwf	tblptrl,c
  3486  000EF2  0E06               	movlw	high _dpowers
  3487  000EF4  204D               	addwfc	??_sprintf+1,w,c
  3488  000EF6  6EF7               	movwf	tblptrh,c
  3489  000EF8                     	if	0	;There are less than 3 active tblptr bytes
  3490  000EF8                     	endif
  3491  000EF8  0009               	tblrd		*+
  3492  000EFA  CFF5 F005          	movff	tablat,___lldiv@divisor
  3493  000EFE  0009               	tblrd		*+
  3494  000F00  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3495  000F04  0009               	tblrd		*+
  3496  000F06  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3497  000F0A  000A               	tblrd		*-
  3498  000F0C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3499  000F10  C063  F001         	movff	sprintf@val,___lldiv@dividend
  3500  000F14  C064  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3501  000F18  C065  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3502  000F1C  C066  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3503  000F20  EC76  F011         	call	___lldiv	;wreg free
  3504  000F24  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3505  000F28  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3506  000F2C  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3507  000F30  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3508  000F34  0E0A               	movlw	10
  3509  000F36  6E12               	movwf	___llmod@divisor,c
  3510  000F38  0E00               	movlw	0
  3511  000F3A  6E13               	movwf	___llmod@divisor+1,c
  3512  000F3C  0E00               	movlw	0
  3513  000F3E  6E14               	movwf	___llmod@divisor+2,c
  3514  000F40  0E00               	movlw	0
  3515  000F42  6E15               	movwf	___llmod@divisor+3,c
  3516  000F44  EC9C  F012         	call	___llmod	;wreg free
  3517  000F48  500E               	movf	?___llmod,w,c
  3518  000F4A  0F30               	addlw	48
  3519  000F4C  6E6C               	movwf	sprintf@c,c
  3520                           
  3521                           ;doprnt.c: 1523: }
  3522                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3523  000F4E  C040  FFD9         	movff	sprintf@sp,fsr2l
  3524  000F52  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3525  000F56  C06C  FFDF         	movff	sprintf@c,indf2
  3526  000F5A                     l4733:
  3527  000F5A  4A40               	infsnz	sprintf@sp,f,c
  3528  000F5C  2A41               	incf	sprintf@sp+1,f,c
  3529  000F5E                     l1101:
  3530  000F5E  066A               	decf	sprintf@prec,f,c
  3531  000F60  A0D8               	btfss	status,0,c
  3532  000F62  066B               	decf	sprintf@prec+1,f,c
  3533  000F64  286A               	incf	sprintf@prec,w,c
  3534  000F66  E1B8               	bnz	l4729
  3535  000F68  286B               	incf	sprintf@prec+1,w,c
  3536  000F6A  A4D8               	btfss	status,2,c
  3537  000F6C  D7B5               	goto	l1102
  3538  000F6E                     u5310:
  3539  000F6E  C042  FFF6         	movff	sprintf@f,tblptrl
  3540  000F72  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3541  000F76  4A42               	infsnz	sprintf@f,f,c
  3542  000F78  2A43               	incf	sprintf@f+1,f,c
  3543  000F7A                     	if	0	;tblptru may be non-zero
  3544  000F7A                     	endif
  3545  000F7A                     	if	0	;tblptru may be non-zero
  3546  000F7A                     	endif
  3547  000F7A  0008               	tblrd		*
  3548  000F7C  CFF5 F06C          	movff	tablat,sprintf@c
  3549  000F80  506C               	movf	sprintf@c,w,c
  3550  000F82  A4D8               	btfss	status,2,c
  3551  000F84  EF69  F003         	goto	l1030
  3552  000F88                     u5320:
  3553                           
  3554                           ;doprnt.c: 1538: *sp = 0;
  3555                           
  3556                           ;doprnt.c: 1525: }
  3557                           ;doprnt.c: 1533: }
  3558                           ;doprnt.c: 1535: alldone:
  3559  000F88  C040  FFD9         	movff	sprintf@sp,fsr2l
  3560  000F8C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3561  000F90  0E00               	movlw	0
  3562  000F92  6EDF               	movwf	indf2,c
  3563  000F94  0012               	return	
  3564  000F96                     __end_of_sprintf:
  3565                           	opt stack 0
  3566                           tblptru	equ	0xFF8
  3567                           tblptrh	equ	0xFF7
  3568                           tblptrl	equ	0xFF6
  3569                           tablat	equ	0xFF5
  3570                           prodh	equ	0xFF4
  3571                           prodl	equ	0xFF3
  3572                           indf0	equ	0xFEF
  3573                           postinc0	equ	0xFEE
  3574                           fsr0h	equ	0xFEA
  3575                           fsr0l	equ	0xFE9
  3576                           wreg	equ	0xFE8
  3577                           indf1	equ	0xFE7
  3578                           postdec1	equ	0xFE5
  3579                           fsr1h	equ	0xFE2
  3580                           fsr1l	equ	0xFE1
  3581                           indf2	equ	0xFDF
  3582                           postinc2	equ	0xFDE
  3583                           postdec2	equ	0xFDD
  3584                           fsr2h	equ	0xFDA
  3585                           fsr2l	equ	0xFD9
  3586                           status	equ	0xFD8
  3587                           
  3588 ;; *************** function _scale *****************
  3589 ;; Defined at:
  3590 ;;		line 425 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;  scl             1    wreg     char 
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;  scl             1   41[COMRAM] char 
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  3   35[COMRAM] char 
  3597 ;; Registers used:
  3598 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3604 ;;      Params:         3       0       0       0       0       0       0
  3605 ;;      Locals:         4       0       0       0       0       0       0
  3606 ;;      Temps:          0       0       0       0       0       0       0
  3607 ;;      Totals:         7       0       0       0       0       0       0
  3608 ;;Total ram usage:        7 bytes
  3609 ;; Hardware stack levels used:    1
  3610 ;; Hardware stack levels required when called:    2
  3611 ;; This function calls:
  3612 ;;		___awdiv
  3613 ;;		___awmod
  3614 ;;		___ftmul
  3615 ;;		___wmul
  3616 ;; This function is called by:
  3617 ;;		_sprintf
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text8
  3622  000F96                     __ptext8:
  3623                           	opt stack 0
  3624  000F96                     _scale:
  3625                           	opt stack 25
  3626                           
  3627                           ;incstack = 0
  3628                           ;scale@scl stored from wreg
  3629  000F96  6E2A               	movwf	scale@scl,c
  3630                           
  3631                           ;doprnt.c: 428: if(scl < 0) {
  3632  000F98  AE2A               	btfss	scale@scl,7,c
  3633  000F9A  D101               	goto	l1019
  3634                           
  3635                           ;doprnt.c: 429: scl = -scl;
  3636  000F9C  6C2A               	negf	scale@scl,c
  3637                           
  3638                           ;doprnt.c: 430: if(scl>=110)
  3639  000F9E  502A               	movf	scale@scl,w,c
  3640  000FA0  0A80               	xorlw	128
  3641  000FA2  0F12               	addlw	-238
  3642  000FA4  A0D8               	btfss	status,0,c
  3643  000FA6  D091               	goto	l1020
  3644                           
  3645                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3646  000FA8  0E00               	movlw	0
  3647  000FAA  6E12               	movwf	___wmul@multiplicand+1,c
  3648  000FAC  0E03               	movlw	3
  3649  000FAE  6E11               	movwf	___wmul@multiplicand,c
  3650  000FB0  0E00               	movlw	0
  3651  000FB2  6E0A               	movwf	___awdiv@divisor+1,c
  3652  000FB4  0E0A               	movlw	10
  3653  000FB6  6E09               	movwf	___awdiv@divisor,c
  3654  000FB8  0E00               	movlw	0
  3655  000FBA  6E04               	movwf	___awmod@divisor+1,c
  3656  000FBC  0E64               	movlw	100
  3657  000FBE  6E03               	movwf	___awmod@divisor,c
  3658  000FC0  502A               	movf	scale@scl,w,c
  3659  000FC2  6E01               	movwf	___awmod@dividend,c
  3660  000FC4  6A02               	clrf	___awmod@dividend+1,c
  3661  000FC6  BE01               	btfsc	___awmod@dividend,7,c
  3662  000FC8  0602               	decf	___awmod@dividend+1,f,c
  3663  000FCA  EC64  F012         	call	___awmod	;wreg free
  3664  000FCE  C001  F007         	movff	?___awmod,___awdiv@dividend
  3665  000FD2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3666  000FD6  EC34  F011         	call	___awdiv	;wreg free
  3667  000FDA  0E09               	movlw	9
  3668  000FDC  2407               	addwf	?___awdiv,w,c
  3669  000FDE  6E0F               	movwf	___wmul@multiplier,c
  3670  000FE0  0E00               	movlw	0
  3671  000FE2  2008               	addwfc	?___awdiv+1,w,c
  3672  000FE4  6E10               	movwf	___wmul@multiplier+1,c
  3673  000FE6  ECAE  F015         	call	___wmul	;wreg free
  3674  000FEA  0E50               	movlw	low __npowers_
  3675  000FEC  240F               	addwf	?___wmul,w,c
  3676  000FEE  6EF6               	movwf	tblptrl,c
  3677  000FF0  0E06               	movlw	high __npowers_
  3678  000FF2  2010               	addwfc	?___wmul+1,w,c
  3679  000FF4  6EF7               	movwf	tblptrh,c
  3680  000FF6                     	if	0	;There are less than 3 active tblptr bytes
  3681  000FF6                     	endif
  3682  000FF6  0009               	tblrd		*+
  3683  000FF8  CFF5 F018          	movff	tablat,___ftmul@f2
  3684  000FFC  0009               	tblrd		*+
  3685  000FFE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3686  001002  000A               	tblrd		*-
  3687  001004  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3688  001008  0E00               	movlw	0
  3689  00100A  6E0A               	movwf	___awdiv@divisor+1,c
  3690  00100C  0E64               	movlw	100
  3691  00100E  6E09               	movwf	___awdiv@divisor,c
  3692  001010  502A               	movf	scale@scl,w,c
  3693  001012  6E07               	movwf	___awdiv@dividend,c
  3694  001014  6A08               	clrf	___awdiv@dividend+1,c
  3695  001016  BE07               	btfsc	___awdiv@dividend,7,c
  3696  001018  0608               	decf	___awdiv@dividend+1,f,c
  3697  00101A  EC34  F011         	call	___awdiv	;wreg free
  3698  00101E  0E12               	movlw	18
  3699  001020  2407               	addwf	?___awdiv,w,c
  3700  001022  6E0F               	movwf	___wmul@multiplier,c
  3701  001024  0E00               	movlw	0
  3702  001026  2008               	addwfc	?___awdiv+1,w,c
  3703  001028  6E10               	movwf	___wmul@multiplier+1,c
  3704  00102A  0E00               	movlw	0
  3705  00102C  6E12               	movwf	___wmul@multiplicand+1,c
  3706  00102E  0E03               	movlw	3
  3707  001030  6E11               	movwf	___wmul@multiplicand,c
  3708  001032  ECAE  F015         	call	___wmul	;wreg free
  3709  001036  0E50               	movlw	low __npowers_
  3710  001038  240F               	addwf	?___wmul,w,c
  3711  00103A  6EF6               	movwf	tblptrl,c
  3712  00103C  0E06               	movlw	high __npowers_
  3713  00103E  2010               	addwfc	?___wmul+1,w,c
  3714  001040  6EF7               	movwf	tblptrh,c
  3715  001042                     	if	0	;There are less than 3 active tblptr bytes
  3716  001042                     	endif
  3717  001042  0009               	tblrd		*+
  3718  001044  CFF5 F015          	movff	tablat,___ftmul@f1
  3719  001048  0009               	tblrd		*+
  3720  00104A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3721  00104E  000A               	tblrd		*-
  3722  001050  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3723  001054  EC30  F00E         	call	___ftmul	;wreg free
  3724  001058  C015  F027         	movff	?___ftmul,_scale$3114
  3725  00105C  C016  F028         	movff	?___ftmul+1,_scale$3114+1
  3726  001060  C017  F029         	movff	?___ftmul+2,_scale$3114+2
  3727                           
  3728                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3729  001064  C027  F015         	movff	_scale$3114,___ftmul@f1
  3730  001068  C028  F016         	movff	_scale$3114+1,___ftmul@f1+1
  3731  00106C  C029  F017         	movff	_scale$3114+2,___ftmul@f1+2
  3732  001070  0E00               	movlw	0
  3733  001072  6E12               	movwf	___wmul@multiplicand+1,c
  3734  001074  0E03               	movlw	3
  3735  001076  6E11               	movwf	___wmul@multiplicand,c
  3736  001078  0E00               	movlw	0
  3737  00107A  6E04               	movwf	___awmod@divisor+1,c
  3738  00107C  0E0A               	movlw	10
  3739  00107E  6E03               	movwf	___awmod@divisor,c
  3740  001080  502A               	movf	scale@scl,w,c
  3741  001082  6E01               	movwf	___awmod@dividend,c
  3742  001084  6A02               	clrf	___awmod@dividend+1,c
  3743  001086  BE01               	btfsc	___awmod@dividend,7,c
  3744  001088  0602               	decf	___awmod@dividend+1,f,c
  3745  00108A  EC64  F012         	call	___awmod	;wreg free
  3746  00108E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3747  001092  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3748  001096  ECAE  F015         	call	___wmul	;wreg free
  3749  00109A  0E50               	movlw	low __npowers_
  3750  00109C  240F               	addwf	?___wmul,w,c
  3751  00109E  6EF6               	movwf	tblptrl,c
  3752  0010A0  0E06               	movlw	high __npowers_
  3753  0010A2  2010               	addwfc	?___wmul+1,w,c
  3754  0010A4  6EF7               	movwf	tblptrh,c
  3755  0010A6                     	if	0	;There are less than 3 active tblptr bytes
  3756  0010A6                     	endif
  3757  0010A6  0009               	tblrd		*+
  3758  0010A8  CFF5 F018          	movff	tablat,___ftmul@f2
  3759  0010AC  0009               	tblrd		*+
  3760  0010AE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3761  0010B2  000A               	tblrd		*-
  3762  0010B4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3763  0010B8  EC30  F00E         	call	___ftmul	;wreg free
  3764  0010BC  C015  F024         	movff	?___ftmul,?_scale
  3765  0010C0  C016  F025         	movff	?___ftmul+1,?_scale+1
  3766  0010C4  C017  F026         	movff	?___ftmul+2,?_scale+2
  3767  0010C8  0012               	return	
  3768  0010CA                     l1020:
  3769                           
  3770                           ;doprnt.c: 432: else if(scl > 10)
  3771  0010CA  502A               	movf	scale@scl,w,c
  3772  0010CC  0A80               	xorlw	128
  3773  0010CE  0F75               	addlw	-139
  3774  0010D0  A0D8               	btfss	status,0,c
  3775  0010D2  D053               	goto	l1023
  3776                           
  3777                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3778  0010D4  0E00               	movlw	0
  3779  0010D6  6E0A               	movwf	___awdiv@divisor+1,c
  3780  0010D8  0E0A               	movlw	10
  3781  0010DA  6E09               	movwf	___awdiv@divisor,c
  3782  0010DC  502A               	movf	scale@scl,w,c
  3783  0010DE  6E07               	movwf	___awdiv@dividend,c
  3784  0010E0  6A08               	clrf	___awdiv@dividend+1,c
  3785  0010E2  BE07               	btfsc	___awdiv@dividend,7,c
  3786  0010E4  0608               	decf	___awdiv@dividend+1,f,c
  3787  0010E6  EC34  F011         	call	___awdiv	;wreg free
  3788  0010EA  0E09               	movlw	9
  3789  0010EC  2407               	addwf	?___awdiv,w,c
  3790  0010EE  6E0F               	movwf	___wmul@multiplier,c
  3791  0010F0  0E00               	movlw	0
  3792  0010F2  2008               	addwfc	?___awdiv+1,w,c
  3793  0010F4  6E10               	movwf	___wmul@multiplier+1,c
  3794  0010F6  0E00               	movlw	0
  3795  0010F8  6E12               	movwf	___wmul@multiplicand+1,c
  3796  0010FA  0E03               	movlw	3
  3797  0010FC  6E11               	movwf	___wmul@multiplicand,c
  3798  0010FE  ECAE  F015         	call	___wmul	;wreg free
  3799  001102  0E50               	movlw	low __npowers_
  3800  001104  240F               	addwf	?___wmul,w,c
  3801  001106  6EF6               	movwf	tblptrl,c
  3802  001108  0E06               	movlw	high __npowers_
  3803  00110A  2010               	addwfc	?___wmul+1,w,c
  3804  00110C  6EF7               	movwf	tblptrh,c
  3805  00110E                     	if	0	;There are less than 3 active tblptr bytes
  3806  00110E                     	endif
  3807  00110E  0009               	tblrd		*+
  3808  001110  CFF5 F015          	movff	tablat,___ftmul@f1
  3809  001114  0009               	tblrd		*+
  3810  001116  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3811  00111A  000A               	tblrd		*-
  3812  00111C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3813  001120  0E00               	movlw	0
  3814  001122  6E12               	movwf	___wmul@multiplicand+1,c
  3815  001124  0E03               	movlw	3
  3816  001126  6E11               	movwf	___wmul@multiplicand,c
  3817  001128  0E00               	movlw	0
  3818  00112A  6E04               	movwf	___awmod@divisor+1,c
  3819  00112C  0E0A               	movlw	10
  3820  00112E  6E03               	movwf	___awmod@divisor,c
  3821  001130  502A               	movf	scale@scl,w,c
  3822  001132  6E01               	movwf	___awmod@dividend,c
  3823  001134  6A02               	clrf	___awmod@dividend+1,c
  3824  001136  BE01               	btfsc	___awmod@dividend,7,c
  3825  001138  0602               	decf	___awmod@dividend+1,f,c
  3826  00113A  EC64  F012         	call	___awmod	;wreg free
  3827  00113E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3828  001142  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3829  001146  ECAE  F015         	call	___wmul	;wreg free
  3830  00114A  0E50               	movlw	low __npowers_
  3831  00114C  240F               	addwf	?___wmul,w,c
  3832  00114E  6EF6               	movwf	tblptrl,c
  3833  001150  0E06               	movlw	high __npowers_
  3834  001152  2010               	addwfc	?___wmul+1,w,c
  3835  001154  6EF7               	movwf	tblptrh,c
  3836  001156                     	if	0	;There are less than 3 active tblptr bytes
  3837  001156                     	endif
  3838  001156  0009               	tblrd		*+
  3839  001158  CFF5 F018          	movff	tablat,___ftmul@f2
  3840  00115C  0009               	tblrd		*+
  3841  00115E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3842  001162  000A               	tblrd		*-
  3843  001164  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3844  001168  EC30  F00E         	call	___ftmul	;wreg free
  3845  00116C  C015  F024         	movff	?___ftmul,?_scale
  3846  001170  C016  F025         	movff	?___ftmul+1,?_scale+1
  3847  001174  C017  F026         	movff	?___ftmul+2,?_scale+2
  3848  001178  0012               	return	
  3849  00117A                     l1023:
  3850                           
  3851                           ;doprnt.c: 434: return _npowers_[scl];
  3852  00117A  502A               	movf	scale@scl,w,c
  3853  00117C  0D03               	mullw	3
  3854  00117E  0E50               	movlw	low __npowers_
  3855  001180  24F3               	addwf	prodl,w,c
  3856  001182  6EF6               	movwf	tblptrl,c
  3857  001184  0E06               	movlw	high __npowers_
  3858  001186  20F4               	addwfc	prodh,w,c
  3859  001188  6EF7               	movwf	tblptrh,c
  3860  00118A                     	if	0	;There are less than 3 active tblptr bytes
  3861  00118A                     	endif
  3862  00118A  0009               	tblrd		*+
  3863  00118C  CFF5 F024          	movff	tablat,?_scale
  3864  001190  0009               	tblrd		*+
  3865  001192  CFF5 F025          	movff	tablat,?_scale+1
  3866  001196  000A               	tblrd		*-
  3867  001198  CFF5 F026          	movff	tablat,?_scale+2
  3868  00119C  0012               	return	
  3869  00119E                     l1019:
  3870                           
  3871                           ;doprnt.c: 435: }
  3872                           ;doprnt.c: 436: if(scl>=110)
  3873  00119E  502A               	movf	scale@scl,w,c
  3874  0011A0  0A80               	xorlw	128
  3875  0011A2  0F12               	addlw	-238
  3876  0011A4  A0D8               	btfss	status,0,c
  3877  0011A6  D091               	goto	l1024
  3878                           
  3879                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3880  0011A8  0E00               	movlw	0
  3881  0011AA  6E12               	movwf	___wmul@multiplicand+1,c
  3882  0011AC  0E03               	movlw	3
  3883  0011AE  6E11               	movwf	___wmul@multiplicand,c
  3884  0011B0  0E00               	movlw	0
  3885  0011B2  6E0A               	movwf	___awdiv@divisor+1,c
  3886  0011B4  0E0A               	movlw	10
  3887  0011B6  6E09               	movwf	___awdiv@divisor,c
  3888  0011B8  0E00               	movlw	0
  3889  0011BA  6E04               	movwf	___awmod@divisor+1,c
  3890  0011BC  0E64               	movlw	100
  3891  0011BE  6E03               	movwf	___awmod@divisor,c
  3892  0011C0  502A               	movf	scale@scl,w,c
  3893  0011C2  6E01               	movwf	___awmod@dividend,c
  3894  0011C4  6A02               	clrf	___awmod@dividend+1,c
  3895  0011C6  BE01               	btfsc	___awmod@dividend,7,c
  3896  0011C8  0602               	decf	___awmod@dividend+1,f,c
  3897  0011CA  EC64  F012         	call	___awmod	;wreg free
  3898  0011CE  C001  F007         	movff	?___awmod,___awdiv@dividend
  3899  0011D2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3900  0011D6  EC34  F011         	call	___awdiv	;wreg free
  3901  0011DA  0E09               	movlw	9
  3902  0011DC  2407               	addwf	?___awdiv,w,c
  3903  0011DE  6E0F               	movwf	___wmul@multiplier,c
  3904  0011E0  0E00               	movlw	0
  3905  0011E2  2008               	addwfc	?___awdiv+1,w,c
  3906  0011E4  6E10               	movwf	___wmul@multiplier+1,c
  3907  0011E6  ECAE  F015         	call	___wmul	;wreg free
  3908  0011EA  0E29               	movlw	low __powers_
  3909  0011EC  240F               	addwf	?___wmul,w,c
  3910  0011EE  6EF6               	movwf	tblptrl,c
  3911  0011F0  0E06               	movlw	high __powers_
  3912  0011F2  2010               	addwfc	?___wmul+1,w,c
  3913  0011F4  6EF7               	movwf	tblptrh,c
  3914  0011F6                     	if	0	;There are less than 3 active tblptr bytes
  3915  0011F6                     	endif
  3916  0011F6  0009               	tblrd		*+
  3917  0011F8  CFF5 F018          	movff	tablat,___ftmul@f2
  3918  0011FC  0009               	tblrd		*+
  3919  0011FE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3920  001202  000A               	tblrd		*-
  3921  001204  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3922  001208  0E00               	movlw	0
  3923  00120A  6E0A               	movwf	___awdiv@divisor+1,c
  3924  00120C  0E64               	movlw	100
  3925  00120E  6E09               	movwf	___awdiv@divisor,c
  3926  001210  502A               	movf	scale@scl,w,c
  3927  001212  6E07               	movwf	___awdiv@dividend,c
  3928  001214  6A08               	clrf	___awdiv@dividend+1,c
  3929  001216  BE07               	btfsc	___awdiv@dividend,7,c
  3930  001218  0608               	decf	___awdiv@dividend+1,f,c
  3931  00121A  EC34  F011         	call	___awdiv	;wreg free
  3932  00121E  0E12               	movlw	18
  3933  001220  2407               	addwf	?___awdiv,w,c
  3934  001222  6E0F               	movwf	___wmul@multiplier,c
  3935  001224  0E00               	movlw	0
  3936  001226  2008               	addwfc	?___awdiv+1,w,c
  3937  001228  6E10               	movwf	___wmul@multiplier+1,c
  3938  00122A  0E00               	movlw	0
  3939  00122C  6E12               	movwf	___wmul@multiplicand+1,c
  3940  00122E  0E03               	movlw	3
  3941  001230  6E11               	movwf	___wmul@multiplicand,c
  3942  001232  ECAE  F015         	call	___wmul	;wreg free
  3943  001236  0E29               	movlw	low __powers_
  3944  001238  240F               	addwf	?___wmul,w,c
  3945  00123A  6EF6               	movwf	tblptrl,c
  3946  00123C  0E06               	movlw	high __powers_
  3947  00123E  2010               	addwfc	?___wmul+1,w,c
  3948  001240  6EF7               	movwf	tblptrh,c
  3949  001242                     	if	0	;There are less than 3 active tblptr bytes
  3950  001242                     	endif
  3951  001242  0009               	tblrd		*+
  3952  001244  CFF5 F015          	movff	tablat,___ftmul@f1
  3953  001248  0009               	tblrd		*+
  3954  00124A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3955  00124E  000A               	tblrd		*-
  3956  001250  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3957  001254  EC30  F00E         	call	___ftmul	;wreg free
  3958  001258  C015  F027         	movff	?___ftmul,_scale$3114
  3959  00125C  C016  F028         	movff	?___ftmul+1,_scale$3114+1
  3960  001260  C017  F029         	movff	?___ftmul+2,_scale$3114+2
  3961                           
  3962                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3963  001264  C027  F015         	movff	_scale$3114,___ftmul@f1
  3964  001268  C028  F016         	movff	_scale$3114+1,___ftmul@f1+1
  3965  00126C  C029  F017         	movff	_scale$3114+2,___ftmul@f1+2
  3966  001270  0E00               	movlw	0
  3967  001272  6E12               	movwf	___wmul@multiplicand+1,c
  3968  001274  0E03               	movlw	3
  3969  001276  6E11               	movwf	___wmul@multiplicand,c
  3970  001278  0E00               	movlw	0
  3971  00127A  6E04               	movwf	___awmod@divisor+1,c
  3972  00127C  0E0A               	movlw	10
  3973  00127E  6E03               	movwf	___awmod@divisor,c
  3974  001280  502A               	movf	scale@scl,w,c
  3975  001282  6E01               	movwf	___awmod@dividend,c
  3976  001284  6A02               	clrf	___awmod@dividend+1,c
  3977  001286  BE01               	btfsc	___awmod@dividend,7,c
  3978  001288  0602               	decf	___awmod@dividend+1,f,c
  3979  00128A  EC64  F012         	call	___awmod	;wreg free
  3980  00128E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3981  001292  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3982  001296  ECAE  F015         	call	___wmul	;wreg free
  3983  00129A  0E29               	movlw	low __powers_
  3984  00129C  240F               	addwf	?___wmul,w,c
  3985  00129E  6EF6               	movwf	tblptrl,c
  3986  0012A0  0E06               	movlw	high __powers_
  3987  0012A2  2010               	addwfc	?___wmul+1,w,c
  3988  0012A4  6EF7               	movwf	tblptrh,c
  3989  0012A6                     	if	0	;There are less than 3 active tblptr bytes
  3990  0012A6                     	endif
  3991  0012A6  0009               	tblrd		*+
  3992  0012A8  CFF5 F018          	movff	tablat,___ftmul@f2
  3993  0012AC  0009               	tblrd		*+
  3994  0012AE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3995  0012B2  000A               	tblrd		*-
  3996  0012B4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3997  0012B8  EC30  F00E         	call	___ftmul	;wreg free
  3998  0012BC  C015  F024         	movff	?___ftmul,?_scale
  3999  0012C0  C016  F025         	movff	?___ftmul+1,?_scale+1
  4000  0012C4  C017  F026         	movff	?___ftmul+2,?_scale+2
  4001  0012C8  0012               	return	
  4002  0012CA                     l1024:
  4003                           
  4004                           ;doprnt.c: 438: else if(scl > 10)
  4005  0012CA  502A               	movf	scale@scl,w,c
  4006  0012CC  0A80               	xorlw	128
  4007  0012CE  0F75               	addlw	-139
  4008  0012D0  A0D8               	btfss	status,0,c
  4009  0012D2  D053               	goto	l1026
  4010                           
  4011                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4012  0012D4  0E00               	movlw	0
  4013  0012D6  6E0A               	movwf	___awdiv@divisor+1,c
  4014  0012D8  0E0A               	movlw	10
  4015  0012DA  6E09               	movwf	___awdiv@divisor,c
  4016  0012DC  502A               	movf	scale@scl,w,c
  4017  0012DE  6E07               	movwf	___awdiv@dividend,c
  4018  0012E0  6A08               	clrf	___awdiv@dividend+1,c
  4019  0012E2  BE07               	btfsc	___awdiv@dividend,7,c
  4020  0012E4  0608               	decf	___awdiv@dividend+1,f,c
  4021  0012E6  EC34  F011         	call	___awdiv	;wreg free
  4022  0012EA  0E09               	movlw	9
  4023  0012EC  2407               	addwf	?___awdiv,w,c
  4024  0012EE  6E0F               	movwf	___wmul@multiplier,c
  4025  0012F0  0E00               	movlw	0
  4026  0012F2  2008               	addwfc	?___awdiv+1,w,c
  4027  0012F4  6E10               	movwf	___wmul@multiplier+1,c
  4028  0012F6  0E00               	movlw	0
  4029  0012F8  6E12               	movwf	___wmul@multiplicand+1,c
  4030  0012FA  0E03               	movlw	3
  4031  0012FC  6E11               	movwf	___wmul@multiplicand,c
  4032  0012FE  ECAE  F015         	call	___wmul	;wreg free
  4033  001302  0E29               	movlw	low __powers_
  4034  001304  240F               	addwf	?___wmul,w,c
  4035  001306  6EF6               	movwf	tblptrl,c
  4036  001308  0E06               	movlw	high __powers_
  4037  00130A  2010               	addwfc	?___wmul+1,w,c
  4038  00130C  6EF7               	movwf	tblptrh,c
  4039  00130E                     	if	0	;There are less than 3 active tblptr bytes
  4040  00130E                     	endif
  4041  00130E  0009               	tblrd		*+
  4042  001310  CFF5 F015          	movff	tablat,___ftmul@f1
  4043  001314  0009               	tblrd		*+
  4044  001316  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4045  00131A  000A               	tblrd		*-
  4046  00131C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4047  001320  0E00               	movlw	0
  4048  001322  6E12               	movwf	___wmul@multiplicand+1,c
  4049  001324  0E03               	movlw	3
  4050  001326  6E11               	movwf	___wmul@multiplicand,c
  4051  001328  0E00               	movlw	0
  4052  00132A  6E04               	movwf	___awmod@divisor+1,c
  4053  00132C  0E0A               	movlw	10
  4054  00132E  6E03               	movwf	___awmod@divisor,c
  4055  001330  502A               	movf	scale@scl,w,c
  4056  001332  6E01               	movwf	___awmod@dividend,c
  4057  001334  6A02               	clrf	___awmod@dividend+1,c
  4058  001336  BE01               	btfsc	___awmod@dividend,7,c
  4059  001338  0602               	decf	___awmod@dividend+1,f,c
  4060  00133A  EC64  F012         	call	___awmod	;wreg free
  4061  00133E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4062  001342  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4063  001346  ECAE  F015         	call	___wmul	;wreg free
  4064  00134A  0E29               	movlw	low __powers_
  4065  00134C  240F               	addwf	?___wmul,w,c
  4066  00134E  6EF6               	movwf	tblptrl,c
  4067  001350  0E06               	movlw	high __powers_
  4068  001352  2010               	addwfc	?___wmul+1,w,c
  4069  001354  6EF7               	movwf	tblptrh,c
  4070  001356                     	if	0	;There are less than 3 active tblptr bytes
  4071  001356                     	endif
  4072  001356  0009               	tblrd		*+
  4073  001358  CFF5 F018          	movff	tablat,___ftmul@f2
  4074  00135C  0009               	tblrd		*+
  4075  00135E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4076  001362  000A               	tblrd		*-
  4077  001364  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4078  001368  EC30  F00E         	call	___ftmul	;wreg free
  4079  00136C  C015  F024         	movff	?___ftmul,?_scale
  4080  001370  C016  F025         	movff	?___ftmul+1,?_scale+1
  4081  001374  C017  F026         	movff	?___ftmul+2,?_scale+2
  4082  001378  0012               	return	
  4083  00137A                     l1026:
  4084                           
  4085                           ;doprnt.c: 440: return _powers_[scl];
  4086  00137A  502A               	movf	scale@scl,w,c
  4087  00137C  0D03               	mullw	3
  4088  00137E  0E29               	movlw	low __powers_
  4089  001380  24F3               	addwf	prodl,w,c
  4090  001382  6EF6               	movwf	tblptrl,c
  4091  001384  0E06               	movlw	high __powers_
  4092  001386  20F4               	addwfc	prodh,w,c
  4093  001388  6EF7               	movwf	tblptrh,c
  4094  00138A                     	if	0	;There are less than 3 active tblptr bytes
  4095  00138A                     	endif
  4096  00138A  0009               	tblrd		*+
  4097  00138C  CFF5 F024          	movff	tablat,?_scale
  4098  001390  0009               	tblrd		*+
  4099  001392  CFF5 F025          	movff	tablat,?_scale+1
  4100  001396  000A               	tblrd		*-
  4101  001398  CFF5 F026          	movff	tablat,?_scale+2
  4102  00139C  0012               	return	
  4103  00139E                     __end_of_scale:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           indf0	equ	0xFEF
  4112                           postinc0	equ	0xFEE
  4113                           fsr0h	equ	0xFEA
  4114                           fsr0l	equ	0xFE9
  4115                           wreg	equ	0xFE8
  4116                           indf1	equ	0xFE7
  4117                           postdec1	equ	0xFE5
  4118                           fsr1h	equ	0xFE2
  4119                           fsr1l	equ	0xFE1
  4120                           indf2	equ	0xFDF
  4121                           postinc2	equ	0xFDE
  4122                           postdec2	equ	0xFDD
  4123                           fsr2h	equ	0xFDA
  4124                           fsr2l	equ	0xFD9
  4125                           status	equ	0xFD8
  4126                           
  4127 ;; *************** function _isdigit *****************
  4128 ;; Defined at:
  4129 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/isdigit.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;  c               1    wreg     unsigned char 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  c               1    2[COMRAM] unsigned char 
  4134 ;; Return value:  Size  Location     Type
  4135 ;;		None               void
  4136 ;; Registers used:
  4137 ;;		wreg, status,2, status,0
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4143 ;;      Params:         0       0       0       0       0       0       0
  4144 ;;      Locals:         2       0       0       0       0       0       0
  4145 ;;      Temps:          1       0       0       0       0       0       0
  4146 ;;      Totals:         3       0       0       0       0       0       0
  4147 ;;Total ram usage:        3 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; This function calls:
  4150 ;;		Nothing
  4151 ;; This function is called by:
  4152 ;;		_sprintf
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           	psect	text9
  4157  002BA6                     __ptext9:
  4158                           	opt stack 0
  4159  002BA6                     _isdigit:
  4160                           	opt stack 27
  4161                           
  4162                           ;incstack = 0
  4163                           ;isdigit@c stored from wreg
  4164  002BA6  6E03               	movwf	isdigit@c,c
  4165  002BA8  0E00               	movlw	0
  4166  002BAA  6E02               	movwf	_isdigit$2685,c
  4167  002BAC  0E3A               	movlw	58
  4168  002BAE  6003               	cpfslt	isdigit@c,c
  4169  002BB0  D005               	goto	l1476
  4170  002BB2  0E2F               	movlw	47
  4171  002BB4  6403               	cpfsgt	isdigit@c,c
  4172  002BB6  D002               	goto	l1476
  4173  002BB8  0E01               	movlw	1
  4174  002BBA  6E02               	movwf	_isdigit$2685,c
  4175  002BBC                     l1476:
  4176  002BBC  C002  F001         	movff	_isdigit$2685,??_isdigit
  4177  002BC0  3001               	rrcf	??_isdigit,w,c
  4178  002BC2  0012               	return	
  4179  002BC4                     __end_of_isdigit:
  4180                           	opt stack 0
  4181                           tblptru	equ	0xFF8
  4182                           tblptrh	equ	0xFF7
  4183                           tblptrl	equ	0xFF6
  4184                           tablat	equ	0xFF5
  4185                           prodh	equ	0xFF4
  4186                           prodl	equ	0xFF3
  4187                           indf0	equ	0xFEF
  4188                           postinc0	equ	0xFEE
  4189                           fsr0h	equ	0xFEA
  4190                           fsr0l	equ	0xFE9
  4191                           wreg	equ	0xFE8
  4192                           indf1	equ	0xFE7
  4193                           postdec1	equ	0xFE5
  4194                           fsr1h	equ	0xFE2
  4195                           fsr1l	equ	0xFE1
  4196                           indf2	equ	0xFDF
  4197                           postinc2	equ	0xFDE
  4198                           postdec2	equ	0xFDD
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203 ;; *************** function _fround *****************
  4204 ;; Defined at:
  4205 ;;		line 409 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  prec            1    wreg     unsigned char 
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  prec            1   44[COMRAM] unsigned char 
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  3   35[COMRAM] unsigned char 
  4212 ;; Registers used:
  4213 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4219 ;;      Params:         3       0       0       0       0       0       0
  4220 ;;      Locals:         7       0       0       0       0       0       0
  4221 ;;      Temps:          0       0       0       0       0       0       0
  4222 ;;      Totals:        10       0       0       0       0       0       0
  4223 ;;Total ram usage:       10 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    2
  4226 ;; This function calls:
  4227 ;;		___awdiv
  4228 ;;		___awmod
  4229 ;;		___ftmul
  4230 ;;		___wmul
  4231 ;; This function is called by:
  4232 ;;		_sprintf
  4233 ;; This function uses a non-reentrant model
  4234 ;;
  4235                           
  4236                           	psect	text10
  4237  00139E                     __ptext10:
  4238                           	opt stack 0
  4239  00139E                     _fround:
  4240                           	opt stack 25
  4241                           
  4242                           ;incstack = 0
  4243                           ;fround@prec stored from wreg
  4244  00139E  6E2D               	movwf	fround@prec,c
  4245                           
  4246                           ;doprnt.c: 413: if(prec>=110)
  4247  0013A0  0E6D               	movlw	109
  4248  0013A2  642D               	cpfsgt	fround@prec,c
  4249  0013A4  D09F               	goto	l1013
  4250                           
  4251                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4252  0013A6  0E00               	movlw	0
  4253  0013A8  6E12               	movwf	___wmul@multiplicand+1,c
  4254  0013AA  0E03               	movlw	3
  4255  0013AC  6E11               	movwf	___wmul@multiplicand,c
  4256  0013AE  0E00               	movlw	0
  4257  0013B0  6E0A               	movwf	___awdiv@divisor+1,c
  4258  0013B2  0E0A               	movlw	10
  4259  0013B4  6E09               	movwf	___awdiv@divisor,c
  4260  0013B6  0E00               	movlw	0
  4261  0013B8  6E04               	movwf	___awmod@divisor+1,c
  4262  0013BA  0E64               	movlw	100
  4263  0013BC  6E03               	movwf	___awmod@divisor,c
  4264  0013BE  C02D  F001         	movff	fround@prec,___awmod@dividend
  4265  0013C2  6A02               	clrf	___awmod@dividend+1,c
  4266  0013C4  EC64  F012         	call	___awmod	;wreg free
  4267  0013C8  C001  F007         	movff	?___awmod,___awdiv@dividend
  4268  0013CC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4269  0013D0  EC34  F011         	call	___awdiv	;wreg free
  4270  0013D4  0E09               	movlw	9
  4271  0013D6  2407               	addwf	?___awdiv,w,c
  4272  0013D8  6E0F               	movwf	___wmul@multiplier,c
  4273  0013DA  0E00               	movlw	0
  4274  0013DC  2008               	addwfc	?___awdiv+1,w,c
  4275  0013DE  6E10               	movwf	___wmul@multiplier+1,c
  4276  0013E0  ECAE  F015         	call	___wmul	;wreg free
  4277  0013E4  0E50               	movlw	low __npowers_
  4278  0013E6  240F               	addwf	?___wmul,w,c
  4279  0013E8  6EF6               	movwf	tblptrl,c
  4280  0013EA  0E06               	movlw	high __npowers_
  4281  0013EC  2010               	addwfc	?___wmul+1,w,c
  4282  0013EE  6EF7               	movwf	tblptrh,c
  4283  0013F0                     	if	0	;There are less than 3 active tblptr bytes
  4284  0013F0                     	endif
  4285  0013F0  0009               	tblrd		*+
  4286  0013F2  CFF5 F018          	movff	tablat,___ftmul@f2
  4287  0013F6  0009               	tblrd		*+
  4288  0013F8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4289  0013FC  000A               	tblrd		*-
  4290  0013FE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4291  001402  0E00               	movlw	0
  4292  001404  6E0A               	movwf	___awdiv@divisor+1,c
  4293  001406  0E64               	movlw	100
  4294  001408  6E09               	movwf	___awdiv@divisor,c
  4295  00140A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4296  00140E  6A08               	clrf	___awdiv@dividend+1,c
  4297  001410  EC34  F011         	call	___awdiv	;wreg free
  4298  001414  0E12               	movlw	18
  4299  001416  2407               	addwf	?___awdiv,w,c
  4300  001418  6E0F               	movwf	___wmul@multiplier,c
  4301  00141A  0E00               	movlw	0
  4302  00141C  2008               	addwfc	?___awdiv+1,w,c
  4303  00141E  6E10               	movwf	___wmul@multiplier+1,c
  4304  001420  0E00               	movlw	0
  4305  001422  6E12               	movwf	___wmul@multiplicand+1,c
  4306  001424  0E03               	movlw	3
  4307  001426  6E11               	movwf	___wmul@multiplicand,c
  4308  001428  ECAE  F015         	call	___wmul	;wreg free
  4309  00142C  0E50               	movlw	low __npowers_
  4310  00142E  240F               	addwf	?___wmul,w,c
  4311  001430  6EF6               	movwf	tblptrl,c
  4312  001432  0E06               	movlw	high __npowers_
  4313  001434  2010               	addwfc	?___wmul+1,w,c
  4314  001436  6EF7               	movwf	tblptrh,c
  4315  001438                     	if	0	;There are less than 3 active tblptr bytes
  4316  001438                     	endif
  4317  001438  0009               	tblrd		*+
  4318  00143A  CFF5 F015          	movff	tablat,___ftmul@f1
  4319  00143E  0009               	tblrd		*+
  4320  001440  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4321  001444  000A               	tblrd		*-
  4322  001446  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4323  00144A  EC30  F00E         	call	___ftmul	;wreg free
  4324  00144E  C015  F02A         	movff	?___ftmul,_fround$3112
  4325  001452  C016  F02B         	movff	?___ftmul+1,_fround$3112+1
  4326  001456  C017  F02C         	movff	?___ftmul+2,_fround$3112+2
  4327                           
  4328                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4329  00145A  0E00               	movlw	0
  4330  00145C  6E12               	movwf	___wmul@multiplicand+1,c
  4331  00145E  0E03               	movlw	3
  4332  001460  6E11               	movwf	___wmul@multiplicand,c
  4333  001462  0E00               	movlw	0
  4334  001464  6E04               	movwf	___awmod@divisor+1,c
  4335  001466  0E0A               	movlw	10
  4336  001468  6E03               	movwf	___awmod@divisor,c
  4337  00146A  C02D  F001         	movff	fround@prec,___awmod@dividend
  4338  00146E  6A02               	clrf	___awmod@dividend+1,c
  4339  001470  EC64  F012         	call	___awmod	;wreg free
  4340  001474  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4341  001478  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4342  00147C  ECAE  F015         	call	___wmul	;wreg free
  4343  001480  0E50               	movlw	low __npowers_
  4344  001482  240F               	addwf	?___wmul,w,c
  4345  001484  6EF6               	movwf	tblptrl,c
  4346  001486  0E06               	movlw	high __npowers_
  4347  001488  2010               	addwfc	?___wmul+1,w,c
  4348  00148A  6EF7               	movwf	tblptrh,c
  4349  00148C                     	if	0	;There are less than 3 active tblptr bytes
  4350  00148C                     	endif
  4351  00148C  0009               	tblrd		*+
  4352  00148E  CFF5 F018          	movff	tablat,___ftmul@f2
  4353  001492  0009               	tblrd		*+
  4354  001494  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4355  001498  000A               	tblrd		*-
  4356  00149A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4357  00149E  C02A  F015         	movff	_fround$3112,___ftmul@f1
  4358  0014A2  C02B  F016         	movff	_fround$3112+1,___ftmul@f1+1
  4359  0014A6  C02C  F017         	movff	_fround$3112+2,___ftmul@f1+2
  4360  0014AA  EC30  F00E         	call	___ftmul	;wreg free
  4361  0014AE  C015  F027         	movff	?___ftmul,_fround$3113
  4362  0014B2  C016  F028         	movff	?___ftmul+1,_fround$3113+1
  4363  0014B6  C017  F029         	movff	?___ftmul+2,_fround$3113+2
  4364                           
  4365                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4366  0014BA  C027  F015         	movff	_fround$3113,___ftmul@f1
  4367  0014BE  C028  F016         	movff	_fround$3113+1,___ftmul@f1+1
  4368  0014C2  C029  F017         	movff	_fround$3113+2,___ftmul@f1+2
  4369  0014C6  0E00               	movlw	0
  4370  0014C8  6E18               	movwf	___ftmul@f2,c
  4371  0014CA  0E00               	movlw	0
  4372  0014CC  6E19               	movwf	___ftmul@f2+1,c
  4373  0014CE  0E3F               	movlw	63
  4374  0014D0  6E1A               	movwf	___ftmul@f2+2,c
  4375  0014D2  EC30  F00E         	call	___ftmul	;wreg free
  4376  0014D6  C015  F024         	movff	?___ftmul,?_fround
  4377  0014DA  C016  F025         	movff	?___ftmul+1,?_fround+1
  4378  0014DE  C017  F026         	movff	?___ftmul+2,?_fround+2
  4379  0014E2  0012               	return	
  4380  0014E4                     l1013:
  4381                           
  4382                           ;doprnt.c: 415: else if(prec > 10)
  4383  0014E4  0E0A               	movlw	10
  4384  0014E6  642D               	cpfsgt	fround@prec,c
  4385  0014E8  D063               	goto	l1016
  4386                           
  4387                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4388  0014EA  0E00               	movlw	0
  4389  0014EC  6E12               	movwf	___wmul@multiplicand+1,c
  4390  0014EE  0E03               	movlw	3
  4391  0014F0  6E11               	movwf	___wmul@multiplicand,c
  4392  0014F2  0E00               	movlw	0
  4393  0014F4  6E04               	movwf	___awmod@divisor+1,c
  4394  0014F6  0E0A               	movlw	10
  4395  0014F8  6E03               	movwf	___awmod@divisor,c
  4396  0014FA  C02D  F001         	movff	fround@prec,___awmod@dividend
  4397  0014FE  6A02               	clrf	___awmod@dividend+1,c
  4398  001500  EC64  F012         	call	___awmod	;wreg free
  4399  001504  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4400  001508  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4401  00150C  ECAE  F015         	call	___wmul	;wreg free
  4402  001510  0E50               	movlw	low __npowers_
  4403  001512  240F               	addwf	?___wmul,w,c
  4404  001514  6EF6               	movwf	tblptrl,c
  4405  001516  0E06               	movlw	high __npowers_
  4406  001518  2010               	addwfc	?___wmul+1,w,c
  4407  00151A  6EF7               	movwf	tblptrh,c
  4408  00151C                     	if	0	;There are less than 3 active tblptr bytes
  4409  00151C                     	endif
  4410  00151C  0009               	tblrd		*+
  4411  00151E  CFF5 F018          	movff	tablat,___ftmul@f2
  4412  001522  0009               	tblrd		*+
  4413  001524  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4414  001528  000A               	tblrd		*-
  4415  00152A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4416  00152E  0E00               	movlw	0
  4417  001530  6E0A               	movwf	___awdiv@divisor+1,c
  4418  001532  0E0A               	movlw	10
  4419  001534  6E09               	movwf	___awdiv@divisor,c
  4420  001536  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4421  00153A  6A08               	clrf	___awdiv@dividend+1,c
  4422  00153C  EC34  F011         	call	___awdiv	;wreg free
  4423  001540  0E09               	movlw	9
  4424  001542  2407               	addwf	?___awdiv,w,c
  4425  001544  6E0F               	movwf	___wmul@multiplier,c
  4426  001546  0E00               	movlw	0
  4427  001548  2008               	addwfc	?___awdiv+1,w,c
  4428  00154A  6E10               	movwf	___wmul@multiplier+1,c
  4429  00154C  0E00               	movlw	0
  4430  00154E  6E12               	movwf	___wmul@multiplicand+1,c
  4431  001550  0E03               	movlw	3
  4432  001552  6E11               	movwf	___wmul@multiplicand,c
  4433  001554  ECAE  F015         	call	___wmul	;wreg free
  4434  001558  0E50               	movlw	low __npowers_
  4435  00155A  240F               	addwf	?___wmul,w,c
  4436  00155C  6EF6               	movwf	tblptrl,c
  4437  00155E  0E06               	movlw	high __npowers_
  4438  001560  2010               	addwfc	?___wmul+1,w,c
  4439  001562  6EF7               	movwf	tblptrh,c
  4440  001564                     	if	0	;There are less than 3 active tblptr bytes
  4441  001564                     	endif
  4442  001564  0009               	tblrd		*+
  4443  001566  CFF5 F015          	movff	tablat,___ftmul@f1
  4444  00156A  0009               	tblrd		*+
  4445  00156C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4446  001570  000A               	tblrd		*-
  4447  001572  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4448  001576  EC30  F00E         	call	___ftmul	;wreg free
  4449  00157A  C015  F02A         	movff	?___ftmul,_fround$3112
  4450  00157E  C016  F02B         	movff	?___ftmul+1,_fround$3112+1
  4451  001582  C017  F02C         	movff	?___ftmul+2,_fround$3112+2
  4452                           
  4453                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4454  001586  C02A  F015         	movff	_fround$3112,___ftmul@f1
  4455  00158A  C02B  F016         	movff	_fround$3112+1,___ftmul@f1+1
  4456  00158E  C02C  F017         	movff	_fround$3112+2,___ftmul@f1+2
  4457  001592  0E00               	movlw	0
  4458  001594  6E18               	movwf	___ftmul@f2,c
  4459  001596  0E00               	movlw	0
  4460  001598  6E19               	movwf	___ftmul@f2+1,c
  4461  00159A  0E3F               	movlw	63
  4462  00159C  6E1A               	movwf	___ftmul@f2+2,c
  4463  00159E  EC30  F00E         	call	___ftmul	;wreg free
  4464  0015A2  C015  F024         	movff	?___ftmul,?_fround
  4465  0015A6  C016  F025         	movff	?___ftmul+1,?_fround+1
  4466  0015AA  C017  F026         	movff	?___ftmul+2,?_fround+2
  4467  0015AE  0012               	return	
  4468  0015B0                     l1016:
  4469                           
  4470                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4471  0015B0  502D               	movf	fround@prec,w,c
  4472  0015B2  0D03               	mullw	3
  4473  0015B4  0E50               	movlw	low __npowers_
  4474  0015B6  24F3               	addwf	prodl,w,c
  4475  0015B8  6EF6               	movwf	tblptrl,c
  4476  0015BA  0E06               	movlw	high __npowers_
  4477  0015BC  20F4               	addwfc	prodh,w,c
  4478  0015BE  6EF7               	movwf	tblptrh,c
  4479  0015C0                     	if	0	;There are less than 3 active tblptr bytes
  4480  0015C0                     	endif
  4481  0015C0  0009               	tblrd		*+
  4482  0015C2  CFF5 F015          	movff	tablat,___ftmul@f1
  4483  0015C6  0009               	tblrd		*+
  4484  0015C8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4485  0015CC  000A               	tblrd		*-
  4486  0015CE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4487  0015D2  0E00               	movlw	0
  4488  0015D4  6E18               	movwf	___ftmul@f2,c
  4489  0015D6  0E00               	movlw	0
  4490  0015D8  6E19               	movwf	___ftmul@f2+1,c
  4491  0015DA  0E3F               	movlw	63
  4492  0015DC  6E1A               	movwf	___ftmul@f2+2,c
  4493  0015DE  EC30  F00E         	call	___ftmul	;wreg free
  4494  0015E2  C015  F024         	movff	?___ftmul,?_fround
  4495  0015E6  C016  F025         	movff	?___ftmul+1,?_fround+1
  4496  0015EA  C017  F026         	movff	?___ftmul+2,?_fround+2
  4497  0015EE  0012               	return	
  4498  0015F0                     __end_of_fround:
  4499                           	opt stack 0
  4500                           tblptru	equ	0xFF8
  4501                           tblptrh	equ	0xFF7
  4502                           tblptrl	equ	0xFF6
  4503                           tablat	equ	0xFF5
  4504                           prodh	equ	0xFF4
  4505                           prodl	equ	0xFF3
  4506                           indf0	equ	0xFEF
  4507                           postinc0	equ	0xFEE
  4508                           fsr0h	equ	0xFEA
  4509                           fsr0l	equ	0xFE9
  4510                           wreg	equ	0xFE8
  4511                           indf1	equ	0xFE7
  4512                           postdec1	equ	0xFE5
  4513                           fsr1h	equ	0xFE2
  4514                           fsr1l	equ	0xFE1
  4515                           indf2	equ	0xFDF
  4516                           postinc2	equ	0xFDE
  4517                           postdec2	equ	0xFDD
  4518                           fsr2h	equ	0xFDA
  4519                           fsr2l	equ	0xFD9
  4520                           status	equ	0xFD8
  4521                           
  4522 ;; *************** function ___wmul *****************
  4523 ;; Defined at:
  4524 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/Umul16.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  multiplier      2   14[COMRAM] unsigned int 
  4527 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  product         2   18[COMRAM] unsigned int 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  2   14[COMRAM] unsigned int 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0, prodl, prodh
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         4       0       0       0       0       0       0
  4540 ;;      Locals:         2       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0
  4542 ;;      Totals:         6       0       0       0       0       0       0
  4543 ;;Total ram usage:        6 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		_fround
  4549 ;;		_scale
  4550 ;;		_sprintf
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           	psect	text11
  4555  002B5C                     __ptext11:
  4556                           	opt stack 0
  4557  002B5C                     ___wmul:
  4558                           	opt stack 26
  4559                           
  4560                           ;incstack = 0
  4561  002B5C  500F               	movf	___wmul@multiplier,w,c
  4562  002B5E  0211               	mulwf	___wmul@multiplicand,c
  4563  002B60  CFF3 F013          	movff	prodl,___wmul@product
  4564  002B64  CFF4 F014          	movff	prodh,___wmul@product+1
  4565  002B68  500F               	movf	___wmul@multiplier,w,c
  4566  002B6A  0212               	mulwf	___wmul@multiplicand+1,c
  4567  002B6C  50F3               	movf	prodl,w,c
  4568  002B6E  2614               	addwf	___wmul@product+1,f,c
  4569  002B70  5010               	movf	___wmul@multiplier+1,w,c
  4570  002B72  0211               	mulwf	___wmul@multiplicand,c
  4571  002B74  50F3               	movf	prodl,w,c
  4572  002B76  2614               	addwf	___wmul@product+1,f,c
  4573  002B78  C013  F00F         	movff	___wmul@product,?___wmul
  4574  002B7C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4575  002B80  0012               	return	
  4576  002B82                     __end_of___wmul:
  4577                           	opt stack 0
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           prodh	equ	0xFF4
  4583                           prodl	equ	0xFF3
  4584                           indf0	equ	0xFEF
  4585                           postinc0	equ	0xFEE
  4586                           fsr0h	equ	0xFEA
  4587                           fsr0l	equ	0xFE9
  4588                           wreg	equ	0xFE8
  4589                           indf1	equ	0xFE7
  4590                           postdec1	equ	0xFE5
  4591                           fsr1h	equ	0xFE2
  4592                           fsr1l	equ	0xFE1
  4593                           indf2	equ	0xFDF
  4594                           postinc2	equ	0xFDE
  4595                           postdec2	equ	0xFDD
  4596                           fsr2h	equ	0xFDA
  4597                           fsr2l	equ	0xFD9
  4598                           status	equ	0xFD8
  4599                           
  4600 ;; *************** function ___awmod *****************
  4601 ;; Defined at:
  4602 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awmod.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  dividend        2    0[COMRAM] int 
  4605 ;;  divisor         2    2[COMRAM] int 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  sign            1    5[COMRAM] unsigned char 
  4608 ;;  counter         1    4[COMRAM] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  2    0[COMRAM] int 
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4618 ;;      Params:         4       0       0       0       0       0       0
  4619 ;;      Locals:         2       0       0       0       0       0       0
  4620 ;;      Temps:          0       0       0       0       0       0       0
  4621 ;;      Totals:         6       0       0       0       0       0       0
  4622 ;;Total ram usage:        6 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; This function calls:
  4625 ;;		Nothing
  4626 ;; This function is called by:
  4627 ;;		_fround
  4628 ;;		_scale
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text12
  4633  0024C8                     __ptext12:
  4634                           	opt stack 0
  4635  0024C8                     ___awmod:
  4636                           	opt stack 26
  4637                           
  4638                           ;incstack = 0
  4639  0024C8  0E00               	movlw	0
  4640  0024CA  6E06               	movwf	___awmod@sign,c
  4641  0024CC  AE02               	btfss	___awmod@dividend+1,7,c
  4642  0024CE  D006               	goto	l1286
  4643  0024D0  6C01               	negf	___awmod@dividend,c
  4644  0024D2  1E02               	comf	___awmod@dividend+1,f,c
  4645  0024D4  B0D8               	btfsc	status,0,c
  4646  0024D6  2A02               	incf	___awmod@dividend+1,f,c
  4647  0024D8  0E01               	movlw	1
  4648  0024DA  6E06               	movwf	___awmod@sign,c
  4649  0024DC                     l1286:
  4650  0024DC  AE04               	btfss	___awmod@divisor+1,7,c
  4651  0024DE  D004               	goto	l1287
  4652  0024E0  6C03               	negf	___awmod@divisor,c
  4653  0024E2  1E04               	comf	___awmod@divisor+1,f,c
  4654  0024E4  B0D8               	btfsc	status,0,c
  4655  0024E6  2A04               	incf	___awmod@divisor+1,f,c
  4656  0024E8                     l1287:
  4657  0024E8  5003               	movf	___awmod@divisor,w,c
  4658  0024EA  1004               	iorwf	___awmod@divisor+1,w,c
  4659  0024EC  B4D8               	btfsc	status,2,c
  4660  0024EE  D018               	goto	l1294
  4661  0024F0  0E01               	movlw	1
  4662  0024F2  6E05               	movwf	___awmod@counter,c
  4663  0024F4  D004               	goto	l1289
  4664  0024F6  90D8               	bcf	status,0,c
  4665  0024F8  3603               	rlcf	___awmod@divisor,f,c
  4666  0024FA  3604               	rlcf	___awmod@divisor+1,f,c
  4667  0024FC  2A05               	incf	___awmod@counter,f,c
  4668  0024FE                     l1289:
  4669  0024FE  AE04               	btfss	___awmod@divisor+1,7,c
  4670  002500  D7FA               	goto	l1290
  4671  002502                     u4030:
  4672  002502  5003               	movf	___awmod@divisor,w,c
  4673  002504  5C01               	subwf	___awmod@dividend,w,c
  4674  002506  5004               	movf	___awmod@divisor+1,w,c
  4675  002508  5802               	subwfb	___awmod@dividend+1,w,c
  4676  00250A  A0D8               	btfss	status,0,c
  4677  00250C  D004               	goto	l1293
  4678  00250E  5003               	movf	___awmod@divisor,w,c
  4679  002510  5E01               	subwf	___awmod@dividend,f,c
  4680  002512  5004               	movf	___awmod@divisor+1,w,c
  4681  002514  5A02               	subwfb	___awmod@dividend+1,f,c
  4682  002516                     l1293:
  4683  002516  90D8               	bcf	status,0,c
  4684  002518  3204               	rrcf	___awmod@divisor+1,f,c
  4685  00251A  3203               	rrcf	___awmod@divisor,f,c
  4686  00251C  2E05               	decfsz	___awmod@counter,f,c
  4687  00251E  D7F1               	goto	u4030
  4688  002520                     l1294:
  4689  002520  5006               	movf	___awmod@sign,w,c
  4690  002522  B4D8               	btfsc	status,2,c
  4691  002524  D004               	goto	l1295
  4692  002526  6C01               	negf	___awmod@dividend,c
  4693  002528  1E02               	comf	___awmod@dividend+1,f,c
  4694  00252A  B0D8               	btfsc	status,0,c
  4695  00252C  2A02               	incf	___awmod@dividend+1,f,c
  4696  00252E                     l1295:
  4697  00252E  C001  F001         	movff	___awmod@dividend,?___awmod
  4698  002532  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4699  002536  0012               	return	
  4700  002538                     __end_of___awmod:
  4701                           	opt stack 0
  4702                           tblptru	equ	0xFF8
  4703                           tblptrh	equ	0xFF7
  4704                           tblptrl	equ	0xFF6
  4705                           tablat	equ	0xFF5
  4706                           prodh	equ	0xFF4
  4707                           prodl	equ	0xFF3
  4708                           indf0	equ	0xFEF
  4709                           postinc0	equ	0xFEE
  4710                           fsr0h	equ	0xFEA
  4711                           fsr0l	equ	0xFE9
  4712                           wreg	equ	0xFE8
  4713                           indf1	equ	0xFE7
  4714                           postdec1	equ	0xFE5
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           indf2	equ	0xFDF
  4718                           postinc2	equ	0xFDE
  4719                           postdec2	equ	0xFDD
  4720                           fsr2h	equ	0xFDA
  4721                           fsr2l	equ	0xFD9
  4722                           status	equ	0xFD8
  4723                           
  4724 ;; *************** function ___awdiv *****************
  4725 ;; Defined at:
  4726 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/awdiv.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  dividend        2    6[COMRAM] int 
  4729 ;;  divisor         2    8[COMRAM] int 
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;  quotient        2   12[COMRAM] int 
  4732 ;;  sign            1   11[COMRAM] unsigned char 
  4733 ;;  counter         1   10[COMRAM] unsigned char 
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  2    6[COMRAM] int 
  4736 ;; Registers used:
  4737 ;;		wreg, status,2, status,0
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4743 ;;      Params:         4       0       0       0       0       0       0
  4744 ;;      Locals:         4       0       0       0       0       0       0
  4745 ;;      Temps:          0       0       0       0       0       0       0
  4746 ;;      Totals:         8       0       0       0       0       0       0
  4747 ;;Total ram usage:        8 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		_fround
  4753 ;;		_scale
  4754 ;;		_sprintf
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           	psect	text13
  4759  002268                     __ptext13:
  4760                           	opt stack 0
  4761  002268                     ___awdiv:
  4762                           	opt stack 26
  4763                           
  4764                           ;incstack = 0
  4765  002268  0E00               	movlw	0
  4766  00226A  6E0C               	movwf	___awdiv@sign,c
  4767  00226C  AE0A               	btfss	___awdiv@divisor+1,7,c
  4768  00226E  D006               	goto	l1273
  4769  002270  6C09               	negf	___awdiv@divisor,c
  4770  002272  1E0A               	comf	___awdiv@divisor+1,f,c
  4771  002274  B0D8               	btfsc	status,0,c
  4772  002276  2A0A               	incf	___awdiv@divisor+1,f,c
  4773  002278  0E01               	movlw	1
  4774  00227A  6E0C               	movwf	___awdiv@sign,c
  4775  00227C                     l1273:
  4776  00227C  AE08               	btfss	___awdiv@dividend+1,7,c
  4777  00227E  D006               	goto	l1274
  4778  002280  6C07               	negf	___awdiv@dividend,c
  4779  002282  1E08               	comf	___awdiv@dividend+1,f,c
  4780  002284  B0D8               	btfsc	status,0,c
  4781  002286  2A08               	incf	___awdiv@dividend+1,f,c
  4782  002288  0E01               	movlw	1
  4783  00228A  1A0C               	xorwf	___awdiv@sign,f,c
  4784  00228C                     l1274:
  4785  00228C  0E00               	movlw	0
  4786  00228E  6E0E               	movwf	___awdiv@quotient+1,c
  4787  002290  0E00               	movlw	0
  4788  002292  6E0D               	movwf	___awdiv@quotient,c
  4789  002294  5009               	movf	___awdiv@divisor,w,c
  4790  002296  100A               	iorwf	___awdiv@divisor+1,w,c
  4791  002298  B4D8               	btfsc	status,2,c
  4792  00229A  D01C               	goto	l1281
  4793  00229C  0E01               	movlw	1
  4794  00229E  6E0B               	movwf	___awdiv@counter,c
  4795  0022A0  D004               	goto	l1276
  4796  0022A2  90D8               	bcf	status,0,c
  4797  0022A4  3609               	rlcf	___awdiv@divisor,f,c
  4798  0022A6  360A               	rlcf	___awdiv@divisor+1,f,c
  4799  0022A8  2A0B               	incf	___awdiv@counter,f,c
  4800  0022AA                     l1276:
  4801  0022AA  AE0A               	btfss	___awdiv@divisor+1,7,c
  4802  0022AC  D7FA               	goto	l1277
  4803  0022AE                     u3970:
  4804  0022AE  90D8               	bcf	status,0,c
  4805  0022B0  360D               	rlcf	___awdiv@quotient,f,c
  4806  0022B2  360E               	rlcf	___awdiv@quotient+1,f,c
  4807  0022B4  5009               	movf	___awdiv@divisor,w,c
  4808  0022B6  5C07               	subwf	___awdiv@dividend,w,c
  4809  0022B8  500A               	movf	___awdiv@divisor+1,w,c
  4810  0022BA  5808               	subwfb	___awdiv@dividend+1,w,c
  4811  0022BC  A0D8               	btfss	status,0,c
  4812  0022BE  D005               	goto	l1280
  4813  0022C0  5009               	movf	___awdiv@divisor,w,c
  4814  0022C2  5E07               	subwf	___awdiv@dividend,f,c
  4815  0022C4  500A               	movf	___awdiv@divisor+1,w,c
  4816  0022C6  5A08               	subwfb	___awdiv@dividend+1,f,c
  4817  0022C8  800D               	bsf	___awdiv@quotient,0,c
  4818  0022CA                     l1280:
  4819  0022CA  90D8               	bcf	status,0,c
  4820  0022CC  320A               	rrcf	___awdiv@divisor+1,f,c
  4821  0022CE  3209               	rrcf	___awdiv@divisor,f,c
  4822  0022D0  2E0B               	decfsz	___awdiv@counter,f,c
  4823  0022D2  D7ED               	goto	u3970
  4824  0022D4                     l1281:
  4825  0022D4  500C               	movf	___awdiv@sign,w,c
  4826  0022D6  B4D8               	btfsc	status,2,c
  4827  0022D8  D004               	goto	l1282
  4828  0022DA  6C0D               	negf	___awdiv@quotient,c
  4829  0022DC  1E0E               	comf	___awdiv@quotient+1,f,c
  4830  0022DE  B0D8               	btfsc	status,0,c
  4831  0022E0  2A0E               	incf	___awdiv@quotient+1,f,c
  4832  0022E2                     l1282:
  4833  0022E2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4834  0022E6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4835  0022EA  0012               	return	
  4836  0022EC                     __end_of___awdiv:
  4837                           	opt stack 0
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           indf0	equ	0xFEF
  4845                           postinc0	equ	0xFEE
  4846                           fsr0h	equ	0xFEA
  4847                           fsr0l	equ	0xFE9
  4848                           wreg	equ	0xFE8
  4849                           indf1	equ	0xFE7
  4850                           postdec1	equ	0xFE5
  4851                           fsr1h	equ	0xFE2
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function __tdiv_to_l_ *****************
  4861 ;; Defined at:
  4862 ;;		line 60 in file "/opt/microchip/xc8/v1.44/sources/common/ftdivl.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  f1              3    0[COMRAM] float 
  4865 ;;  f2              3    3[COMRAM] float 
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  quot            4    9[COMRAM] unsigned long 
  4868 ;;  exp1            1   14[COMRAM] unsigned char 
  4869 ;;  cntr            1   13[COMRAM] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  4    0[COMRAM] unsigned long 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4879 ;;      Params:         6       0       0       0       0       0       0
  4880 ;;      Locals:         6       0       0       0       0       0       0
  4881 ;;      Temps:          3       0       0       0       0       0       0
  4882 ;;      Totals:        15       0       0       0       0       0       0
  4883 ;;Total ram usage:       15 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		_sprintf
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text14
  4893  001912                     __ptext14:
  4894                           	opt stack 0
  4895  001912                     __tdiv_to_l_:
  4896                           	opt stack 27
  4897                           
  4898                           ;incstack = 0
  4899  001912  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4900  001916  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4901  001918  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4902  00191A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4903  00191C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4904  00191E  E301               	bnc	u4391
  4905  001920  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4906  001922                     u4391:
  4907  001922  5007               	movf	??__tdiv_to_l_,w,c
  4908  001924  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4909  001926  500F               	movf	__tdiv_to_l_@exp1,w,c
  4910  001928  A4D8               	btfss	status,2,c
  4911  00192A  D009               	goto	l1416
  4912  00192C  0E00               	movlw	0
  4913  00192E  6E01               	movwf	?__tdiv_to_l_,c
  4914  001930  0E00               	movlw	0
  4915  001932  6E02               	movwf	?__tdiv_to_l_+1,c
  4916  001934  0E00               	movlw	0
  4917  001936  6E03               	movwf	?__tdiv_to_l_+2,c
  4918  001938  0E00               	movlw	0
  4919  00193A  6E04               	movwf	?__tdiv_to_l_+3,c
  4920  00193C  0012               	return	
  4921  00193E                     l1416:
  4922  00193E  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4923  001942  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4924  001944  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4925  001946  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4926  001948  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4927  00194A  E301               	bnc	u4411
  4928  00194C  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4929  00194E                     u4411:
  4930  00194E  5007               	movf	??__tdiv_to_l_,w,c
  4931  001950  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4932  001952  500E               	movf	__tdiv_to_l_@cntr,w,c
  4933  001954  A4D8               	btfss	status,2,c
  4934  001956  D009               	goto	l1418
  4935  001958  0E00               	movlw	0
  4936  00195A  6E01               	movwf	?__tdiv_to_l_,c
  4937  00195C  0E00               	movlw	0
  4938  00195E  6E02               	movwf	?__tdiv_to_l_+1,c
  4939  001960  0E00               	movlw	0
  4940  001962  6E03               	movwf	?__tdiv_to_l_+2,c
  4941  001964  0E00               	movlw	0
  4942  001966  6E04               	movwf	?__tdiv_to_l_+3,c
  4943  001968  0012               	return	
  4944  00196A                     l1418:
  4945  00196A  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4946  00196C  0EFF               	movlw	255
  4947  00196E  1601               	andwf	__tdiv_to_l_@f1,f,c
  4948  001970  0EFF               	movlw	255
  4949  001972  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4950  001974  0E00               	movlw	0
  4951  001976  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4952  001978  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4953  00197A  0EFF               	movlw	255
  4954  00197C  1604               	andwf	__tdiv_to_l_@f2,f,c
  4955  00197E  0EFF               	movlw	255
  4956  001980  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4957  001982  0E00               	movlw	0
  4958  001984  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4959  001986  0E00               	movlw	0
  4960  001988  6E0A               	movwf	__tdiv_to_l_@quot,c
  4961  00198A  0E00               	movlw	0
  4962  00198C  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4963  00198E  0E00               	movlw	0
  4964  001990  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4965  001992  0E00               	movlw	0
  4966  001994  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4967  001996  0E7F               	movlw	127
  4968  001998  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4969  00199A  500E               	movf	__tdiv_to_l_@cntr,w,c
  4970  00199C  0F98               	addlw	152
  4971  00199E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4972  0019A0  0E18               	movlw	24
  4973  0019A2  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4974  0019A4                     l1419:
  4975  0019A4  90D8               	bcf	status,0,c
  4976  0019A6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4977  0019A8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4978  0019AA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4979  0019AC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4980  0019AE  5004               	movf	__tdiv_to_l_@f2,w,c
  4981  0019B0  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4982  0019B2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4983  0019B4  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4984  0019B6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4985  0019B8  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4986  0019BA  A0D8               	btfss	status,0,c
  4987  0019BC  D007               	goto	l1420
  4988  0019BE  5004               	movf	__tdiv_to_l_@f2,w,c
  4989  0019C0  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4990  0019C2  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4991  0019C4  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4992  0019C6  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4993  0019C8  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4994  0019CA  800A               	bsf	__tdiv_to_l_@quot,0,c
  4995  0019CC                     l1420:
  4996  0019CC  90D8               	bcf	status,0,c
  4997  0019CE  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4998  0019D0  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4999  0019D2  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  5000  0019D4  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  5001  0019D6  D7E6               	goto	l1419
  5002  0019D8  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  5003  0019DA  D016               	goto	l1422
  5004  0019DC  500F               	movf	__tdiv_to_l_@exp1,w,c
  5005  0019DE  0A80               	xorlw	128
  5006  0019E0  0F97               	addlw	151
  5007  0019E2  B0D8               	btfsc	status,0,c
  5008  0019E4  D009               	goto	l1423
  5009  0019E6  0E00               	movlw	0
  5010  0019E8  6E01               	movwf	?__tdiv_to_l_,c
  5011  0019EA  0E00               	movlw	0
  5012  0019EC  6E02               	movwf	?__tdiv_to_l_+1,c
  5013  0019EE  0E00               	movlw	0
  5014  0019F0  6E03               	movwf	?__tdiv_to_l_+2,c
  5015  0019F2  0E00               	movlw	0
  5016  0019F4  6E04               	movwf	?__tdiv_to_l_+3,c
  5017  0019F6  0012               	return	
  5018  0019F8                     l1423:
  5019  0019F8  90D8               	bcf	status,0,c
  5020  0019FA  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  5021  0019FC  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  5022  0019FE  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  5023  001A00  320A               	rrcf	__tdiv_to_l_@quot,f,c
  5024  001A02  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  5025  001A04  D7F9               	goto	l1423
  5026  001A06  D015               	goto	u4470
  5027  001A08                     l1422:
  5028  001A08  0E17               	movlw	23
  5029  001A0A  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  5030  001A0C  D00F               	goto	l1428
  5031  001A0E  0E00               	movlw	0
  5032  001A10  6E01               	movwf	?__tdiv_to_l_,c
  5033  001A12  0E00               	movlw	0
  5034  001A14  6E02               	movwf	?__tdiv_to_l_+1,c
  5035  001A16  0E00               	movlw	0
  5036  001A18  6E03               	movwf	?__tdiv_to_l_+2,c
  5037  001A1A  0E00               	movlw	0
  5038  001A1C  6E04               	movwf	?__tdiv_to_l_+3,c
  5039  001A1E  0012               	return	
  5040  001A20  90D8               	bcf	status,0,c
  5041  001A22  360A               	rlcf	__tdiv_to_l_@quot,f,c
  5042  001A24  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  5043  001A26  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  5044  001A28  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  5045  001A2A  060F               	decf	__tdiv_to_l_@exp1,f,c
  5046  001A2C                     l1428:
  5047  001A2C  500F               	movf	__tdiv_to_l_@exp1,w,c
  5048  001A2E  A4D8               	btfss	status,2,c
  5049  001A30  D7F7               	goto	l1429
  5050  001A32                     u4470:
  5051  001A32  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5052  001A36  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5053  001A3A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5054  001A3E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5055  001A42  0012               	return		;funcret
  5056  001A44                     __end_of__tdiv_to_l_:
  5057                           	opt stack 0
  5058                           tblptru	equ	0xFF8
  5059                           tblptrh	equ	0xFF7
  5060                           tblptrl	equ	0xFF6
  5061                           tablat	equ	0xFF5
  5062                           prodh	equ	0xFF4
  5063                           prodl	equ	0xFF3
  5064                           indf0	equ	0xFEF
  5065                           postinc0	equ	0xFEE
  5066                           fsr0h	equ	0xFEA
  5067                           fsr0l	equ	0xFE9
  5068                           wreg	equ	0xFE8
  5069                           indf1	equ	0xFE7
  5070                           postdec1	equ	0xFE5
  5071                           fsr1h	equ	0xFE2
  5072                           fsr1l	equ	0xFE1
  5073                           indf2	equ	0xFDF
  5074                           postinc2	equ	0xFDE
  5075                           postdec2	equ	0xFDD
  5076                           fsr2h	equ	0xFDA
  5077                           fsr2l	equ	0xFD9
  5078                           status	equ	0xFD8
  5079                           
  5080 ;; *************** function __div_to_l_ *****************
  5081 ;; Defined at:
  5082 ;;		line 60 in file "/opt/microchip/xc8/v1.44/sources/common/fldivl.c"
  5083 ;; Parameters:    Size  Location     Type
  5084 ;;  f1              3    0[COMRAM] unsigned long 
  5085 ;;  f2              3    3[COMRAM] unsigned long 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  quot            4    6[COMRAM] unsigned long 
  5088 ;;  exp1            1   11[COMRAM] unsigned char 
  5089 ;;  cntr            1   10[COMRAM] unsigned char 
  5090 ;; Return value:  Size  Location     Type
  5091 ;;                  4    0[COMRAM] unsigned long 
  5092 ;; Registers used:
  5093 ;;		wreg, status,2, status,0
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5099 ;;      Params:         6       0       0       0       0       0       0
  5100 ;;      Locals:         6       0       0       0       0       0       0
  5101 ;;      Temps:          0       0       0       0       0       0       0
  5102 ;;      Totals:        12       0       0       0       0       0       0
  5103 ;;Total ram usage:       12 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; This function calls:
  5106 ;;		Nothing
  5107 ;; This function is called by:
  5108 ;;		_sprintf
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           	psect	text15
  5113  001A44                     __ptext15:
  5114                           	opt stack 0
  5115  001A44                     __div_to_l_:
  5116                           	opt stack 27
  5117                           
  5118                           ;incstack = 0
  5119  001A44  3403               	rlcf	__div_to_l_@f1+2,w,c
  5120  001A46  3404               	rlcf	__div_to_l_@f1+3,w,c
  5121  001A48  6E0C               	movwf	__div_to_l_@exp1,c
  5122  001A4A  500C               	movf	__div_to_l_@exp1,w,c
  5123  001A4C  A4D8               	btfss	status,2,c
  5124  001A4E  D009               	goto	l1312
  5125  001A50  0E00               	movlw	0
  5126  001A52  6E01               	movwf	?__div_to_l_,c
  5127  001A54  0E00               	movlw	0
  5128  001A56  6E02               	movwf	?__div_to_l_+1,c
  5129  001A58  0E00               	movlw	0
  5130  001A5A  6E03               	movwf	?__div_to_l_+2,c
  5131  001A5C  0E00               	movlw	0
  5132  001A5E  6E04               	movwf	?__div_to_l_+3,c
  5133  001A60  0012               	return	
  5134  001A62                     l1312:
  5135  001A62  3406               	rlcf	__div_to_l_@f2+2,w,c
  5136  001A64  3407               	rlcf	__div_to_l_@f2+3,w,c
  5137  001A66  6E0B               	movwf	__div_to_l_@cntr,c
  5138  001A68  500B               	movf	__div_to_l_@cntr,w,c
  5139  001A6A  A4D8               	btfss	status,2,c
  5140  001A6C  D009               	goto	l1314
  5141  001A6E  0E00               	movlw	0
  5142  001A70  6E01               	movwf	?__div_to_l_,c
  5143  001A72  0E00               	movlw	0
  5144  001A74  6E02               	movwf	?__div_to_l_+1,c
  5145  001A76  0E00               	movlw	0
  5146  001A78  6E03               	movwf	?__div_to_l_+2,c
  5147  001A7A  0E00               	movlw	0
  5148  001A7C  6E04               	movwf	?__div_to_l_+3,c
  5149  001A7E  0012               	return	
  5150  001A80                     l1314:
  5151  001A80  8E03               	bsf	__div_to_l_@f1+2,7,c
  5152  001A82  0EFF               	movlw	255
  5153  001A84  1601               	andwf	__div_to_l_@f1,f,c
  5154  001A86  0EFF               	movlw	255
  5155  001A88  1602               	andwf	__div_to_l_@f1+1,f,c
  5156  001A8A  0EFF               	movlw	255
  5157  001A8C  1603               	andwf	__div_to_l_@f1+2,f,c
  5158  001A8E  0E00               	movlw	0
  5159  001A90  1604               	andwf	__div_to_l_@f1+3,f,c
  5160  001A92  8E06               	bsf	__div_to_l_@f2+2,7,c
  5161  001A94  0EFF               	movlw	255
  5162  001A96  1604               	andwf	__div_to_l_@f2,f,c
  5163  001A98  0EFF               	movlw	255
  5164  001A9A  1605               	andwf	__div_to_l_@f2+1,f,c
  5165  001A9C  0EFF               	movlw	255
  5166  001A9E  1606               	andwf	__div_to_l_@f2+2,f,c
  5167  001AA0  0E00               	movlw	0
  5168  001AA2  1607               	andwf	__div_to_l_@f2+3,f,c
  5169  001AA4  0E00               	movlw	0
  5170  001AA6  6E07               	movwf	__div_to_l_@quot,c
  5171  001AA8  0E00               	movlw	0
  5172  001AAA  6E08               	movwf	__div_to_l_@quot+1,c
  5173  001AAC  0E00               	movlw	0
  5174  001AAE  6E09               	movwf	__div_to_l_@quot+2,c
  5175  001AB0  0E00               	movlw	0
  5176  001AB2  6E0A               	movwf	__div_to_l_@quot+3,c
  5177  001AB4  0E7F               	movlw	127
  5178  001AB6  5E0C               	subwf	__div_to_l_@exp1,f,c
  5179  001AB8  500B               	movf	__div_to_l_@cntr,w,c
  5180  001ABA  0FA0               	addlw	160
  5181  001ABC  5E0C               	subwf	__div_to_l_@exp1,f,c
  5182  001ABE  0E20               	movlw	32
  5183  001AC0  6E0B               	movwf	__div_to_l_@cntr,c
  5184  001AC2  90D8               	bcf	status,0,c
  5185  001AC4  3607               	rlcf	__div_to_l_@quot,f,c
  5186  001AC6  3608               	rlcf	__div_to_l_@quot+1,f,c
  5187  001AC8  3609               	rlcf	__div_to_l_@quot+2,f,c
  5188  001ACA  360A               	rlcf	__div_to_l_@quot+3,f,c
  5189  001ACC  5004               	movf	__div_to_l_@f2,w,c
  5190  001ACE  5C01               	subwf	__div_to_l_@f1,w,c
  5191  001AD0  5005               	movf	__div_to_l_@f2+1,w,c
  5192  001AD2  5802               	subwfb	__div_to_l_@f1+1,w,c
  5193  001AD4  5006               	movf	__div_to_l_@f2+2,w,c
  5194  001AD6  5803               	subwfb	__div_to_l_@f1+2,w,c
  5195  001AD8  5007               	movf	__div_to_l_@f2+3,w,c
  5196  001ADA  5804               	subwfb	__div_to_l_@f1+3,w,c
  5197  001ADC  A0D8               	btfss	status,0,c
  5198  001ADE  D009               	goto	l1316
  5199  001AE0  5004               	movf	__div_to_l_@f2,w,c
  5200  001AE2  5E01               	subwf	__div_to_l_@f1,f,c
  5201  001AE4  5005               	movf	__div_to_l_@f2+1,w,c
  5202  001AE6  5A02               	subwfb	__div_to_l_@f1+1,f,c
  5203  001AE8  5006               	movf	__div_to_l_@f2+2,w,c
  5204  001AEA  5A03               	subwfb	__div_to_l_@f1+2,f,c
  5205  001AEC  5007               	movf	__div_to_l_@f2+3,w,c
  5206  001AEE  5A04               	subwfb	__div_to_l_@f1+3,f,c
  5207  001AF0  8007               	bsf	__div_to_l_@quot,0,c
  5208  001AF2                     l1316:
  5209  001AF2  90D8               	bcf	status,0,c
  5210  001AF4  3601               	rlcf	__div_to_l_@f1,f,c
  5211  001AF6  3602               	rlcf	__div_to_l_@f1+1,f,c
  5212  001AF8  3603               	rlcf	__div_to_l_@f1+2,f,c
  5213  001AFA  3604               	rlcf	__div_to_l_@f1+3,f,c
  5214  001AFC  2E0B               	decfsz	__div_to_l_@cntr,f,c
  5215  001AFE  D7E1               	goto	l1315
  5216  001B00  AE0C               	btfss	__div_to_l_@exp1,7,c
  5217  001B02  D016               	goto	l1318
  5218  001B04  500C               	movf	__div_to_l_@exp1,w,c
  5219  001B06  0A80               	xorlw	128
  5220  001B08  0F9F               	addlw	159
  5221  001B0A  B0D8               	btfsc	status,0,c
  5222  001B0C  D009               	goto	l1319
  5223  001B0E  0E00               	movlw	0
  5224  001B10  6E01               	movwf	?__div_to_l_,c
  5225  001B12  0E00               	movlw	0
  5226  001B14  6E02               	movwf	?__div_to_l_+1,c
  5227  001B16  0E00               	movlw	0
  5228  001B18  6E03               	movwf	?__div_to_l_+2,c
  5229  001B1A  0E00               	movlw	0
  5230  001B1C  6E04               	movwf	?__div_to_l_+3,c
  5231  001B1E  0012               	return	
  5232  001B20                     l1319:
  5233  001B20  90D8               	bcf	status,0,c
  5234  001B22  320A               	rrcf	__div_to_l_@quot+3,f,c
  5235  001B24  3209               	rrcf	__div_to_l_@quot+2,f,c
  5236  001B26  3208               	rrcf	__div_to_l_@quot+1,f,c
  5237  001B28  3207               	rrcf	__div_to_l_@quot,f,c
  5238  001B2A  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5239  001B2C  D7F9               	goto	l1319
  5240  001B2E  D015               	goto	u4540
  5241  001B30                     l1318:
  5242  001B30  0E1F               	movlw	31
  5243  001B32  640C               	cpfsgt	__div_to_l_@exp1,c
  5244  001B34  D00F               	goto	l1324
  5245  001B36  0E00               	movlw	0
  5246  001B38  6E01               	movwf	?__div_to_l_,c
  5247  001B3A  0E00               	movlw	0
  5248  001B3C  6E02               	movwf	?__div_to_l_+1,c
  5249  001B3E  0E00               	movlw	0
  5250  001B40  6E03               	movwf	?__div_to_l_+2,c
  5251  001B42  0E00               	movlw	0
  5252  001B44  6E04               	movwf	?__div_to_l_+3,c
  5253  001B46  0012               	return	
  5254  001B48  90D8               	bcf	status,0,c
  5255  001B4A  3607               	rlcf	__div_to_l_@quot,f,c
  5256  001B4C  3608               	rlcf	__div_to_l_@quot+1,f,c
  5257  001B4E  3609               	rlcf	__div_to_l_@quot+2,f,c
  5258  001B50  360A               	rlcf	__div_to_l_@quot+3,f,c
  5259  001B52  060C               	decf	__div_to_l_@exp1,f,c
  5260  001B54                     l1324:
  5261  001B54  500C               	movf	__div_to_l_@exp1,w,c
  5262  001B56  A4D8               	btfss	status,2,c
  5263  001B58  D7F7               	goto	l1325
  5264  001B5A                     u4540:
  5265  001B5A  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5266  001B5E  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5267  001B62  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5268  001B66  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5269  001B6A  0012               	return		;funcret
  5270  001B6C                     __end_of__div_to_l_:
  5271                           	opt stack 0
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           prodh	equ	0xFF4
  5277                           prodl	equ	0xFF3
  5278                           indf0	equ	0xFEF
  5279                           postinc0	equ	0xFEE
  5280                           fsr0h	equ	0xFEA
  5281                           fsr0l	equ	0xFE9
  5282                           wreg	equ	0xFE8
  5283                           indf1	equ	0xFE7
  5284                           postdec1	equ	0xFE5
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           fsr2h	equ	0xFDA
  5291                           fsr2l	equ	0xFD9
  5292                           status	equ	0xFD8
  5293                           
  5294 ;; *************** function ___lltoft *****************
  5295 ;; Defined at:
  5296 ;;		line 35 in file "/opt/microchip/xc8/v1.44/sources/common/lltoft.c"
  5297 ;; Parameters:    Size  Location     Type
  5298 ;;  c               4    8[COMRAM] unsigned long 
  5299 ;; Auto vars:     Size  Location     Type
  5300 ;;  exp             1   16[COMRAM] unsigned char 
  5301 ;; Return value:  Size  Location     Type
  5302 ;;                  3    8[COMRAM] float 
  5303 ;; Registers used:
  5304 ;;		wreg, status,2, status,0, cstack
  5305 ;; Tracked objects:
  5306 ;;		On entry : 0/0
  5307 ;;		On exit  : 0/0
  5308 ;;		Unchanged: 0/0
  5309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5310 ;;      Params:         4       0       0       0       0       0       0
  5311 ;;      Locals:         1       0       0       0       0       0       0
  5312 ;;      Temps:          4       0       0       0       0       0       0
  5313 ;;      Totals:         9       0       0       0       0       0       0
  5314 ;;Total ram usage:        9 bytes
  5315 ;; Hardware stack levels used:    1
  5316 ;; Hardware stack levels required when called:    1
  5317 ;; This function calls:
  5318 ;;		___ftpack
  5319 ;; This function is called by:
  5320 ;;		_sprintf
  5321 ;; This function uses a non-reentrant model
  5322 ;;
  5323                           
  5324                           	psect	text16
  5325  0026BE                     __ptext16:
  5326                           	opt stack 0
  5327  0026BE                     ___lltoft:
  5328                           	opt stack 26
  5329                           
  5330                           ;incstack = 0
  5331  0026BE  0E8E               	movlw	142
  5332  0026C0  6E11               	movwf	___lltoft@exp,c
  5333  0026C2  D006               	goto	l1523
  5334  0026C4  90D8               	bcf	status,0,c
  5335  0026C6  320C               	rrcf	___lltoft@c+3,f,c
  5336  0026C8  320B               	rrcf	___lltoft@c+2,f,c
  5337  0026CA  320A               	rrcf	___lltoft@c+1,f,c
  5338  0026CC  3209               	rrcf	___lltoft@c,f,c
  5339  0026CE  2A11               	incf	___lltoft@exp,f,c
  5340  0026D0                     l1523:
  5341  0026D0  0E00               	movlw	0
  5342  0026D2  1409               	andwf	___lltoft@c,w,c
  5343  0026D4  6E0D               	movwf	??___lltoft& (0+255),c
  5344  0026D6  0E00               	movlw	0
  5345  0026D8  140A               	andwf	___lltoft@c+1,w,c
  5346  0026DA  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  5347  0026DC  0E00               	movlw	0
  5348  0026DE  140B               	andwf	___lltoft@c+2,w,c
  5349  0026E0  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  5350  0026E2  0EFF               	movlw	255
  5351  0026E4  140C               	andwf	___lltoft@c+3,w,c
  5352  0026E6  6E10               	movwf	(??___lltoft+3)& (0+255),c
  5353  0026E8  500D               	movf	??___lltoft,w,c
  5354  0026EA  100E               	iorwf	??___lltoft+1,w,c
  5355  0026EC  100F               	iorwf	??___lltoft+2,w,c
  5356  0026EE  1010               	iorwf	??___lltoft+3,w,c
  5357  0026F0  A4D8               	btfss	status,2,c
  5358  0026F2  D7E8               	goto	l1524
  5359  0026F4  C009  F001         	movff	___lltoft@c,___ftpack@arg
  5360  0026F8  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  5361  0026FC  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  5362  002700  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  5363  002704  0E00               	movlw	0
  5364  002706  6E05               	movwf	___ftpack@sign,c
  5365  002708  EC43  F010         	call	___ftpack	;wreg free
  5366  00270C  C001  F009         	movff	?___ftpack,?___lltoft
  5367  002710  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  5368  002714  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  5369  002718  0012               	return	
  5370  00271A                     __end_of___lltoft:
  5371                           	opt stack 0
  5372                           tblptru	equ	0xFF8
  5373                           tblptrh	equ	0xFF7
  5374                           tblptrl	equ	0xFF6
  5375                           tablat	equ	0xFF5
  5376                           prodh	equ	0xFF4
  5377                           prodl	equ	0xFF3
  5378                           indf0	equ	0xFEF
  5379                           postinc0	equ	0xFEE
  5380                           fsr0h	equ	0xFEA
  5381                           fsr0l	equ	0xFE9
  5382                           wreg	equ	0xFE8
  5383                           indf1	equ	0xFE7
  5384                           postdec1	equ	0xFE5
  5385                           fsr1h	equ	0xFE2
  5386                           fsr1l	equ	0xFE1
  5387                           indf2	equ	0xFDF
  5388                           postinc2	equ	0xFDE
  5389                           postdec2	equ	0xFDD
  5390                           fsr2h	equ	0xFDA
  5391                           fsr2l	equ	0xFD9
  5392                           status	equ	0xFD8
  5393                           
  5394 ;; *************** function ___llmod *****************
  5395 ;; Defined at:
  5396 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/llmod.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;  dividend        4   13[COMRAM] unsigned long 
  5399 ;;  divisor         4   17[COMRAM] unsigned long 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  counter         1   21[COMRAM] unsigned char 
  5402 ;; Return value:  Size  Location     Type
  5403 ;;                  4   13[COMRAM] unsigned long 
  5404 ;; Registers used:
  5405 ;;		wreg, status,2, status,0
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5411 ;;      Params:         8       0       0       0       0       0       0
  5412 ;;      Locals:         1       0       0       0       0       0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0
  5414 ;;      Totals:         9       0       0       0       0       0       0
  5415 ;;Total ram usage:        9 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; This function calls:
  5418 ;;		Nothing
  5419 ;; This function is called by:
  5420 ;;		_sprintf
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           	psect	text17
  5425  002538                     __ptext17:
  5426                           	opt stack 0
  5427  002538                     ___llmod:
  5428                           	opt stack 27
  5429                           
  5430                           ;incstack = 0
  5431  002538  5012               	movf	___llmod@divisor,w,c
  5432  00253A  1013               	iorwf	___llmod@divisor+1,w,c
  5433  00253C  1014               	iorwf	___llmod@divisor+2,w,c
  5434  00253E  1015               	iorwf	___llmod@divisor+3,w,c
  5435  002540  B4D8               	btfsc	status,2,c
  5436  002542  D024               	goto	l1517
  5437  002544  0E01               	movlw	1
  5438  002546  6E16               	movwf	___llmod@counter,c
  5439  002548  D006               	goto	l1512
  5440  00254A  90D8               	bcf	status,0,c
  5441  00254C  3612               	rlcf	___llmod@divisor,f,c
  5442  00254E  3613               	rlcf	___llmod@divisor+1,f,c
  5443  002550  3614               	rlcf	___llmod@divisor+2,f,c
  5444  002552  3615               	rlcf	___llmod@divisor+3,f,c
  5445  002554  2A16               	incf	___llmod@counter,f,c
  5446  002556                     l1512:
  5447  002556  AE15               	btfss	___llmod@divisor+3,7,c
  5448  002558  D7F8               	goto	l1513
  5449  00255A                     u4720:
  5450  00255A  5012               	movf	___llmod@divisor,w,c
  5451  00255C  5C0E               	subwf	___llmod@dividend,w,c
  5452  00255E  5013               	movf	___llmod@divisor+1,w,c
  5453  002560  580F               	subwfb	___llmod@dividend+1,w,c
  5454  002562  5014               	movf	___llmod@divisor+2,w,c
  5455  002564  5810               	subwfb	___llmod@dividend+2,w,c
  5456  002566  5015               	movf	___llmod@divisor+3,w,c
  5457  002568  5811               	subwfb	___llmod@dividend+3,w,c
  5458  00256A  A0D8               	btfss	status,0,c
  5459  00256C  D008               	goto	l1516
  5460  00256E  5012               	movf	___llmod@divisor,w,c
  5461  002570  5E0E               	subwf	___llmod@dividend,f,c
  5462  002572  5013               	movf	___llmod@divisor+1,w,c
  5463  002574  5A0F               	subwfb	___llmod@dividend+1,f,c
  5464  002576  5014               	movf	___llmod@divisor+2,w,c
  5465  002578  5A10               	subwfb	___llmod@dividend+2,f,c
  5466  00257A  5015               	movf	___llmod@divisor+3,w,c
  5467  00257C  5A11               	subwfb	___llmod@dividend+3,f,c
  5468  00257E                     l1516:
  5469  00257E  90D8               	bcf	status,0,c
  5470  002580  3215               	rrcf	___llmod@divisor+3,f,c
  5471  002582  3214               	rrcf	___llmod@divisor+2,f,c
  5472  002584  3213               	rrcf	___llmod@divisor+1,f,c
  5473  002586  3212               	rrcf	___llmod@divisor,f,c
  5474  002588  2E16               	decfsz	___llmod@counter,f,c
  5475  00258A  D7E7               	goto	u4720
  5476  00258C                     l1517:
  5477  00258C  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5478  002590  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5479  002594  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5480  002598  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5481  00259C  0012               	return		;funcret
  5482  00259E                     __end_of___llmod:
  5483                           	opt stack 0
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           indf0	equ	0xFEF
  5491                           postinc0	equ	0xFEE
  5492                           fsr0h	equ	0xFEA
  5493                           fsr0l	equ	0xFE9
  5494                           wreg	equ	0xFE8
  5495                           indf1	equ	0xFE7
  5496                           postdec1	equ	0xFE5
  5497                           fsr1h	equ	0xFE2
  5498                           fsr1l	equ	0xFE1
  5499                           indf2	equ	0xFDF
  5500                           postinc2	equ	0xFDE
  5501                           postdec2	equ	0xFDD
  5502                           fsr2h	equ	0xFDA
  5503                           fsr2l	equ	0xFD9
  5504                           status	equ	0xFD8
  5505                           
  5506 ;; *************** function ___lldiv *****************
  5507 ;; Defined at:
  5508 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/lldiv.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;  dividend        4    0[COMRAM] unsigned long 
  5511 ;;  divisor         4    4[COMRAM] unsigned long 
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;  quotient        4    8[COMRAM] unsigned long 
  5514 ;;  counter         1   12[COMRAM] unsigned char 
  5515 ;; Return value:  Size  Location     Type
  5516 ;;                  4    0[COMRAM] unsigned long 
  5517 ;; Registers used:
  5518 ;;		wreg, status,2, status,0
  5519 ;; Tracked objects:
  5520 ;;		On entry : 0/0
  5521 ;;		On exit  : 0/0
  5522 ;;		Unchanged: 0/0
  5523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5524 ;;      Params:         8       0       0       0       0       0       0
  5525 ;;      Locals:         5       0       0       0       0       0       0
  5526 ;;      Temps:          0       0       0       0       0       0       0
  5527 ;;      Totals:        13       0       0       0       0       0       0
  5528 ;;Total ram usage:       13 bytes
  5529 ;; Hardware stack levels used:    1
  5530 ;; This function calls:
  5531 ;;		Nothing
  5532 ;; This function is called by:
  5533 ;;		_sprintf
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           	psect	text18
  5538  0022EC                     __ptext18:
  5539                           	opt stack 0
  5540  0022EC                     ___lldiv:
  5541                           	opt stack 27
  5542                           
  5543                           ;incstack = 0
  5544  0022EC  0E00               	movlw	0
  5545  0022EE  6E09               	movwf	___lldiv@quotient,c
  5546  0022F0  0E00               	movlw	0
  5547  0022F2  6E0A               	movwf	___lldiv@quotient+1,c
  5548  0022F4  0E00               	movlw	0
  5549  0022F6  6E0B               	movwf	___lldiv@quotient+2,c
  5550  0022F8  0E00               	movlw	0
  5551  0022FA  6E0C               	movwf	___lldiv@quotient+3,c
  5552  0022FC  5005               	movf	___lldiv@divisor,w,c
  5553  0022FE  1006               	iorwf	___lldiv@divisor+1,w,c
  5554  002300  1007               	iorwf	___lldiv@divisor+2,w,c
  5555  002302  1008               	iorwf	___lldiv@divisor+3,w,c
  5556  002304  B4D8               	btfsc	status,2,c
  5557  002306  D02A               	goto	l1507
  5558  002308  0E01               	movlw	1
  5559  00230A  6E0D               	movwf	___lldiv@counter,c
  5560  00230C  D006               	goto	l1502
  5561  00230E  90D8               	bcf	status,0,c
  5562  002310  3605               	rlcf	___lldiv@divisor,f,c
  5563  002312  3606               	rlcf	___lldiv@divisor+1,f,c
  5564  002314  3607               	rlcf	___lldiv@divisor+2,f,c
  5565  002316  3608               	rlcf	___lldiv@divisor+3,f,c
  5566  002318  2A0D               	incf	___lldiv@counter,f,c
  5567  00231A                     l1502:
  5568  00231A  AE08               	btfss	___lldiv@divisor+3,7,c
  5569  00231C  D7F8               	goto	l1503
  5570  00231E                     u4690:
  5571  00231E  90D8               	bcf	status,0,c
  5572  002320  3609               	rlcf	___lldiv@quotient,f,c
  5573  002322  360A               	rlcf	___lldiv@quotient+1,f,c
  5574  002324  360B               	rlcf	___lldiv@quotient+2,f,c
  5575  002326  360C               	rlcf	___lldiv@quotient+3,f,c
  5576  002328  5005               	movf	___lldiv@divisor,w,c
  5577  00232A  5C01               	subwf	___lldiv@dividend,w,c
  5578  00232C  5006               	movf	___lldiv@divisor+1,w,c
  5579  00232E  5802               	subwfb	___lldiv@dividend+1,w,c
  5580  002330  5007               	movf	___lldiv@divisor+2,w,c
  5581  002332  5803               	subwfb	___lldiv@dividend+2,w,c
  5582  002334  5008               	movf	___lldiv@divisor+3,w,c
  5583  002336  5804               	subwfb	___lldiv@dividend+3,w,c
  5584  002338  A0D8               	btfss	status,0,c
  5585  00233A  D009               	goto	l1506
  5586  00233C  5005               	movf	___lldiv@divisor,w,c
  5587  00233E  5E01               	subwf	___lldiv@dividend,f,c
  5588  002340  5006               	movf	___lldiv@divisor+1,w,c
  5589  002342  5A02               	subwfb	___lldiv@dividend+1,f,c
  5590  002344  5007               	movf	___lldiv@divisor+2,w,c
  5591  002346  5A03               	subwfb	___lldiv@dividend+2,f,c
  5592  002348  5008               	movf	___lldiv@divisor+3,w,c
  5593  00234A  5A04               	subwfb	___lldiv@dividend+3,f,c
  5594  00234C  8009               	bsf	___lldiv@quotient,0,c
  5595  00234E                     l1506:
  5596  00234E  90D8               	bcf	status,0,c
  5597  002350  3208               	rrcf	___lldiv@divisor+3,f,c
  5598  002352  3207               	rrcf	___lldiv@divisor+2,f,c
  5599  002354  3206               	rrcf	___lldiv@divisor+1,f,c
  5600  002356  3205               	rrcf	___lldiv@divisor,f,c
  5601  002358  2E0D               	decfsz	___lldiv@counter,f,c
  5602  00235A  D7E1               	goto	u4690
  5603  00235C                     l1507:
  5604  00235C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5605  002360  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5606  002364  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5607  002368  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5608  00236C  0012               	return		;funcret
  5609  00236E                     __end_of___lldiv:
  5610                           	opt stack 0
  5611                           tblptru	equ	0xFF8
  5612                           tblptrh	equ	0xFF7
  5613                           tblptrl	equ	0xFF6
  5614                           tablat	equ	0xFF5
  5615                           prodh	equ	0xFF4
  5616                           prodl	equ	0xFF3
  5617                           indf0	equ	0xFEF
  5618                           postinc0	equ	0xFEE
  5619                           fsr0h	equ	0xFEA
  5620                           fsr0l	equ	0xFE9
  5621                           wreg	equ	0xFE8
  5622                           indf1	equ	0xFE7
  5623                           postdec1	equ	0xFE5
  5624                           fsr1h	equ	0xFE2
  5625                           fsr1l	equ	0xFE1
  5626                           indf2	equ	0xFDF
  5627                           postinc2	equ	0xFDE
  5628                           postdec2	equ	0xFDD
  5629                           fsr2h	equ	0xFDA
  5630                           fsr2l	equ	0xFD9
  5631                           status	equ	0xFD8
  5632                           
  5633 ;; *************** function ___fttol *****************
  5634 ;; Defined at:
  5635 ;;		line 44 in file "/opt/microchip/xc8/v1.44/sources/common/fttol.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;  f1              3   42[COMRAM] float 
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;  lval            4   52[COMRAM] unsigned long 
  5640 ;;  exp1            1   56[COMRAM] unsigned char 
  5641 ;;  sign1           1   51[COMRAM] unsigned char 
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  4   42[COMRAM] long 
  5644 ;; Registers used:
  5645 ;;		wreg, status,2, status,0
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5651 ;;      Params:         4       0       0       0       0       0       0
  5652 ;;      Locals:         6       0       0       0       0       0       0
  5653 ;;      Temps:          5       0       0       0       0       0       0
  5654 ;;      Totals:        15       0       0       0       0       0       0
  5655 ;;Total ram usage:       15 bytes
  5656 ;; Hardware stack levels used:    1
  5657 ;; This function calls:
  5658 ;;		Nothing
  5659 ;; This function is called by:
  5660 ;;		_sprintf
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text19
  5665  001B6C                     __ptext19:
  5666                           	opt stack 0
  5667  001B6C                     ___fttol:
  5668                           	opt stack 27
  5669                           
  5670                           ;incstack = 0
  5671  001B6C  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  5672  001B70  6A30               	clrf	(??___fttol+1)& (0+255),c
  5673  001B72  6A31               	clrf	(??___fttol+2)& (0+255),c
  5674  001B74  342C               	rlcf	___fttol@f1+1,w,c
  5675  001B76  362F               	rlcf	??___fttol& (0+255),f,c
  5676  001B78  E301               	bnc	u4601
  5677  001B7A  8030               	bsf	(??___fttol+1)& (0+255),0,c
  5678  001B7C                     u4601:
  5679  001B7C  502F               	movf	??___fttol,w,c
  5680  001B7E  6E39               	movwf	___fttol@exp1,c
  5681  001B80  5039               	movf	___fttol@exp1,w,c
  5682  001B82  A4D8               	btfss	status,2,c
  5683  001B84  D009               	goto	l1461
  5684  001B86  0E00               	movlw	0
  5685  001B88  6E2B               	movwf	?___fttol,c
  5686  001B8A  0E00               	movlw	0
  5687  001B8C  6E2C               	movwf	?___fttol+1,c
  5688  001B8E  0E00               	movlw	0
  5689  001B90  6E2D               	movwf	?___fttol+2,c
  5690  001B92  0E00               	movlw	0
  5691  001B94  6E2E               	movwf	?___fttol+3,c
  5692  001B96  0012               	return	
  5693  001B98                     l1461:
  5694  001B98  0E17               	movlw	23
  5695  001B9A  6E2F               	movwf	??___fttol& (0+255),c
  5696  001B9C  C02B  F030         	movff	___fttol@f1,??___fttol+1
  5697  001BA0  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  5698  001BA4  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  5699  001BA8  282F               	incf	??___fttol,w,c
  5700  001BAA  6E33               	movwf	(??___fttol+4)& (0+255),c
  5701  001BAC  D004               	goto	u4620
  5702  001BAE                     u4625:
  5703  001BAE  90D8               	bcf	status,0,c
  5704  001BB0  3232               	rrcf	??___fttol+3,f,c
  5705  001BB2  3231               	rrcf	??___fttol+2,f,c
  5706  001BB4  3230               	rrcf	??___fttol+1,f,c
  5707  001BB6                     u4620:
  5708  001BB6  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5709  001BB8  D7FA               	goto	u4625
  5710  001BBA  5030               	movf	??___fttol+1,w,c
  5711  001BBC  6E34               	movwf	___fttol@sign1,c
  5712  001BBE  8E2C               	bsf	___fttol@f1+1,7,c
  5713  001BC0  0EFF               	movlw	255
  5714  001BC2  162B               	andwf	___fttol@f1,f,c
  5715  001BC4  0EFF               	movlw	255
  5716  001BC6  162C               	andwf	___fttol@f1+1,f,c
  5717  001BC8  0E00               	movlw	0
  5718  001BCA  162D               	andwf	___fttol@f1+2,f,c
  5719  001BCC  502B               	movf	___fttol@f1,w,c
  5720  001BCE  6E35               	movwf	___fttol@lval,c
  5721  001BD0  502C               	movf	___fttol@f1+1,w,c
  5722  001BD2  6E36               	movwf	___fttol@lval+1,c
  5723  001BD4  502D               	movf	___fttol@f1+2,w,c
  5724  001BD6  6E37               	movwf	___fttol@lval+2,c
  5725  001BD8  6A38               	clrf	___fttol@lval+3,c
  5726  001BDA  0E8E               	movlw	142
  5727  001BDC  5E39               	subwf	___fttol@exp1,f,c
  5728  001BDE  AE39               	btfss	___fttol@exp1,7,c
  5729  001BE0  D016               	goto	l1463
  5730  001BE2  5039               	movf	___fttol@exp1,w,c
  5731  001BE4  0A80               	xorlw	128
  5732  001BE6  0F8F               	addlw	143
  5733  001BE8  B0D8               	btfsc	status,0,c
  5734  001BEA  D009               	goto	l1464
  5735  001BEC  0E00               	movlw	0
  5736  001BEE  6E2B               	movwf	?___fttol,c
  5737  001BF0  0E00               	movlw	0
  5738  001BF2  6E2C               	movwf	?___fttol+1,c
  5739  001BF4  0E00               	movlw	0
  5740  001BF6  6E2D               	movwf	?___fttol+2,c
  5741  001BF8  0E00               	movlw	0
  5742  001BFA  6E2E               	movwf	?___fttol+3,c
  5743  001BFC  0012               	return	
  5744  001BFE                     l1464:
  5745  001BFE  90D8               	bcf	status,0,c
  5746  001C00  3238               	rrcf	___fttol@lval+3,f,c
  5747  001C02  3237               	rrcf	___fttol@lval+2,f,c
  5748  001C04  3236               	rrcf	___fttol@lval+1,f,c
  5749  001C06  3235               	rrcf	___fttol@lval,f,c
  5750  001C08  3E39               	incfsz	___fttol@exp1,f,c
  5751  001C0A  D7F9               	goto	l1464
  5752  001C0C  D015               	goto	u4660
  5753  001C0E                     l1463:
  5754  001C0E  0E17               	movlw	23
  5755  001C10  6439               	cpfsgt	___fttol@exp1,c
  5756  001C12  D00F               	goto	l1469
  5757  001C14  0E00               	movlw	0
  5758  001C16  6E2B               	movwf	?___fttol,c
  5759  001C18  0E00               	movlw	0
  5760  001C1A  6E2C               	movwf	?___fttol+1,c
  5761  001C1C  0E00               	movlw	0
  5762  001C1E  6E2D               	movwf	?___fttol+2,c
  5763  001C20  0E00               	movlw	0
  5764  001C22  6E2E               	movwf	?___fttol+3,c
  5765  001C24  0012               	return	
  5766  001C26  90D8               	bcf	status,0,c
  5767  001C28  3635               	rlcf	___fttol@lval,f,c
  5768  001C2A  3636               	rlcf	___fttol@lval+1,f,c
  5769  001C2C  3637               	rlcf	___fttol@lval+2,f,c
  5770  001C2E  3638               	rlcf	___fttol@lval+3,f,c
  5771  001C30  0639               	decf	___fttol@exp1,f,c
  5772  001C32                     l1469:
  5773  001C32  5039               	movf	___fttol@exp1,w,c
  5774  001C34  A4D8               	btfss	status,2,c
  5775  001C36  D7F7               	goto	l1470
  5776  001C38                     u4660:
  5777  001C38  5034               	movf	___fttol@sign1,w,c
  5778  001C3A  B4D8               	btfsc	status,2,c
  5779  001C3C  D008               	goto	l1472
  5780  001C3E  1E38               	comf	___fttol@lval+3,f,c
  5781  001C40  1E37               	comf	___fttol@lval+2,f,c
  5782  001C42  1E36               	comf	___fttol@lval+1,f,c
  5783  001C44  6C35               	negf	___fttol@lval,c
  5784  001C46  0E00               	movlw	0
  5785  001C48  2236               	addwfc	___fttol@lval+1,f,c
  5786  001C4A  2237               	addwfc	___fttol@lval+2,f,c
  5787  001C4C  2238               	addwfc	___fttol@lval+3,f,c
  5788  001C4E                     l1472:
  5789  001C4E  C035  F02B         	movff	___fttol@lval,?___fttol
  5790  001C52  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5791  001C56  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5792  001C5A  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5793  001C5E  0012               	return	
  5794  001C60                     __end_of___fttol:
  5795                           	opt stack 0
  5796                           tblptru	equ	0xFF8
  5797                           tblptrh	equ	0xFF7
  5798                           tblptrl	equ	0xFF6
  5799                           tablat	equ	0xFF5
  5800                           prodh	equ	0xFF4
  5801                           prodl	equ	0xFF3
  5802                           indf0	equ	0xFEF
  5803                           postinc0	equ	0xFEE
  5804                           fsr0h	equ	0xFEA
  5805                           fsr0l	equ	0xFE9
  5806                           wreg	equ	0xFE8
  5807                           indf1	equ	0xFE7
  5808                           postdec1	equ	0xFE5
  5809                           fsr1h	equ	0xFE2
  5810                           fsr1l	equ	0xFE1
  5811                           indf2	equ	0xFDF
  5812                           postinc2	equ	0xFDE
  5813                           postdec2	equ	0xFDD
  5814                           fsr2h	equ	0xFDA
  5815                           fsr2l	equ	0xFD9
  5816                           status	equ	0xFD8
  5817                           
  5818 ;; *************** function ___ftsub *****************
  5819 ;; Defined at:
  5820 ;;		line 20 in file "/opt/microchip/xc8/v1.44/sources/common/ftsub.c"
  5821 ;; Parameters:    Size  Location     Type
  5822 ;;  f1              3   57[COMRAM] float 
  5823 ;;  f2              3   60[COMRAM] float 
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;		None
  5826 ;; Return value:  Size  Location     Type
  5827 ;;                  3   57[COMRAM] float 
  5828 ;; Registers used:
  5829 ;;		wreg, status,2, status,0, cstack
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5835 ;;      Params:         6       0       0       0       0       0       0
  5836 ;;      Locals:         0       0       0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0
  5838 ;;      Totals:         6       0       0       0       0       0       0
  5839 ;;Total ram usage:        6 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; Hardware stack levels required when called:    2
  5842 ;; This function calls:
  5843 ;;		___ftadd
  5844 ;; This function is called by:
  5845 ;;		_sprintf
  5846 ;; This function uses a non-reentrant model
  5847 ;;
  5848                           
  5849                           	psect	text20
  5850  0028F8                     __ptext20:
  5851                           	opt stack 0
  5852  0028F8                     ___ftsub:
  5853                           	opt stack 25
  5854                           
  5855                           ;incstack = 0
  5856  0028F8  503D               	movf	___ftsub@f2,w,c
  5857  0028FA  103E               	iorwf	___ftsub@f2+1,w,c
  5858  0028FC  103F               	iorwf	___ftsub@f2+2,w,c
  5859  0028FE  B4D8               	btfsc	status,2,c
  5860  002900  D006               	goto	l1457
  5861  002902  0E00               	movlw	0
  5862  002904  1A3D               	xorwf	___ftsub@f2,f,c
  5863  002906  0E00               	movlw	0
  5864  002908  1A3E               	xorwf	___ftsub@f2+1,f,c
  5865  00290A  0E80               	movlw	128
  5866  00290C  1A3F               	xorwf	___ftsub@f2+2,f,c
  5867  00290E                     l1457:
  5868  00290E  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5869  002912  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5870  002916  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5871  00291A  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5872  00291E  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5873  002922  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5874  002926  ECF8  F00A         	call	___ftadd	;wreg free
  5875  00292A  C02E  F03A         	movff	?___ftadd,?___ftsub
  5876  00292E  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5877  002932  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5878  002936  0012               	return	
  5879  002938                     __end_of___ftsub:
  5880                           	opt stack 0
  5881                           tblptru	equ	0xFF8
  5882                           tblptrh	equ	0xFF7
  5883                           tblptrl	equ	0xFF6
  5884                           tablat	equ	0xFF5
  5885                           prodh	equ	0xFF4
  5886                           prodl	equ	0xFF3
  5887                           indf0	equ	0xFEF
  5888                           postinc0	equ	0xFEE
  5889                           fsr0h	equ	0xFEA
  5890                           fsr0l	equ	0xFE9
  5891                           wreg	equ	0xFE8
  5892                           indf1	equ	0xFE7
  5893                           postdec1	equ	0xFE5
  5894                           fsr1h	equ	0xFE2
  5895                           fsr1l	equ	0xFE1
  5896                           indf2	equ	0xFDF
  5897                           postinc2	equ	0xFDE
  5898                           postdec2	equ	0xFDD
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function ___ftadd *****************
  5904 ;; Defined at:
  5905 ;;		line 86 in file "/opt/microchip/xc8/v1.44/sources/common/ftadd.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;  f1              3   45[COMRAM] float 
  5908 ;;  f2              3   48[COMRAM] float 
  5909 ;; Auto vars:     Size  Location     Type
  5910 ;;  exp1            1   56[COMRAM] unsigned char 
  5911 ;;  exp2            1   55[COMRAM] unsigned char 
  5912 ;;  sign            1   54[COMRAM] unsigned char 
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  3   45[COMRAM] float 
  5915 ;; Registers used:
  5916 ;;		wreg, status,2, status,0, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5922 ;;      Params:         6       0       0       0       0       0       0
  5923 ;;      Locals:         3       0       0       0       0       0       0
  5924 ;;      Temps:          3       0       0       0       0       0       0
  5925 ;;      Totals:        12       0       0       0       0       0       0
  5926 ;;Total ram usage:       12 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    1
  5929 ;; This function calls:
  5930 ;;		___ftpack
  5931 ;; This function is called by:
  5932 ;;		_sprintf
  5933 ;;		___ftsub
  5934 ;; This function uses a non-reentrant model
  5935 ;;
  5936                           
  5937                           	psect	text21
  5938  0015F0                     __ptext21:
  5939                           	opt stack 0
  5940  0015F0                     ___ftadd:
  5941                           	opt stack 25
  5942                           
  5943                           ;incstack = 0
  5944  0015F0  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5945  0015F4  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5946  0015F6  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5947  0015F8  342F               	rlcf	___ftadd@f1+1,w,c
  5948  0015FA  3634               	rlcf	??___ftadd& (0+255),f,c
  5949  0015FC  E301               	bnc	u3671
  5950  0015FE  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5951  001600                     u3671:
  5952  001600  5034               	movf	??___ftadd,w,c
  5953  001602  6E39               	movwf	___ftadd@exp1,c
  5954  001604  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5955  001608  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5956  00160A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5957  00160C  3432               	rlcf	___ftadd@f2+1,w,c
  5958  00160E  3634               	rlcf	??___ftadd& (0+255),f,c
  5959  001610  E301               	bnc	u3681
  5960  001612  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5961  001614                     u3681:
  5962  001614  5034               	movf	??___ftadd,w,c
  5963  001616  6E38               	movwf	___ftadd@exp2,c
  5964  001618  5039               	movf	___ftadd@exp1,w,c
  5965  00161A  B4D8               	btfsc	status,2,c
  5966  00161C  D00B               	goto	u3710
  5967  00161E  5038               	movf	___ftadd@exp2,w,c
  5968  001620  5C39               	subwf	___ftadd@exp1,w,c
  5969  001622  B0D8               	btfsc	status,0,c
  5970  001624  D00E               	goto	l1375
  5971  001626  5039               	movf	___ftadd@exp1,w,c
  5972  001628  0800               	sublw	0
  5973  00162A  2438               	addwf	___ftadd@exp2,w,c
  5974  00162C  6E34               	movwf	??___ftadd& (0+255),c
  5975  00162E  0E18               	movlw	24
  5976  001630  6434               	cpfsgt	??___ftadd,c
  5977  001632  D007               	goto	l1375
  5978  001634                     u3710:
  5979  001634  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5980  001638  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5981  00163C  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5982  001640  0012               	return	
  5983  001642                     l1375:
  5984  001642  5038               	movf	___ftadd@exp2,w,c
  5985  001644  B4D8               	btfsc	status,2,c
  5986  001646  D00B               	goto	u3740
  5987  001648  5039               	movf	___ftadd@exp1,w,c
  5988  00164A  5C38               	subwf	___ftadd@exp2,w,c
  5989  00164C  B0D8               	btfsc	status,0,c
  5990  00164E  D00E               	goto	l1379
  5991  001650  5038               	movf	___ftadd@exp2,w,c
  5992  001652  0800               	sublw	0
  5993  001654  2439               	addwf	___ftadd@exp1,w,c
  5994  001656  6E34               	movwf	??___ftadd& (0+255),c
  5995  001658  0E18               	movlw	24
  5996  00165A  6434               	cpfsgt	??___ftadd,c
  5997  00165C  D007               	goto	l1379
  5998  00165E                     u3740:
  5999  00165E  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  6000  001662  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  6001  001666  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  6002  00166A  0012               	return	
  6003  00166C                     l1379:
  6004  00166C  0E06               	movlw	6
  6005  00166E  6E37               	movwf	___ftadd@sign,c
  6006  001670  BE30               	btfsc	___ftadd@f1+2,7,c
  6007  001672  8E37               	bsf	___ftadd@sign,7,c
  6008  001674  BE33               	btfsc	___ftadd@f2+2,7,c
  6009  001676  8C37               	bsf	___ftadd@sign,6,c
  6010  001678  8E2F               	bsf	___ftadd@f1+1,7,c
  6011  00167A  0EFF               	movlw	255
  6012  00167C  162E               	andwf	___ftadd@f1,f,c
  6013  00167E  0EFF               	movlw	255
  6014  001680  162F               	andwf	___ftadd@f1+1,f,c
  6015  001682  0E00               	movlw	0
  6016  001684  1630               	andwf	___ftadd@f1+2,f,c
  6017  001686  8E32               	bsf	___ftadd@f2+1,7,c
  6018  001688  0EFF               	movlw	255
  6019  00168A  1631               	andwf	___ftadd@f2,f,c
  6020  00168C  0EFF               	movlw	255
  6021  00168E  1632               	andwf	___ftadd@f2+1,f,c
  6022  001690  0E00               	movlw	0
  6023  001692  1633               	andwf	___ftadd@f2+2,f,c
  6024  001694  5038               	movf	___ftadd@exp2,w,c
  6025  001696  5C39               	subwf	___ftadd@exp1,w,c
  6026  001698  B0D8               	btfsc	status,0,c
  6027  00169A  D01B               	goto	l1384
  6028  00169C                     u3770:
  6029  00169C  90D8               	bcf	status,0,c
  6030  00169E  3631               	rlcf	___ftadd@f2,f,c
  6031  0016A0  3632               	rlcf	___ftadd@f2+1,f,c
  6032  0016A2  3633               	rlcf	___ftadd@f2+2,f,c
  6033  0016A4  0638               	decf	___ftadd@exp2,f,c
  6034  0016A6  5039               	movf	___ftadd@exp1,w,c
  6035  0016A8  1838               	xorwf	___ftadd@exp2,w,c
  6036  0016AA  B4D8               	btfsc	status,2,c
  6037  0016AC  D00D               	goto	l1389
  6038  0016AE  0637               	decf	___ftadd@sign,f,c
  6039  0016B0  C037  F034         	movff	___ftadd@sign,??___ftadd
  6040  0016B4  0E07               	movlw	7
  6041  0016B6  1634               	andwf	??___ftadd,f,c
  6042  0016B8  B4D8               	btfsc	status,2,c
  6043  0016BA  D006               	goto	l1389
  6044  0016BC  D7EF               	goto	u3770
  6045  0016BE  90D8               	bcf	status,0,c
  6046  0016C0  3230               	rrcf	___ftadd@f1+2,f,c
  6047  0016C2  322F               	rrcf	___ftadd@f1+1,f,c
  6048  0016C4  322E               	rrcf	___ftadd@f1,f,c
  6049  0016C6  2A39               	incf	___ftadd@exp1,f,c
  6050  0016C8                     l1389:
  6051  0016C8  5038               	movf	___ftadd@exp2,w,c
  6052  0016CA  1839               	xorwf	___ftadd@exp1,w,c
  6053  0016CC  B4D8               	btfsc	status,2,c
  6054  0016CE  D01F               	goto	u3840
  6055  0016D0  D7F6               	goto	l1390
  6056  0016D2                     l1384:
  6057  0016D2  5039               	movf	___ftadd@exp1,w,c
  6058  0016D4  5C38               	subwf	___ftadd@exp2,w,c
  6059  0016D6  B0D8               	btfsc	status,0,c
  6060  0016D8  D01A               	goto	u3840
  6061  0016DA                     u3810:
  6062  0016DA  90D8               	bcf	status,0,c
  6063  0016DC  362E               	rlcf	___ftadd@f1,f,c
  6064  0016DE  362F               	rlcf	___ftadd@f1+1,f,c
  6065  0016E0  3630               	rlcf	___ftadd@f1+2,f,c
  6066  0016E2  0639               	decf	___ftadd@exp1,f,c
  6067  0016E4  5039               	movf	___ftadd@exp1,w,c
  6068  0016E6  1838               	xorwf	___ftadd@exp2,w,c
  6069  0016E8  B4D8               	btfsc	status,2,c
  6070  0016EA  D00D               	goto	l1398
  6071  0016EC  0637               	decf	___ftadd@sign,f,c
  6072  0016EE  C037  F034         	movff	___ftadd@sign,??___ftadd
  6073  0016F2  0E07               	movlw	7
  6074  0016F4  1634               	andwf	??___ftadd,f,c
  6075  0016F6  B4D8               	btfsc	status,2,c
  6076  0016F8  D006               	goto	l1398
  6077  0016FA  D7EF               	goto	u3810
  6078  0016FC  90D8               	bcf	status,0,c
  6079  0016FE  3233               	rrcf	___ftadd@f2+2,f,c
  6080  001700  3232               	rrcf	___ftadd@f2+1,f,c
  6081  001702  3231               	rrcf	___ftadd@f2,f,c
  6082  001704  2A38               	incf	___ftadd@exp2,f,c
  6083  001706                     l1398:
  6084  001706  5038               	movf	___ftadd@exp2,w,c
  6085  001708  1839               	xorwf	___ftadd@exp1,w,c
  6086  00170A  A4D8               	btfss	status,2,c
  6087  00170C  D7F7               	goto	l1399
  6088  00170E                     u3840:
  6089  00170E  AE37               	btfss	___ftadd@sign,7,c
  6090  001710  D00C               	goto	l1401
  6091  001712  0EFF               	movlw	255
  6092  001714  1A2E               	xorwf	___ftadd@f1,f,c
  6093  001716  0EFF               	movlw	255
  6094  001718  1A2F               	xorwf	___ftadd@f1+1,f,c
  6095  00171A  0EFF               	movlw	255
  6096  00171C  1A30               	xorwf	___ftadd@f1+2,f,c
  6097  00171E  0E01               	movlw	1
  6098  001720  262E               	addwf	___ftadd@f1,f,c
  6099  001722  0E00               	movlw	0
  6100  001724  222F               	addwfc	___ftadd@f1+1,f,c
  6101  001726  0E00               	movlw	0
  6102  001728  2230               	addwfc	___ftadd@f1+2,f,c
  6103  00172A                     l1401:
  6104  00172A  AC37               	btfss	___ftadd@sign,6,c
  6105  00172C  D00C               	goto	l1402
  6106  00172E  0EFF               	movlw	255
  6107  001730  1A31               	xorwf	___ftadd@f2,f,c
  6108  001732  0EFF               	movlw	255
  6109  001734  1A32               	xorwf	___ftadd@f2+1,f,c
  6110  001736  0EFF               	movlw	255
  6111  001738  1A33               	xorwf	___ftadd@f2+2,f,c
  6112  00173A  0E01               	movlw	1
  6113  00173C  2631               	addwf	___ftadd@f2,f,c
  6114  00173E  0E00               	movlw	0
  6115  001740  2232               	addwfc	___ftadd@f2+1,f,c
  6116  001742  0E00               	movlw	0
  6117  001744  2233               	addwfc	___ftadd@f2+2,f,c
  6118  001746                     l1402:
  6119  001746  0E00               	movlw	0
  6120  001748  6E37               	movwf	___ftadd@sign,c
  6121  00174A  502E               	movf	___ftadd@f1,w,c
  6122  00174C  2631               	addwf	___ftadd@f2,f,c
  6123  00174E  502F               	movf	___ftadd@f1+1,w,c
  6124  001750  2232               	addwfc	___ftadd@f2+1,f,c
  6125  001752  5030               	movf	___ftadd@f1+2,w,c
  6126  001754  2233               	addwfc	___ftadd@f2+2,f,c
  6127  001756  AE33               	btfss	___ftadd@f2+2,7,c
  6128  001758  D00E               	goto	l1403
  6129  00175A  0EFF               	movlw	255
  6130  00175C  1A31               	xorwf	___ftadd@f2,f,c
  6131  00175E  0EFF               	movlw	255
  6132  001760  1A32               	xorwf	___ftadd@f2+1,f,c
  6133  001762  0EFF               	movlw	255
  6134  001764  1A33               	xorwf	___ftadd@f2+2,f,c
  6135  001766  0E01               	movlw	1
  6136  001768  2631               	addwf	___ftadd@f2,f,c
  6137  00176A  0E00               	movlw	0
  6138  00176C  2232               	addwfc	___ftadd@f2+1,f,c
  6139  00176E  0E00               	movlw	0
  6140  001770  2233               	addwfc	___ftadd@f2+2,f,c
  6141  001772  0E01               	movlw	1
  6142  001774  6E37               	movwf	___ftadd@sign,c
  6143  001776                     l1403:
  6144  001776  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  6145  00177A  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  6146  00177E  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  6147  001782  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  6148  001786  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  6149  00178A  EC43  F010         	call	___ftpack	;wreg free
  6150  00178E  C001  F02E         	movff	?___ftpack,?___ftadd
  6151  001792  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  6152  001796  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  6153  00179A  0012               	return	
  6154  00179C                     __end_of___ftadd:
  6155                           	opt stack 0
  6156                           tblptru	equ	0xFF8
  6157                           tblptrh	equ	0xFF7
  6158                           tblptrl	equ	0xFF6
  6159                           tablat	equ	0xFF5
  6160                           prodh	equ	0xFF4
  6161                           prodl	equ	0xFF3
  6162                           indf0	equ	0xFEF
  6163                           postinc0	equ	0xFEE
  6164                           fsr0h	equ	0xFEA
  6165                           fsr0l	equ	0xFE9
  6166                           wreg	equ	0xFE8
  6167                           indf1	equ	0xFE7
  6168                           postdec1	equ	0xFE5
  6169                           fsr1h	equ	0xFE2
  6170                           fsr1l	equ	0xFE1
  6171                           indf2	equ	0xFDF
  6172                           postinc2	equ	0xFDE
  6173                           postdec2	equ	0xFDD
  6174                           fsr2h	equ	0xFDA
  6175                           fsr2l	equ	0xFD9
  6176                           status	equ	0xFD8
  6177                           
  6178 ;; *************** function ___ftneg *****************
  6179 ;; Defined at:
  6180 ;;		line 15 in file "/opt/microchip/xc8/v1.44/sources/common/ftneg.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;  f1              3    0[COMRAM] float 
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;		None
  6185 ;; Return value:  Size  Location     Type
  6186 ;;                  3    0[COMRAM] float 
  6187 ;; Registers used:
  6188 ;;		wreg, status,2, status,0
  6189 ;; Tracked objects:
  6190 ;;		On entry : 0/0
  6191 ;;		On exit  : 0/0
  6192 ;;		Unchanged: 0/0
  6193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6194 ;;      Params:         3       0       0       0       0       0       0
  6195 ;;      Locals:         0       0       0       0       0       0       0
  6196 ;;      Temps:          0       0       0       0       0       0       0
  6197 ;;      Totals:         3       0       0       0       0       0       0
  6198 ;;Total ram usage:        3 bytes
  6199 ;; Hardware stack levels used:    1
  6200 ;; This function calls:
  6201 ;;		Nothing
  6202 ;; This function is called by:
  6203 ;;		_sprintf
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           	psect	text22
  6208  002B82                     __ptext22:
  6209                           	opt stack 0
  6210  002B82                     ___ftneg:
  6211                           	opt stack 27
  6212                           
  6213                           ;incstack = 0
  6214  002B82  5001               	movf	___ftneg@f1,w,c
  6215  002B84  1002               	iorwf	___ftneg@f1+1,w,c
  6216  002B86  1003               	iorwf	___ftneg@f1+2,w,c
  6217  002B88  B4D8               	btfsc	status,2,c
  6218  002B8A  D006               	goto	l1451
  6219  002B8C  0E00               	movlw	0
  6220  002B8E  1A01               	xorwf	___ftneg@f1,f,c
  6221  002B90  0E00               	movlw	0
  6222  002B92  1A02               	xorwf	___ftneg@f1+1,f,c
  6223  002B94  0E80               	movlw	128
  6224  002B96  1A03               	xorwf	___ftneg@f1+2,f,c
  6225  002B98                     l1451:
  6226  002B98  C001  F001         	movff	___ftneg@f1,?___ftneg
  6227  002B9C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  6228  002BA0  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  6229  002BA4  0012               	return		;funcret
  6230  002BA6                     __end_of___ftneg:
  6231                           	opt stack 0
  6232                           tblptru	equ	0xFF8
  6233                           tblptrh	equ	0xFF7
  6234                           tblptrl	equ	0xFF6
  6235                           tablat	equ	0xFF5
  6236                           prodh	equ	0xFF4
  6237                           prodl	equ	0xFF3
  6238                           indf0	equ	0xFEF
  6239                           postinc0	equ	0xFEE
  6240                           fsr0h	equ	0xFEA
  6241                           fsr0l	equ	0xFE9
  6242                           wreg	equ	0xFE8
  6243                           indf1	equ	0xFE7
  6244                           postdec1	equ	0xFE5
  6245                           fsr1h	equ	0xFE2
  6246                           fsr1l	equ	0xFE1
  6247                           indf2	equ	0xFDF
  6248                           postinc2	equ	0xFDE
  6249                           postdec2	equ	0xFDD
  6250                           fsr2h	equ	0xFDA
  6251                           fsr2l	equ	0xFD9
  6252                           status	equ	0xFD8
  6253                           
  6254 ;; *************** function ___ftge *****************
  6255 ;; Defined at:
  6256 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/ftge.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;  ff1             3    0[COMRAM] float 
  6259 ;;  ff2             3    3[COMRAM] float 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;		None               void
  6264 ;; Registers used:
  6265 ;;		wreg, status,2, status,0
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6271 ;;      Params:         6       0       0       0       0       0       0
  6272 ;;      Locals:         0       0       0       0       0       0       0
  6273 ;;      Temps:          3       0       0       0       0       0       0
  6274 ;;      Totals:         9       0       0       0       0       0       0
  6275 ;;Total ram usage:        9 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; This function calls:
  6278 ;;		Nothing
  6279 ;; This function is called by:
  6280 ;;		_main
  6281 ;;		_sprintf
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           	psect	text23
  6286  0021D8                     __ptext23:
  6287                           	opt stack 0
  6288  0021D8                     ___ftge:
  6289                           	opt stack 27
  6290                           
  6291                           ;incstack = 0
  6292  0021D8  AE03               	btfss	___ftge@ff1+2,7,c
  6293  0021DA  D016               	goto	l1433
  6294  0021DC  C001  F007         	movff	___ftge@ff1,??___ftge
  6295  0021E0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  6296  0021E4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  6297  0021E8  1E07               	comf	??___ftge,f,c
  6298  0021EA  1E08               	comf	??___ftge+1,f,c
  6299  0021EC  1E09               	comf	??___ftge+2,f,c
  6300  0021EE  2A07               	incf	??___ftge,f,c
  6301  0021F0  0E00               	movlw	0
  6302  0021F2  2208               	addwfc	??___ftge+1,f,c
  6303  0021F4  2209               	addwfc	??___ftge+2,f,c
  6304  0021F6  0E00               	movlw	0
  6305  0021F8  2407               	addwf	??___ftge,w,c
  6306  0021FA  6E01               	movwf	___ftge@ff1,c
  6307  0021FC  0E00               	movlw	0
  6308  0021FE  2008               	addwfc	??___ftge+1,w,c
  6309  002200  6E02               	movwf	___ftge@ff1+1,c
  6310  002202  0E80               	movlw	128
  6311  002204  2009               	addwfc	??___ftge+2,w,c
  6312  002206  6E03               	movwf	___ftge@ff1+2,c
  6313  002208                     l1433:
  6314  002208  AE06               	btfss	___ftge@ff2+2,7,c
  6315  00220A  D016               	goto	l1434
  6316  00220C  C004  F007         	movff	___ftge@ff2,??___ftge
  6317  002210  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  6318  002214  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  6319  002218  1E07               	comf	??___ftge,f,c
  6320  00221A  1E08               	comf	??___ftge+1,f,c
  6321  00221C  1E09               	comf	??___ftge+2,f,c
  6322  00221E  2A07               	incf	??___ftge,f,c
  6323  002220  0E00               	movlw	0
  6324  002222  2208               	addwfc	??___ftge+1,f,c
  6325  002224  2209               	addwfc	??___ftge+2,f,c
  6326  002226  0E00               	movlw	0
  6327  002228  2407               	addwf	??___ftge,w,c
  6328  00222A  6E04               	movwf	___ftge@ff2,c
  6329  00222C  0E00               	movlw	0
  6330  00222E  2008               	addwfc	??___ftge+1,w,c
  6331  002230  6E05               	movwf	___ftge@ff2+1,c
  6332  002232  0E80               	movlw	128
  6333  002234  2009               	addwfc	??___ftge+2,w,c
  6334  002236  6E06               	movwf	___ftge@ff2+2,c
  6335  002238                     l1434:
  6336  002238  0E00               	movlw	0
  6337  00223A  1A01               	xorwf	___ftge@ff1,f,c
  6338  00223C  0E00               	movlw	0
  6339  00223E  1A02               	xorwf	___ftge@ff1+1,f,c
  6340  002240  0E80               	movlw	128
  6341  002242  1A03               	xorwf	___ftge@ff1+2,f,c
  6342  002244  0E00               	movlw	0
  6343  002246  1A04               	xorwf	___ftge@ff2,f,c
  6344  002248  0E00               	movlw	0
  6345  00224A  1A05               	xorwf	___ftge@ff2+1,f,c
  6346  00224C  0E80               	movlw	128
  6347  00224E  1A06               	xorwf	___ftge@ff2+2,f,c
  6348  002250  5004               	movf	___ftge@ff2,w,c
  6349  002252  5C01               	subwf	___ftge@ff1,w,c
  6350  002254  5005               	movf	___ftge@ff2+1,w,c
  6351  002256  5802               	subwfb	___ftge@ff1+1,w,c
  6352  002258  5006               	movf	___ftge@ff2+2,w,c
  6353  00225A  5803               	subwfb	___ftge@ff1+2,w,c
  6354  00225C  B0D8               	btfsc	status,0,c
  6355  00225E  D002               	goto	l3613
  6356  002260  90D8               	bcf	status,0,c
  6357  002262  0012               	return	
  6358  002264                     l3613:
  6359  002264  80D8               	bsf	status,0,c
  6360  002266  0012               	return	
  6361  002268                     __end_of___ftge:
  6362                           	opt stack 0
  6363                           tblptru	equ	0xFF8
  6364                           tblptrh	equ	0xFF7
  6365                           tblptrl	equ	0xFF6
  6366                           tablat	equ	0xFF5
  6367                           prodh	equ	0xFF4
  6368                           prodl	equ	0xFF3
  6369                           indf0	equ	0xFEF
  6370                           postinc0	equ	0xFEE
  6371                           fsr0h	equ	0xFEA
  6372                           fsr0l	equ	0xFE9
  6373                           wreg	equ	0xFE8
  6374                           indf1	equ	0xFE7
  6375                           postdec1	equ	0xFE5
  6376                           fsr1h	equ	0xFE2
  6377                           fsr1l	equ	0xFE1
  6378                           indf2	equ	0xFDF
  6379                           postinc2	equ	0xFDE
  6380                           postdec2	equ	0xFDD
  6381                           fsr2h	equ	0xFDA
  6382                           fsr2l	equ	0xFD9
  6383                           status	equ	0xFD8
  6384                           
  6385 ;; *************** function _putsXLCD *****************
  6386 ;; Defined at:
  6387 ;;		line 16 in file "putsxlcd.c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;  buffer          2    1[COMRAM] PTR unsigned char 
  6390 ;;		 -> STR_10(12), main@str_tmp(10), STR_7(5), STR_6(4), 
  6391 ;;		 -> STR_5(14), STR_4(4), STR_3(10), print_data@str_temp2(3), 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  1    wreg      void 
  6396 ;; Registers used:
  6397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6403 ;;      Params:         2       0       0       0       0       0       0
  6404 ;;      Locals:         0       0       0       0       0       0       0
  6405 ;;      Temps:          0       0       0       0       0       0       0
  6406 ;;      Totals:         2       0       0       0       0       0       0
  6407 ;;Total ram usage:        2 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    2
  6410 ;; This function calls:
  6411 ;;		_BusyXLCD
  6412 ;;		_WriteDataXLCD
  6413 ;; This function is called by:
  6414 ;;		_print_data
  6415 ;;		_test_readwrite
  6416 ;;		_main
  6417 ;;		_print_all_data
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text24
  6422  00271A                     __ptext24:
  6423                           	opt stack 0
  6424  00271A                     _putsXLCD:
  6425                           	opt stack 27
  6426                           
  6427                           ;putsxlcd.c: 18: while(*buffer)
  6428                           
  6429                           ;incstack = 0
  6430  00271A  D019               	goto	l306
  6431  00271C                     
  6432                           ;putsxlcd.c: 19: {
  6433                           ;putsxlcd.c: 20: while(BusyXLCD());
  6434  00271C  ECF9  F014         	call	_BusyXLCD	;wreg free
  6435  002720  0900               	iorlw	0
  6436  002722  A4D8               	btfss	status,2,c
  6437  002724  D7FB               	goto	l307
  6438                           
  6439                           ;putsxlcd.c: 21: WriteDataXLCD(*buffer);
  6440  002726  C002  FFF6         	movff	putsXLCD@buffer,tblptrl
  6441  00272A  C003  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  6442  00272E  6AF8               	clrf	tblptru,c
  6443  002730  0E05               	movlw	(high __ramtop+-1)
  6444  002732  64F7               	cpfsgt	tblptrh,c
  6445  002734  D003               	bra	u5347
  6446  002736  0008               	tblrd		*
  6447  002738  50F5               	movf	tablat,w,c
  6448  00273A  D005               	bra	u5340
  6449  00273C                     u5347:
  6450  00273C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6451  002740  CFF7 FFEA          	movff	tblptrh,fsr0h
  6452  002744  50EF               	movf	indf0,w,c
  6453  002746                     u5340:
  6454  002746  ECBB  F014         	call	_WriteDataXLCD
  6455                           
  6456                           ;putsxlcd.c: 22: buffer++;
  6457  00274A  4A02               	infsnz	putsXLCD@buffer,f,c
  6458  00274C  2A03               	incf	putsXLCD@buffer+1,f,c
  6459  00274E                     l306:
  6460  00274E  C002  FFF6         	movff	putsXLCD@buffer,tblptrl
  6461  002752  C003  FFF7         	movff	putsXLCD@buffer+1,tblptrh
  6462  002756  6AF8               	clrf	tblptru,c
  6463  002758  0E05               	movlw	(high __ramtop+-1)
  6464  00275A  64F7               	cpfsgt	tblptrh,c
  6465  00275C  D003               	bra	u5357
  6466  00275E  0008               	tblrd		*
  6467  002760  50F5               	movf	tablat,w,c
  6468  002762  D005               	bra	u5350
  6469  002764                     u5357:
  6470  002764  CFF6 FFE9          	movff	tblptrl,fsr0l
  6471  002768  CFF7 FFEA          	movff	tblptrh,fsr0h
  6472  00276C  50EF               	movf	indf0,w,c
  6473  00276E                     u5350:
  6474  00276E  0900               	iorlw	0
  6475  002770  B4D8               	btfsc	status,2,c
  6476  002772  0012               	return	
  6477  002774  D7D3               	goto	l307
  6478  002776                     __end_of_putsXLCD:
  6479                           	opt stack 0
  6480                           tblptru	equ	0xFF8
  6481                           tblptrh	equ	0xFF7
  6482                           tblptrl	equ	0xFF6
  6483                           tablat	equ	0xFF5
  6484                           prodh	equ	0xFF4
  6485                           prodl	equ	0xFF3
  6486                           indf0	equ	0xFEF
  6487                           postinc0	equ	0xFEE
  6488                           fsr0h	equ	0xFEA
  6489                           fsr0l	equ	0xFE9
  6490                           wreg	equ	0xFE8
  6491                           indf1	equ	0xFE7
  6492                           postdec1	equ	0xFE5
  6493                           fsr1h	equ	0xFE2
  6494                           fsr1l	equ	0xFE1
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _WriteDataXLCD *****************
  6503 ;; Defined at:
  6504 ;;		line 17 in file "writdata.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  data            1    wreg     unsigned char 
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;  data            1    0[COMRAM] unsigned char 
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  1    wreg      void 
  6511 ;; Registers used:
  6512 ;;		wreg, status,2, status,0, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6518 ;;      Params:         0       0       0       0       0       0       0
  6519 ;;      Locals:         1       0       0       0       0       0       0
  6520 ;;      Temps:          0       0       0       0       0       0       0
  6521 ;;      Totals:         1       0       0       0       0       0       0
  6522 ;;Total ram usage:        1 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    1
  6525 ;; This function calls:
  6526 ;;		_DelayFor18TCY
  6527 ;; This function is called by:
  6528 ;;		_putsXLCD
  6529 ;;		_putrsXLCD
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text25
  6534  002976                     __ptext25:
  6535                           	opt stack 0
  6536  002976                     _WriteDataXLCD:
  6537                           	opt stack 27
  6538                           
  6539                           ;incstack = 0
  6540                           ;WriteDataXLCD@data stored from wreg
  6541  002976  6E01               	movwf	WriteDataXLCD@data,c
  6542                           
  6543                           ;writdata.c: 36: TRISB &= 0xf0;
  6544  002978  0EF0               	movlw	240
  6545  00297A  1693               	andwf	3987,f,c	;volatile
  6546                           
  6547                           ;writdata.c: 37: PORTB &= 0xf0;
  6548  00297C  0EF0               	movlw	240
  6549  00297E  1681               	andwf	3969,f,c	;volatile
  6550                           
  6551                           ;writdata.c: 38: PORTB |= ((data>>4)&0x0f);
  6552  002980  3801               	swapf	WriteDataXLCD@data,w,c
  6553  002982  0B0F               	andlw	15
  6554  002984  0B0F               	andlw	15
  6555  002986  1281               	iorwf	3969,f,c	;volatile
  6556                           
  6557                           ;writdata.c: 40: LATAbits.LATA3 = 1;
  6558  002988  8689               	bsf	3977,3,c	;volatile
  6559                           
  6560                           ;writdata.c: 41: LATAbits.LATA2 = 0;
  6561  00298A  9489               	bcf	3977,2,c	;volatile
  6562                           
  6563                           ;writdata.c: 42: DelayFor18TCY();
  6564  00298C  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  6565                           
  6566                           ;writdata.c: 43: LATAbits.LATA1 = 1;
  6567  002990  8289               	bsf	3977,1,c	;volatile
  6568                           
  6569                           ;writdata.c: 44: DelayFor18TCY();
  6570  002992  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  6571                           
  6572                           ;writdata.c: 45: LATAbits.LATA1 = 0;
  6573  002996  9289               	bcf	3977,1,c	;volatile
  6574                           
  6575                           ;writdata.c: 50: PORTB &= 0xf0;
  6576  002998  0EF0               	movlw	240
  6577  00299A  1681               	andwf	3969,f,c	;volatile
  6578                           
  6579                           ;writdata.c: 51: PORTB |= (data&0x0f);
  6580  00299C  5001               	movf	WriteDataXLCD@data,w,c
  6581  00299E  0B0F               	andlw	15
  6582  0029A0  1281               	iorwf	3969,f,c	;volatile
  6583                           
  6584                           ;writdata.c: 53: DelayFor18TCY();
  6585  0029A2  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  6586                           
  6587                           ;writdata.c: 54: LATAbits.LATA1 = 1;
  6588  0029A6  8289               	bsf	3977,1,c	;volatile
  6589                           
  6590                           ;writdata.c: 55: DelayFor18TCY();
  6591  0029A8  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  6592                           
  6593                           ;writdata.c: 56: LATAbits.LATA1 = 0;
  6594  0029AC  9289               	bcf	3977,1,c	;volatile
  6595                           
  6596                           ;writdata.c: 60: TRISB |= 0x0f;
  6597  0029AE  0E0F               	movlw	15
  6598  0029B0  1293               	iorwf	3987,f,c	;volatile
  6599  0029B2  0012               	return	
  6600  0029B4                     __end_of_WriteDataXLCD:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           indf0	equ	0xFEF
  6609                           postinc0	equ	0xFEE
  6610                           fsr0h	equ	0xFEA
  6611                           fsr0l	equ	0xFE9
  6612                           wreg	equ	0xFE8
  6613                           indf1	equ	0xFE7
  6614                           postdec1	equ	0xFE5
  6615                           fsr1h	equ	0xFE2
  6616                           fsr1l	equ	0xFE1
  6617                           indf2	equ	0xFDF
  6618                           postinc2	equ	0xFDE
  6619                           postdec2	equ	0xFDD
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8
  6623                           
  6624 ;; *************** function _initXLCD *****************
  6625 ;; Defined at:
  6626 ;;		line 111 in file "main.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;		None
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      void 
  6633 ;; Registers used:
  6634 ;;		wreg, status,2, status,0, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6640 ;;      Params:         0       0       0       0       0       0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0
  6642 ;;      Temps:          0       0       0       0       0       0       0
  6643 ;;      Totals:         0       0       0       0       0       0       0
  6644 ;;Total ram usage:        0 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    3
  6647 ;; This function calls:
  6648 ;;		_BusyXLCD
  6649 ;;		_OpenXLCD
  6650 ;;		_WriteCmdXLCD
  6651 ;; This function is called by:
  6652 ;;		_print_data
  6653 ;;		_test_readwrite
  6654 ;;		_main
  6655 ;;		_print_all_data
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text26
  6660  002BC4                     __ptext26:
  6661                           	opt stack 0
  6662  002BC4                     _initXLCD:
  6663                           	opt stack 25
  6664                           
  6665                           ;main.c: 113: OpenXLCD( 0b00101100 & 0b00111000 );
  6666                           
  6667                           ;incstack = 0
  6668  002BC4  0E28               	movlw	40
  6669  002BC6  EC9A  F010         	call	_OpenXLCD
  6670  002BCA  ECF9  F014         	call	_BusyXLCD	;wreg free
  6671  002BCE  0900               	iorlw	0
  6672  002BD0  A4D8               	btfss	status,2,c
  6673  002BD2  D7FB               	goto	l154
  6674                           
  6675                           ;main.c: 115: WriteCmdXLCD(0x06);
  6676  002BD4  0E06               	movlw	6
  6677  002BD6  ECDA  F014         	call	_WriteCmdXLCD
  6678                           
  6679                           ;main.c: 116: WriteCmdXLCD(0x0C);
  6680  002BDA  0E0C               	movlw	12
  6681  002BDC  ECDA  F014         	call	_WriteCmdXLCD
  6682  002BE0  0012               	return		;funcret
  6683  002BE2                     __end_of_initXLCD:
  6684                           	opt stack 0
  6685                           tblptru	equ	0xFF8
  6686                           tblptrh	equ	0xFF7
  6687                           tblptrl	equ	0xFF6
  6688                           tablat	equ	0xFF5
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           indf0	equ	0xFEF
  6692                           postinc0	equ	0xFEE
  6693                           fsr0h	equ	0xFEA
  6694                           fsr0l	equ	0xFE9
  6695                           wreg	equ	0xFE8
  6696                           indf1	equ	0xFE7
  6697                           postdec1	equ	0xFE5
  6698                           fsr1h	equ	0xFE2
  6699                           fsr1l	equ	0xFE1
  6700                           indf2	equ	0xFDF
  6701                           postinc2	equ	0xFDE
  6702                           postdec2	equ	0xFDD
  6703                           fsr2h	equ	0xFDA
  6704                           fsr2l	equ	0xFD9
  6705                           status	equ	0xFD8
  6706                           
  6707 ;; *************** function _OpenXLCD *****************
  6708 ;; Defined at:
  6709 ;;		line 20 in file "openxlcd.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;  lcdtype         1    wreg     unsigned char 
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;  lcdtype         1    4[COMRAM] unsigned char 
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0, cstack
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6723 ;;      Params:         0       0       0       0       0       0       0
  6724 ;;      Locals:         1       0       0       0       0       0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0
  6726 ;;      Totals:         1       0       0       0       0       0       0
  6727 ;;Total ram usage:        1 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    2
  6730 ;; This function calls:
  6731 ;;		_BusyXLCD
  6732 ;;		_Delay10KTCYx
  6733 ;;		_DelayPORXLCD
  6734 ;;		_SetDDRamAddr
  6735 ;;		_WriteCmdXLCD
  6736 ;; This function is called by:
  6737 ;;		_initXLCD
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           	psect	text27
  6742  002134                     __ptext27:
  6743                           	opt stack 0
  6744  002134                     _OpenXLCD:
  6745                           	opt stack 25
  6746                           
  6747                           ;incstack = 0
  6748                           ;OpenXLCD@lcdtype stored from wreg
  6749  002134  6E05               	movwf	OpenXLCD@lcdtype,c
  6750                           
  6751                           ;openxlcd.c: 32: PORTB &= 0xf0;
  6752  002136  0EF0               	movlw	240
  6753  002138  1681               	andwf	3969,f,c	;volatile
  6754                           
  6755                           ;openxlcd.c: 33: TRISB &= 0xF0;
  6756  00213A  0EF0               	movlw	240
  6757  00213C  1693               	andwf	3987,f,c	;volatile
  6758                           
  6759                           ;openxlcd.c: 36: TRISAbits.TRISA2 = 0;
  6760  00213E  9492               	bcf	3986,2,c	;volatile
  6761                           
  6762                           ;openxlcd.c: 37: TRISAbits.TRISA3 = 0;
  6763  002140  9692               	bcf	3986,3,c	;volatile
  6764                           
  6765                           ;openxlcd.c: 38: TRISAbits.TRISA1 = 0;
  6766  002142  9292               	bcf	3986,1,c	;volatile
  6767                           
  6768                           ;openxlcd.c: 39: LATAbits.LATA2 = 0;
  6769  002144  9489               	bcf	3977,2,c	;volatile
  6770                           
  6771                           ;openxlcd.c: 40: LATAbits.LATA3 = 0;
  6772  002146  9689               	bcf	3977,3,c	;volatile
  6773                           
  6774                           ;openxlcd.c: 41: LATAbits.LATA1 = 0;
  6775  002148  9289               	bcf	3977,1,c	;volatile
  6776                           
  6777                           ;openxlcd.c: 44: DelayPORXLCD();
  6778  00214A  EC34  F016         	call	_DelayPORXLCD	;wreg free
  6779                           
  6780                           ;openxlcd.c: 46: WriteCmdXLCD(0x30);
  6781  00214E  0E30               	movlw	48
  6782  002150  ECDA  F014         	call	_WriteCmdXLCD
  6783                           
  6784                           ;openxlcd.c: 47: Delay10KTCYx(0x05);
  6785  002154  0E05               	movlw	5
  6786  002156  EC0E  F016         	call	_Delay10KTCYx
  6787                           
  6788                           ;openxlcd.c: 49: WriteCmdXLCD(0x30);
  6789  00215A  0E30               	movlw	48
  6790  00215C  ECDA  F014         	call	_WriteCmdXLCD
  6791                           
  6792                           ;openxlcd.c: 50: Delay10KTCYx(0x01);
  6793  002160  0E01               	movlw	1
  6794  002162  EC0E  F016         	call	_Delay10KTCYx
  6795                           
  6796                           ;openxlcd.c: 53: WriteCmdXLCD(0x32);
  6797  002166  0E32               	movlw	50
  6798  002168  ECDA  F014         	call	_WriteCmdXLCD
  6799  00216C  ECF9  F014         	call	_BusyXLCD	;wreg free
  6800  002170  0900               	iorlw	0
  6801  002172  A4D8               	btfss	status,2,c
  6802  002174  D7FB               	goto	l266
  6803  002176                     u4200:
  6804                           
  6805                           ;openxlcd.c: 59: while(BusyXLCD());
  6806  002176  ECF9  F014         	call	_BusyXLCD	;wreg free
  6807  00217A  0900               	iorlw	0
  6808  00217C  A4D8               	btfss	status,2,c
  6809  00217E  D7FB               	goto	u4200
  6810                           
  6811                           ;openxlcd.c: 60: WriteCmdXLCD(lcdtype);
  6812  002180  5005               	movf	OpenXLCD@lcdtype,w,c
  6813  002182  ECDA  F014         	call	_WriteCmdXLCD
  6814  002186  ECF9  F014         	call	_BusyXLCD	;wreg free
  6815  00218A  0900               	iorlw	0
  6816  00218C  A4D8               	btfss	status,2,c
  6817  00218E  D7FB               	goto	l272
  6818                           
  6819                           ;openxlcd.c: 64: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  6820  002190  0E08               	movlw	8
  6821  002192  ECDA  F014         	call	_WriteCmdXLCD
  6822  002196  ECF9  F014         	call	_BusyXLCD	;wreg free
  6823  00219A  0900               	iorlw	0
  6824  00219C  A4D8               	btfss	status,2,c
  6825  00219E  D7FB               	goto	l275
  6826                           
  6827                           ;openxlcd.c: 66: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  6828  0021A0  0E0F               	movlw	15
  6829  0021A2  ECDA  F014         	call	_WriteCmdXLCD
  6830  0021A6  ECF9  F014         	call	_BusyXLCD	;wreg free
  6831  0021AA  0900               	iorlw	0
  6832  0021AC  A4D8               	btfss	status,2,c
  6833  0021AE  D7FB               	goto	l278
  6834                           
  6835                           ;openxlcd.c: 70: WriteCmdXLCD(0x01);
  6836  0021B0  0E01               	movlw	1
  6837  0021B2  ECDA  F014         	call	_WriteCmdXLCD
  6838  0021B6  ECF9  F014         	call	_BusyXLCD	;wreg free
  6839  0021BA  0900               	iorlw	0
  6840  0021BC  A4D8               	btfss	status,2,c
  6841  0021BE  D7FB               	goto	l281
  6842                           
  6843                           ;openxlcd.c: 74: WriteCmdXLCD(0b00000100);
  6844  0021C0  0E04               	movlw	4
  6845  0021C2  ECDA  F014         	call	_WriteCmdXLCD
  6846  0021C6  ECF9  F014         	call	_BusyXLCD	;wreg free
  6847  0021CA  0900               	iorlw	0
  6848  0021CC  A4D8               	btfss	status,2,c
  6849  0021CE  D7FB               	goto	l284
  6850                           
  6851                           ;openxlcd.c: 78: SetDDRamAddr(0x80);
  6852  0021D0  0E80               	movlw	128
  6853  0021D2  ECBB  F013         	call	_SetDDRamAddr
  6854  0021D6  0012               	return	
  6855  0021D8                     __end_of_OpenXLCD:
  6856                           	opt stack 0
  6857                           tblptru	equ	0xFF8
  6858                           tblptrh	equ	0xFF7
  6859                           tblptrl	equ	0xFF6
  6860                           tablat	equ	0xFF5
  6861                           prodh	equ	0xFF4
  6862                           prodl	equ	0xFF3
  6863                           indf0	equ	0xFEF
  6864                           postinc0	equ	0xFEE
  6865                           fsr0h	equ	0xFEA
  6866                           fsr0l	equ	0xFE9
  6867                           wreg	equ	0xFE8
  6868                           indf1	equ	0xFE7
  6869                           postdec1	equ	0xFE5
  6870                           fsr1h	equ	0xFE2
  6871                           fsr1l	equ	0xFE1
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function _WriteCmdXLCD *****************
  6880 ;; Defined at:
  6881 ;;		line 14 in file "wcmdxlcd.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;  cmd             1    wreg     unsigned char 
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;  cmd             1    0[COMRAM] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      void 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6895 ;;      Params:         0       0       0       0       0       0       0
  6896 ;;      Locals:         1       0       0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0
  6898 ;;      Totals:         1       0       0       0       0       0       0
  6899 ;;Total ram usage:        1 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    1
  6902 ;; This function calls:
  6903 ;;		_DelayFor18TCY
  6904 ;; This function is called by:
  6905 ;;		_initXLCD
  6906 ;;		_OpenXLCD
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text28
  6911  0029B4                     __ptext28:
  6912                           	opt stack 0
  6913  0029B4                     _WriteCmdXLCD:
  6914                           	opt stack 26
  6915                           
  6916                           ;incstack = 0
  6917                           ;WriteCmdXLCD@cmd stored from wreg
  6918  0029B4  6E01               	movwf	WriteCmdXLCD@cmd,c
  6919                           
  6920                           ;wcmdxlcd.c: 33: TRISB &= 0xf0;
  6921  0029B6  0EF0               	movlw	240
  6922  0029B8  1693               	andwf	3987,f,c	;volatile
  6923                           
  6924                           ;wcmdxlcd.c: 34: PORTB &= 0xf0;
  6925  0029BA  0EF0               	movlw	240
  6926  0029BC  1681               	andwf	3969,f,c	;volatile
  6927                           
  6928                           ;wcmdxlcd.c: 35: PORTB |= (cmd>>4)&0x0f;
  6929  0029BE  3801               	swapf	WriteCmdXLCD@cmd,w,c
  6930  0029C0  0B0F               	andlw	15
  6931  0029C2  0B0F               	andlw	15
  6932  0029C4  1281               	iorwf	3969,f,c	;volatile
  6933                           
  6934                           ;wcmdxlcd.c: 37: LATAbits.LATA2 = 0;
  6935  0029C6  9489               	bcf	3977,2,c	;volatile
  6936                           
  6937                           ;wcmdxlcd.c: 38: LATAbits.LATA3 = 0;
  6938  0029C8  9689               	bcf	3977,3,c	;volatile
  6939                           
  6940                           ;wcmdxlcd.c: 39: DelayFor18TCY();
  6941  0029CA  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  6942                           
  6943                           ;wcmdxlcd.c: 40: LATAbits.LATA1 = 1;
  6944  0029CE  8289               	bsf	3977,1,c	;volatile
  6945                           
  6946                           ;wcmdxlcd.c: 41: DelayFor18TCY();
  6947  0029D0  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  6948                           
  6949                           ;wcmdxlcd.c: 42: LATAbits.LATA1 = 0;
  6950  0029D4  9289               	bcf	3977,1,c	;volatile
  6951                           
  6952                           ;wcmdxlcd.c: 47: PORTB &= 0xf0;
  6953  0029D6  0EF0               	movlw	240
  6954  0029D8  1681               	andwf	3969,f,c	;volatile
  6955                           
  6956                           ;wcmdxlcd.c: 48: PORTB |= cmd&0x0f;
  6957  0029DA  5001               	movf	WriteCmdXLCD@cmd,w,c
  6958  0029DC  0B0F               	andlw	15
  6959  0029DE  1281               	iorwf	3969,f,c	;volatile
  6960                           
  6961                           ;wcmdxlcd.c: 50: DelayFor18TCY();
  6962  0029E0  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  6963                           
  6964                           ;wcmdxlcd.c: 51: LATAbits.LATA1 = 1;
  6965  0029E4  8289               	bsf	3977,1,c	;volatile
  6966                           
  6967                           ;wcmdxlcd.c: 52: DelayFor18TCY();
  6968  0029E6  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  6969                           
  6970                           ;wcmdxlcd.c: 53: LATAbits.LATA1 = 0;
  6971  0029EA  9289               	bcf	3977,1,c	;volatile
  6972                           
  6973                           ;wcmdxlcd.c: 57: TRISB |= 0x0f;
  6974  0029EC  0E0F               	movlw	15
  6975  0029EE  1293               	iorwf	3987,f,c	;volatile
  6976  0029F0  0012               	return	
  6977  0029F2                     __end_of_WriteCmdXLCD:
  6978                           	opt stack 0
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           indf0	equ	0xFEF
  6986                           postinc0	equ	0xFEE
  6987                           fsr0h	equ	0xFEA
  6988                           fsr0l	equ	0xFE9
  6989                           wreg	equ	0xFE8
  6990                           indf1	equ	0xFE7
  6991                           postdec1	equ	0xFE5
  6992                           fsr1h	equ	0xFE2
  6993                           fsr1l	equ	0xFE1
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           postdec2	equ	0xFDD
  6997                           fsr2h	equ	0xFDA
  6998                           fsr2l	equ	0xFD9
  6999                           status	equ	0xFD8
  7000                           
  7001 ;; *************** function _SetDDRamAddr *****************
  7002 ;; Defined at:
  7003 ;;		line 14 in file "setddram.c"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;  DDaddr          1    wreg     unsigned char 
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  DDaddr          1    3[COMRAM] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      void 
  7010 ;; Registers used:
  7011 ;;		wreg, status,2, status,0, cstack
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7017 ;;      Params:         0       0       0       0       0       0       0
  7018 ;;      Locals:         1       0       0       0       0       0       0
  7019 ;;      Temps:          3       0       0       0       0       0       0
  7020 ;;      Totals:         4       0       0       0       0       0       0
  7021 ;;Total ram usage:        4 bytes
  7022 ;; Hardware stack levels used:    1
  7023 ;; Hardware stack levels required when called:    1
  7024 ;; This function calls:
  7025 ;;		_DelayFor18TCY
  7026 ;; This function is called by:
  7027 ;;		_OpenXLCD
  7028 ;; This function uses a non-reentrant model
  7029 ;;
  7030                           
  7031                           	psect	text29
  7032  002776                     __ptext29:
  7033                           	opt stack 0
  7034  002776                     _SetDDRamAddr:
  7035                           	opt stack 25
  7036                           
  7037                           ;incstack = 0
  7038                           ;SetDDRamAddr@DDaddr stored from wreg
  7039  002776  6E04               	movwf	SetDDRamAddr@DDaddr,c
  7040                           
  7041                           ;setddram.c: 33: TRISB &= 0xf0;
  7042  002778  0EF0               	movlw	240
  7043  00277A  1693               	andwf	3987,f,c	;volatile
  7044                           
  7045                           ;setddram.c: 34: PORTB &= 0xf0;
  7046  00277C  0EF0               	movlw	240
  7047  00277E  1681               	andwf	3969,f,c	;volatile
  7048                           
  7049                           ;setddram.c: 35: PORTB |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  7050  002780  5004               	movf	SetDDRamAddr@DDaddr,w,c
  7051  002782  6E01               	movwf	??_SetDDRamAddr& (0+255),c
  7052  002784  6A02               	clrf	(??_SetDDRamAddr+1)& (0+255),c
  7053  002786  8E01               	bsf	??_SetDDRamAddr,7,c
  7054  002788  0E04               	movlw	4
  7055  00278A  6E03               	movwf	(??_SetDDRamAddr+2)& (0+255),c
  7056  00278C                     u3665:
  7057  00278C  3402               	rlcf	??_SetDDRamAddr+1,w,c
  7058  00278E  3202               	rrcf	??_SetDDRamAddr+1,f,c
  7059  002790  3201               	rrcf	??_SetDDRamAddr,f,c
  7060  002792  2E03               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,c
  7061  002794  D7FB               	goto	u3665
  7062  002796  5001               	movf	??_SetDDRamAddr,w,c
  7063  002798  0B0F               	andlw	15
  7064  00279A  1281               	iorwf	3969,f,c	;volatile
  7065                           
  7066                           ;setddram.c: 37: LATAbits.LATA2 = 0;
  7067  00279C  9489               	bcf	3977,2,c	;volatile
  7068                           
  7069                           ;setddram.c: 38: LATAbits.LATA3 = 0;
  7070  00279E  9689               	bcf	3977,3,c	;volatile
  7071                           
  7072                           ;setddram.c: 39: DelayFor18TCY();
  7073  0027A0  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7074                           
  7075                           ;setddram.c: 40: LATAbits.LATA1 = 1;
  7076  0027A4  8289               	bsf	3977,1,c	;volatile
  7077                           
  7078                           ;setddram.c: 41: DelayFor18TCY();
  7079  0027A6  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7080                           
  7081                           ;setddram.c: 42: LATAbits.LATA1 = 0;
  7082  0027AA  9289               	bcf	3977,1,c	;volatile
  7083                           
  7084                           ;setddram.c: 47: PORTB &= 0xf0;
  7085  0027AC  0EF0               	movlw	240
  7086  0027AE  1681               	andwf	3969,f,c	;volatile
  7087                           
  7088                           ;setddram.c: 48: PORTB |= (DDaddr&0x0f);
  7089  0027B0  5004               	movf	SetDDRamAddr@DDaddr,w,c
  7090  0027B2  0B0F               	andlw	15
  7091  0027B4  1281               	iorwf	3969,f,c	;volatile
  7092                           
  7093                           ;setddram.c: 50: DelayFor18TCY();
  7094  0027B6  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7095                           
  7096                           ;setddram.c: 51: LATAbits.LATA1 = 1;
  7097  0027BA  8289               	bsf	3977,1,c	;volatile
  7098                           
  7099                           ;setddram.c: 52: DelayFor18TCY();
  7100  0027BC  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7101                           
  7102                           ;setddram.c: 53: LATAbits.LATA1 = 0;
  7103  0027C0  9289               	bcf	3977,1,c	;volatile
  7104                           
  7105                           ;setddram.c: 57: TRISB |= 0x0f;
  7106  0027C2  0E0F               	movlw	15
  7107  0027C4  1293               	iorwf	3987,f,c	;volatile
  7108  0027C6  0012               	return	
  7109  0027C8                     __end_of_SetDDRamAddr:
  7110                           	opt stack 0
  7111                           tblptru	equ	0xFF8
  7112                           tblptrh	equ	0xFF7
  7113                           tblptrl	equ	0xFF6
  7114                           tablat	equ	0xFF5
  7115                           prodh	equ	0xFF4
  7116                           prodl	equ	0xFF3
  7117                           indf0	equ	0xFEF
  7118                           postinc0	equ	0xFEE
  7119                           fsr0h	equ	0xFEA
  7120                           fsr0l	equ	0xFE9
  7121                           wreg	equ	0xFE8
  7122                           indf1	equ	0xFE7
  7123                           postdec1	equ	0xFE5
  7124                           fsr1h	equ	0xFE2
  7125                           fsr1l	equ	0xFE1
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _DelayPORXLCD *****************
  7134 ;; Defined at:
  7135 ;;		line 101 in file "main.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;		None
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;		None
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  1    wreg      void 
  7142 ;; Registers used:
  7143 ;;		wreg
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7149 ;;      Params:         0       0       0       0       0       0       0
  7150 ;;      Locals:         0       0       0       0       0       0       0
  7151 ;;      Temps:          1       0       0       0       0       0       0
  7152 ;;      Totals:         1       0       0       0       0       0       0
  7153 ;;Total ram usage:        1 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; This function calls:
  7156 ;;		Nothing
  7157 ;; This function is called by:
  7158 ;;		_OpenXLCD
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           	psect	text30
  7163  002C68                     __ptext30:
  7164                           	opt stack 0
  7165  002C68                     _DelayPORXLCD:
  7166                           	opt stack 26
  7167                           
  7168                           ;main.c: 103: _delay((unsigned long)((15)*(4000000/4000.0)));
  7169                           
  7170                           ;incstack = 0
  7171  002C68  0E14               	movlw	20
  7172  002C6A  6E01               	movwf	??_DelayPORXLCD& (0+255),c
  7173  002C6C  0E7A               	movlw	122
  7174  002C6E                     u6947:
  7175  002C6E  2EE8               	decfsz	wreg,f,c
  7176  002C70  D7FE               	bra	u6947
  7177  002C72  2E01               	decfsz	??_DelayPORXLCD& (0+255),f,c
  7178  002C74  D7FC               	bra	u6947
  7179  002C76  0012               	return		;funcret
  7180  002C78                     __end_of_DelayPORXLCD:
  7181                           	opt stack 0
  7182                           tblptru	equ	0xFF8
  7183                           tblptrh	equ	0xFF7
  7184                           tblptrl	equ	0xFF6
  7185                           tablat	equ	0xFF5
  7186                           prodh	equ	0xFF4
  7187                           prodl	equ	0xFF3
  7188                           indf0	equ	0xFEF
  7189                           postinc0	equ	0xFEE
  7190                           fsr0h	equ	0xFEA
  7191                           fsr0l	equ	0xFE9
  7192                           wreg	equ	0xFE8
  7193                           indf1	equ	0xFE7
  7194                           postdec1	equ	0xFE5
  7195                           fsr1h	equ	0xFE2
  7196                           fsr1l	equ	0xFE1
  7197                           indf2	equ	0xFDF
  7198                           postinc2	equ	0xFDE
  7199                           postdec2	equ	0xFDD
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           
  7204 ;; *************** function _Delay10KTCYx *****************
  7205 ;; Defined at:
  7206 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/pic18/d10ktcyx.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;  unit            1    wreg     unsigned char 
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  unit            1    1[COMRAM] unsigned char 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  1    wreg      void 
  7213 ;; Registers used:
  7214 ;;		wreg
  7215 ;; Tracked objects:
  7216 ;;		On entry : 0/0
  7217 ;;		On exit  : 0/0
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7220 ;;      Params:         0       0       0       0       0       0       0
  7221 ;;      Locals:         1       0       0       0       0       0       0
  7222 ;;      Temps:          1       0       0       0       0       0       0
  7223 ;;      Totals:         2       0       0       0       0       0       0
  7224 ;;Total ram usage:        2 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; This function calls:
  7227 ;;		Nothing
  7228 ;; This function is called by:
  7229 ;;		_OpenXLCD
  7230 ;; This function uses a non-reentrant model
  7231 ;;
  7232                           
  7233                           	psect	text31
  7234  002C1C                     __ptext31:
  7235                           	opt stack 0
  7236  002C1C                     _Delay10KTCYx:
  7237                           	opt stack 26
  7238                           
  7239                           ;incstack = 0
  7240                           ;Delay10KTCYx@unit stored from wreg
  7241  002C1C  6E02               	movwf	Delay10KTCYx@unit,c
  7242  002C1E                     l1307:
  7243  002C1E  0E0D               	movlw	13
  7244  002C20  6E01               	movwf	??_Delay10KTCYx& (0+255),c
  7245  002C22  0EFC               	movlw	252
  7246  002C24                     u6957:
  7247  002C24  2EE8               	decfsz	wreg,f,c
  7248  002C26  D7FE               	bra	u6957
  7249  002C28  2E01               	decfsz	??_Delay10KTCYx& (0+255),f,c
  7250  002C2A  D7FC               	bra	u6957
  7251  002C2C  2E02               	decfsz	Delay10KTCYx@unit,f,c
  7252  002C2E  D7F7               	goto	l1307
  7253  002C30  0012               	return	
  7254  002C32                     __end_of_Delay10KTCYx:
  7255                           	opt stack 0
  7256                           tblptru	equ	0xFF8
  7257                           tblptrh	equ	0xFF7
  7258                           tblptrl	equ	0xFF6
  7259                           tablat	equ	0xFF5
  7260                           prodh	equ	0xFF4
  7261                           prodl	equ	0xFF3
  7262                           indf0	equ	0xFEF
  7263                           postinc0	equ	0xFEE
  7264                           fsr0h	equ	0xFEA
  7265                           fsr0l	equ	0xFE9
  7266                           wreg	equ	0xFE8
  7267                           indf1	equ	0xFE7
  7268                           postdec1	equ	0xFE5
  7269                           fsr1h	equ	0xFE2
  7270                           fsr1l	equ	0xFE1
  7271                           indf2	equ	0xFDF
  7272                           postinc2	equ	0xFDE
  7273                           postdec2	equ	0xFDD
  7274                           fsr2h	equ	0xFDA
  7275                           fsr2l	equ	0xFD9
  7276                           status	equ	0xFD8
  7277                           
  7278 ;; *************** function _BusyXLCD *****************
  7279 ;; Defined at:
  7280 ;;		line 12 in file "busyxlcd.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;		None
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;		None
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  1    wreg      unsigned char 
  7287 ;; Registers used:
  7288 ;;		wreg, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7294 ;;      Params:         0       0       0       0       0       0       0
  7295 ;;      Locals:         0       0       0       0       0       0       0
  7296 ;;      Temps:          0       0       0       0       0       0       0
  7297 ;;      Totals:         0       0       0       0       0       0       0
  7298 ;;Total ram usage:        0 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:    1
  7301 ;; This function calls:
  7302 ;;		_DelayFor18TCY
  7303 ;; This function is called by:
  7304 ;;		_initXLCD
  7305 ;;		_OpenXLCD
  7306 ;;		_putsXLCD
  7307 ;;		_putrsXLCD
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           	psect	text32
  7312  0029F2                     __ptext32:
  7313                           	opt stack 0
  7314  0029F2                     _BusyXLCD:
  7315                           	opt stack 27
  7316                           
  7317                           ;busyxlcd.c: 14: LATAbits.LATA2 = 1;
  7318                           
  7319                           ;incstack = 0
  7320  0029F2  8489               	bsf	3977,2,c	;volatile
  7321                           
  7322                           ;busyxlcd.c: 15: LATAbits.LATA3 = 0;
  7323  0029F4  9689               	bcf	3977,3,c	;volatile
  7324                           
  7325                           ;busyxlcd.c: 16: DelayFor18TCY();
  7326  0029F6  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7327                           
  7328                           ;busyxlcd.c: 17: LATAbits.LATA1 = 1;
  7329  0029FA  8289               	bsf	3977,1,c	;volatile
  7330                           
  7331                           ;busyxlcd.c: 18: DelayFor18TCY();
  7332  0029FC  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7333                           
  7334                           ;busyxlcd.c: 36: if(PORTB&0x08)
  7335  002A00  A681               	btfss	3969,3,c	;volatile
  7336  002A02  D00A               	goto	l9
  7337                           
  7338                           ;busyxlcd.c: 38: {
  7339                           ;busyxlcd.c: 39: LATAbits.LATA1 = 0;
  7340  002A04  9289               	bcf	3977,1,c	;volatile
  7341                           
  7342                           ;busyxlcd.c: 40: DelayFor18TCY();
  7343  002A06  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7344                           
  7345                           ;busyxlcd.c: 41: LATAbits.LATA1 = 1;
  7346  002A0A  8289               	bsf	3977,1,c	;volatile
  7347                           
  7348                           ;busyxlcd.c: 42: DelayFor18TCY();
  7349  002A0C  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7350                           
  7351                           ;busyxlcd.c: 43: LATAbits.LATA1 = 0;
  7352  002A10  9289               	bcf	3977,1,c	;volatile
  7353                           
  7354                           ;busyxlcd.c: 44: LATAbits.LATA2 = 0;
  7355  002A12  9489               	bcf	3977,2,c	;volatile
  7356                           
  7357                           ;busyxlcd.c: 45: return 1;
  7358  002A14  0E01               	movlw	1
  7359                           
  7360                           ;busyxlcd.c: 46: }
  7361  002A16  0012               	return	
  7362  002A18                     l9:
  7363                           
  7364                           ;busyxlcd.c: 47: else
  7365                           ;busyxlcd.c: 48: {
  7366                           ;busyxlcd.c: 49: LATAbits.LATA1 = 0;
  7367  002A18  9289               	bcf	3977,1,c	;volatile
  7368                           
  7369                           ;busyxlcd.c: 50: DelayFor18TCY();
  7370  002A1A  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7371                           
  7372                           ;busyxlcd.c: 51: LATAbits.LATA1 = 1;
  7373  002A1E  8289               	bsf	3977,1,c	;volatile
  7374                           
  7375                           ;busyxlcd.c: 52: DelayFor18TCY();
  7376  002A20  EC4F  F016         	call	_DelayFor18TCY	;wreg free
  7377                           
  7378                           ;busyxlcd.c: 53: LATAbits.LATA1 = 0;
  7379  002A24  9289               	bcf	3977,1,c	;volatile
  7380                           
  7381                           ;busyxlcd.c: 54: LATAbits.LATA2 = 0;
  7382  002A26  9489               	bcf	3977,2,c	;volatile
  7383                           
  7384                           ;busyxlcd.c: 55: return 0;
  7385  002A28  0E00               	movlw	0
  7386  002A2A  0012               	return	
  7387  002A2C                     __end_of_BusyXLCD:
  7388                           	opt stack 0
  7389                           tblptru	equ	0xFF8
  7390                           tblptrh	equ	0xFF7
  7391                           tblptrl	equ	0xFF6
  7392                           tablat	equ	0xFF5
  7393                           prodh	equ	0xFF4
  7394                           prodl	equ	0xFF3
  7395                           indf0	equ	0xFEF
  7396                           postinc0	equ	0xFEE
  7397                           fsr0h	equ	0xFEA
  7398                           fsr0l	equ	0xFE9
  7399                           wreg	equ	0xFE8
  7400                           indf1	equ	0xFE7
  7401                           postdec1	equ	0xFE5
  7402                           fsr1h	equ	0xFE2
  7403                           fsr1l	equ	0xFE1
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           fsr2h	equ	0xFDA
  7408                           fsr2l	equ	0xFD9
  7409                           status	equ	0xFD8
  7410                           
  7411 ;; *************** function _DelayFor18TCY *****************
  7412 ;; Defined at:
  7413 ;;		line 96 in file "main.c"
  7414 ;; Parameters:    Size  Location     Type
  7415 ;;		None
  7416 ;; Auto vars:     Size  Location     Type
  7417 ;;		None
  7418 ;; Return value:  Size  Location     Type
  7419 ;;                  1    wreg      void 
  7420 ;; Registers used:
  7421 ;;		wreg
  7422 ;; Tracked objects:
  7423 ;;		On entry : 0/0
  7424 ;;		On exit  : 0/0
  7425 ;;		Unchanged: 0/0
  7426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7427 ;;      Params:         0       0       0       0       0       0       0
  7428 ;;      Locals:         0       0       0       0       0       0       0
  7429 ;;      Temps:          0       0       0       0       0       0       0
  7430 ;;      Totals:         0       0       0       0       0       0       0
  7431 ;;Total ram usage:        0 bytes
  7432 ;; Hardware stack levels used:    1
  7433 ;; This function calls:
  7434 ;;		Nothing
  7435 ;; This function is called by:
  7436 ;;		_BusyXLCD
  7437 ;;		_SetDDRamAddr
  7438 ;;		_WriteCmdXLCD
  7439 ;;		_WriteDataXLCD
  7440 ;;		_ReadAddrXLCD
  7441 ;;		_ReadDataXLCD
  7442 ;;		_SetCGRamAddr
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text33
  7447  002C9E                     __ptext33:
  7448                           	opt stack 0
  7449  002C9E                     _DelayFor18TCY:
  7450                           	opt stack 27
  7451                           
  7452                           ;main.c: 98: _delay((unsigned long)((20)*(4000000/4000000.0)));
  7453                           
  7454                           ;incstack = 0
  7455  002C9E  0E06               	movlw	6
  7456  002CA0                     u6967:
  7457  002CA0  2EE8               	decfsz	wreg,f,c
  7458  002CA2  D7FE               	bra	u6967
  7459  002CA4  D000               	nop2	
  7460  002CA6  0012               	return		;funcret
  7461  002CA8                     __end_of_DelayFor18TCY:
  7462                           	opt stack 0
  7463                           tblptru	equ	0xFF8
  7464                           tblptrh	equ	0xFF7
  7465                           tblptrl	equ	0xFF6
  7466                           tablat	equ	0xFF5
  7467                           prodh	equ	0xFF4
  7468                           prodl	equ	0xFF3
  7469                           indf0	equ	0xFEF
  7470                           postinc0	equ	0xFEE
  7471                           fsr0h	equ	0xFEA
  7472                           fsr0l	equ	0xFE9
  7473                           wreg	equ	0xFE8
  7474                           indf1	equ	0xFE7
  7475                           postdec1	equ	0xFE5
  7476                           fsr1h	equ	0xFE2
  7477                           fsr1l	equ	0xFE1
  7478                           indf2	equ	0xFDF
  7479                           postinc2	equ	0xFDE
  7480                           postdec2	equ	0xFDD
  7481                           fsr2h	equ	0xFDA
  7482                           fsr2l	equ	0xFD9
  7483                           status	equ	0xFD8
  7484                           
  7485 ;; *************** function _read_temperature *****************
  7486 ;; Defined at:
  7487 ;;		line 219 in file "main.c"
  7488 ;; Parameters:    Size  Location     Type
  7489 ;;		None
  7490 ;; Auto vars:     Size  Location     Type
  7491 ;;		None
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  1    wreg      void 
  7494 ;; Registers used:
  7495 ;;		wreg, status,2, status,0, cstack
  7496 ;; Tracked objects:
  7497 ;;		On entry : 0/0
  7498 ;;		On exit  : 0/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7501 ;;      Params:         0       0       0       0       0       0       0
  7502 ;;      Locals:         0       0       0       0       0       0       0
  7503 ;;      Temps:          0       0       0       0       0       0       0
  7504 ;;      Totals:         0       0       0       0       0       0       0
  7505 ;;Total ram usage:        0 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:    2
  7508 ;; This function calls:
  7509 ;;		_BusyADC
  7510 ;;		_ConvertADC
  7511 ;;		_ReadADC
  7512 ;;		___awtoft
  7513 ;;		___ftdiv
  7514 ;;		___ftmul
  7515 ;; This function is called by:
  7516 ;;		_main
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text34
  7521  00259E                     __ptext34:
  7522                           	opt stack 0
  7523  00259E                     _read_temperature:
  7524                           	opt stack 28
  7525                           
  7526                           ;main.c: 221: ConvertADC();
  7527                           
  7528                           ;incstack = 0
  7529  00259E  EC57  F016         	call	_ConvertADC	;wreg free
  7530  0025A2  EC49  F016         	call	_BusyADC	;wreg free
  7531  0025A6  0900               	iorlw	0
  7532  0025A8  A4D8               	btfss	status,2,c
  7533  0025AA  D7FB               	goto	l199
  7534                           
  7535                           ;main.c: 223: converted_temp.number = ((float)ReadADC() *100/255);
  7536  0025AC  0E00               	movlw	0
  7537  0025AE  6E18               	movwf	___ftmul@f2,c
  7538  0025B0  0EC8               	movlw	200
  7539  0025B2  6E19               	movwf	___ftmul@f2+1,c
  7540  0025B4  0E42               	movlw	66
  7541  0025B6  6E1A               	movwf	___ftmul@f2+2,c
  7542  0025B8  EC3C  F016         	call	_ReadADC	;wreg free
  7543  0025BC  C001  F009         	movff	?_ReadADC,___awtoft@c
  7544  0025C0  C002  F00A         	movff	?_ReadADC+1,___awtoft@c+1
  7545  0025C4  EC33  F015         	call	___awtoft	;wreg free
  7546  0025C8  C009  F015         	movff	?___awtoft,___ftmul@f1
  7547  0025CC  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  7548  0025D0  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  7549  0025D4  EC30  F00E         	call	___ftmul	;wreg free
  7550  0025D8  C015  F024         	movff	?___ftmul,___ftdiv@f1
  7551  0025DC  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  7552  0025E0  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  7553  0025E4  0E00               	movlw	0
  7554  0025E6  6E27               	movwf	___ftdiv@f2,c
  7555  0025E8  0E7F               	movlw	127
  7556  0025EA  6E28               	movwf	___ftdiv@f2+1,c
  7557  0025EC  0E43               	movlw	67
  7558  0025EE  6E29               	movwf	___ftdiv@f2+2,c
  7559  0025F0  ECAA  F00E         	call	___ftdiv	;wreg free
  7560  0025F4  C024  F0AF         	movff	?___ftdiv,_converted_temp
  7561  0025F8  C025  F0B0         	movff	?___ftdiv+1,_converted_temp+1
  7562  0025FC  C026  F0B1         	movff	?___ftdiv+2,_converted_temp+2
  7563  002600  0012               	return		;funcret
  7564  002602                     __end_of_read_temperature:
  7565                           	opt stack 0
  7566                           tblptru	equ	0xFF8
  7567                           tblptrh	equ	0xFF7
  7568                           tblptrl	equ	0xFF6
  7569                           tablat	equ	0xFF5
  7570                           prodh	equ	0xFF4
  7571                           prodl	equ	0xFF3
  7572                           indf0	equ	0xFEF
  7573                           postinc0	equ	0xFEE
  7574                           fsr0h	equ	0xFEA
  7575                           fsr0l	equ	0xFE9
  7576                           wreg	equ	0xFE8
  7577                           indf1	equ	0xFE7
  7578                           postdec1	equ	0xFE5
  7579                           fsr1h	equ	0xFE2
  7580                           fsr1l	equ	0xFE1
  7581                           indf2	equ	0xFDF
  7582                           postinc2	equ	0xFDE
  7583                           postdec2	equ	0xFDD
  7584                           fsr2h	equ	0xFDA
  7585                           fsr2l	equ	0xFD9
  7586                           status	equ	0xFD8
  7587                           
  7588 ;; *************** function ___ftmul *****************
  7589 ;; Defined at:
  7590 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/ftmul.c"
  7591 ;; Parameters:    Size  Location     Type
  7592 ;;  f1              3   20[COMRAM] float 
  7593 ;;  f2              3   23[COMRAM] float 
  7594 ;; Auto vars:     Size  Location     Type
  7595 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  7596 ;;  sign            1   34[COMRAM] unsigned char 
  7597 ;;  cntr            1   33[COMRAM] unsigned char 
  7598 ;;  exp             1   29[COMRAM] unsigned char 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  3   20[COMRAM] float 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2, status,0, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7608 ;;      Params:         6       0       0       0       0       0       0
  7609 ;;      Locals:         6       0       0       0       0       0       0
  7610 ;;      Temps:          3       0       0       0       0       0       0
  7611 ;;      Totals:        15       0       0       0       0       0       0
  7612 ;;Total ram usage:       15 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    1
  7615 ;; This function calls:
  7616 ;;		___ftpack
  7617 ;; This function is called by:
  7618 ;;		_read_temperature
  7619 ;;		_fround
  7620 ;;		_scale
  7621 ;;		_sprintf
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           	psect	text35
  7626  001C60                     __ptext35:
  7627                           	opt stack 0
  7628  001C60                     ___ftmul:
  7629                           	opt stack 25
  7630                           
  7631                           ;incstack = 0
  7632  001C60  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  7633  001C64  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7634  001C66  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7635  001C68  3416               	rlcf	___ftmul@f1+1,w,c
  7636  001C6A  361B               	rlcf	??___ftmul& (0+255),f,c
  7637  001C6C  E301               	bnc	u3881
  7638  001C6E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7639  001C70                     u3881:
  7640  001C70  501B               	movf	??___ftmul,w,c
  7641  001C72  6E1E               	movwf	___ftmul@exp,c
  7642  001C74  501E               	movf	___ftmul@exp,w,c
  7643  001C76  A4D8               	btfss	status,2,c
  7644  001C78  D007               	goto	l1440
  7645  001C7A  0E00               	movlw	0
  7646  001C7C  6E15               	movwf	?___ftmul,c
  7647  001C7E  0E00               	movlw	0
  7648  001C80  6E16               	movwf	?___ftmul+1,c
  7649  001C82  0E00               	movlw	0
  7650  001C84  6E17               	movwf	?___ftmul+2,c
  7651  001C86  0012               	return	
  7652  001C88                     l1440:
  7653  001C88  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  7654  001C8C  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7655  001C8E  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7656  001C90  3419               	rlcf	___ftmul@f2+1,w,c
  7657  001C92  361B               	rlcf	??___ftmul& (0+255),f,c
  7658  001C94  E301               	bnc	u3901
  7659  001C96  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7660  001C98                     u3901:
  7661  001C98  501B               	movf	??___ftmul,w,c
  7662  001C9A  6E23               	movwf	___ftmul@sign,c
  7663  001C9C  5023               	movf	___ftmul@sign,w,c
  7664  001C9E  A4D8               	btfss	status,2,c
  7665  001CA0  D007               	goto	l1442
  7666  001CA2  0E00               	movlw	0
  7667  001CA4  6E15               	movwf	?___ftmul,c
  7668  001CA6  0E00               	movlw	0
  7669  001CA8  6E16               	movwf	?___ftmul+1,c
  7670  001CAA  0E00               	movlw	0
  7671  001CAC  6E17               	movwf	?___ftmul+2,c
  7672  001CAE  0012               	return	
  7673  001CB0                     l1442:
  7674  001CB0  5023               	movf	___ftmul@sign,w,c
  7675  001CB2  0F7B               	addlw	123
  7676  001CB4  261E               	addwf	___ftmul@exp,f,c
  7677  001CB6  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  7678  001CBA  501A               	movf	___ftmul@f2+2,w,c
  7679  001CBC  1A23               	xorwf	___ftmul@sign,f,c
  7680  001CBE  0E80               	movlw	128
  7681  001CC0  1623               	andwf	___ftmul@sign,f,c
  7682  001CC2  8E16               	bsf	___ftmul@f1+1,7,c
  7683  001CC4  8E19               	bsf	___ftmul@f2+1,7,c
  7684  001CC6  0EFF               	movlw	255
  7685  001CC8  1618               	andwf	___ftmul@f2,f,c
  7686  001CCA  0EFF               	movlw	255
  7687  001CCC  1619               	andwf	___ftmul@f2+1,f,c
  7688  001CCE  0E00               	movlw	0
  7689  001CD0  161A               	andwf	___ftmul@f2+2,f,c
  7690  001CD2  0E00               	movlw	0
  7691  001CD4  6E1F               	movwf	___ftmul@f3_as_product,c
  7692  001CD6  0E00               	movlw	0
  7693  001CD8  6E20               	movwf	___ftmul@f3_as_product+1,c
  7694  001CDA  0E00               	movlw	0
  7695  001CDC  6E21               	movwf	___ftmul@f3_as_product+2,c
  7696  001CDE  0E07               	movlw	7
  7697  001CE0  6E22               	movwf	___ftmul@cntr,c
  7698  001CE2  A015               	btfss	___ftmul@f1,0,c
  7699  001CE4  D006               	goto	l1444
  7700  001CE6  5018               	movf	___ftmul@f2,w,c
  7701  001CE8  261F               	addwf	___ftmul@f3_as_product,f,c
  7702  001CEA  5019               	movf	___ftmul@f2+1,w,c
  7703  001CEC  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7704  001CEE  501A               	movf	___ftmul@f2+2,w,c
  7705  001CF0  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7706  001CF2                     l1444:
  7707  001CF2  90D8               	bcf	status,0,c
  7708  001CF4  3217               	rrcf	___ftmul@f1+2,f,c
  7709  001CF6  3216               	rrcf	___ftmul@f1+1,f,c
  7710  001CF8  3215               	rrcf	___ftmul@f1,f,c
  7711  001CFA  90D8               	bcf	status,0,c
  7712  001CFC  3618               	rlcf	___ftmul@f2,f,c
  7713  001CFE  3619               	rlcf	___ftmul@f2+1,f,c
  7714  001D00  361A               	rlcf	___ftmul@f2+2,f,c
  7715  001D02  2E22               	decfsz	___ftmul@cntr,f,c
  7716  001D04  D7EE               	goto	l1443
  7717  001D06  0E09               	movlw	9
  7718  001D08  6E22               	movwf	___ftmul@cntr,c
  7719  001D0A  A015               	btfss	___ftmul@f1,0,c
  7720  001D0C  D006               	goto	l1447
  7721  001D0E  5018               	movf	___ftmul@f2,w,c
  7722  001D10  261F               	addwf	___ftmul@f3_as_product,f,c
  7723  001D12  5019               	movf	___ftmul@f2+1,w,c
  7724  001D14  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7725  001D16  501A               	movf	___ftmul@f2+2,w,c
  7726  001D18  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7727  001D1A                     l1447:
  7728  001D1A  90D8               	bcf	status,0,c
  7729  001D1C  3217               	rrcf	___ftmul@f1+2,f,c
  7730  001D1E  3216               	rrcf	___ftmul@f1+1,f,c
  7731  001D20  3215               	rrcf	___ftmul@f1,f,c
  7732  001D22  90D8               	bcf	status,0,c
  7733  001D24  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  7734  001D26  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  7735  001D28  321F               	rrcf	___ftmul@f3_as_product,f,c
  7736  001D2A  2E22               	decfsz	___ftmul@cntr,f,c
  7737  001D2C  D7EE               	goto	l1446
  7738  001D2E  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7739  001D32  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7740  001D36  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7741  001D3A  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  7742  001D3E  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  7743  001D42  EC43  F010         	call	___ftpack	;wreg free
  7744  001D46  C001  F015         	movff	?___ftpack,?___ftmul
  7745  001D4A  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  7746  001D4E  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  7747  001D52  0012               	return	
  7748  001D54                     __end_of___ftmul:
  7749                           	opt stack 0
  7750                           tblptru	equ	0xFF8
  7751                           tblptrh	equ	0xFF7
  7752                           tblptrl	equ	0xFF6
  7753                           tablat	equ	0xFF5
  7754                           prodh	equ	0xFF4
  7755                           prodl	equ	0xFF3
  7756                           indf0	equ	0xFEF
  7757                           postinc0	equ	0xFEE
  7758                           fsr0h	equ	0xFEA
  7759                           fsr0l	equ	0xFE9
  7760                           wreg	equ	0xFE8
  7761                           indf1	equ	0xFE7
  7762                           postdec1	equ	0xFE5
  7763                           fsr1h	equ	0xFE2
  7764                           fsr1l	equ	0xFE1
  7765                           indf2	equ	0xFDF
  7766                           postinc2	equ	0xFDE
  7767                           postdec2	equ	0xFDD
  7768                           fsr2h	equ	0xFDA
  7769                           fsr2l	equ	0xFD9
  7770                           status	equ	0xFD8
  7771                           
  7772 ;; *************** function ___ftdiv *****************
  7773 ;; Defined at:
  7774 ;;		line 54 in file "/opt/microchip/xc8/v1.44/sources/common/ftdiv.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;  f1              3   35[COMRAM] float 
  7777 ;;  f2              3   38[COMRAM] float 
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;  f3              3   45[COMRAM] float 
  7780 ;;  sign            1   49[COMRAM] unsigned char 
  7781 ;;  exp             1   48[COMRAM] unsigned char 
  7782 ;;  cntr            1   44[COMRAM] unsigned char 
  7783 ;; Return value:  Size  Location     Type
  7784 ;;                  3   35[COMRAM] float 
  7785 ;; Registers used:
  7786 ;;		wreg, status,2, status,0, cstack
  7787 ;; Tracked objects:
  7788 ;;		On entry : 0/0
  7789 ;;		On exit  : 0/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7792 ;;      Params:         6       0       0       0       0       0       0
  7793 ;;      Locals:         6       0       0       0       0       0       0
  7794 ;;      Temps:          3       0       0       0       0       0       0
  7795 ;;      Totals:        15       0       0       0       0       0       0
  7796 ;;Total ram usage:       15 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:    1
  7799 ;; This function calls:
  7800 ;;		___ftpack
  7801 ;; This function is called by:
  7802 ;;		_read_temperature
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text36
  7807  001D54                     __ptext36:
  7808                           	opt stack 0
  7809  001D54                     ___ftdiv:
  7810                           	opt stack 28
  7811                           
  7812                           ;incstack = 0
  7813  001D54  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  7814  001D58  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  7815  001D5A  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  7816  001D5C  3425               	rlcf	___ftdiv@f1+1,w,c
  7817  001D5E  362A               	rlcf	??___ftdiv& (0+255),f,c
  7818  001D60  E301               	bnc	u5641
  7819  001D62  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  7820  001D64                     u5641:
  7821  001D64  502A               	movf	??___ftdiv,w,c
  7822  001D66  6E31               	movwf	___ftdiv@exp,c
  7823  001D68  5031               	movf	___ftdiv@exp,w,c
  7824  001D6A  A4D8               	btfss	status,2,c
  7825  001D6C  D007               	goto	l1408
  7826  001D6E  0E00               	movlw	0
  7827  001D70  6E24               	movwf	?___ftdiv,c
  7828  001D72  0E00               	movlw	0
  7829  001D74  6E25               	movwf	?___ftdiv+1,c
  7830  001D76  0E00               	movlw	0
  7831  001D78  6E26               	movwf	?___ftdiv+2,c
  7832  001D7A  0012               	return	
  7833  001D7C                     l1408:
  7834  001D7C  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  7835  001D80  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  7836  001D82  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  7837  001D84  3428               	rlcf	___ftdiv@f2+1,w,c
  7838  001D86  362A               	rlcf	??___ftdiv& (0+255),f,c
  7839  001D88  E301               	bnc	u5661
  7840  001D8A  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  7841  001D8C                     u5661:
  7842  001D8C  502A               	movf	??___ftdiv,w,c
  7843  001D8E  6E32               	movwf	___ftdiv@sign,c
  7844  001D90  5032               	movf	___ftdiv@sign,w,c
  7845  001D92  A4D8               	btfss	status,2,c
  7846  001D94  D007               	goto	l1410
  7847  001D96  0E00               	movlw	0
  7848  001D98  6E24               	movwf	?___ftdiv,c
  7849  001D9A  0E00               	movlw	0
  7850  001D9C  6E25               	movwf	?___ftdiv+1,c
  7851  001D9E  0E00               	movlw	0
  7852  001DA0  6E26               	movwf	?___ftdiv+2,c
  7853  001DA2  0012               	return	
  7854  001DA4                     l1410:
  7855  001DA4  0E00               	movlw	0
  7856  001DA6  6E2E               	movwf	___ftdiv@f3,c
  7857  001DA8  0E00               	movlw	0
  7858  001DAA  6E2F               	movwf	___ftdiv@f3+1,c
  7859  001DAC  0E00               	movlw	0
  7860  001DAE  6E30               	movwf	___ftdiv@f3+2,c
  7861  001DB0  5032               	movf	___ftdiv@sign,w,c
  7862  001DB2  0F89               	addlw	137
  7863  001DB4  5E31               	subwf	___ftdiv@exp,f,c
  7864  001DB6  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  7865  001DBA  5029               	movf	___ftdiv@f2+2,w,c
  7866  001DBC  1A32               	xorwf	___ftdiv@sign,f,c
  7867  001DBE  0E80               	movlw	128
  7868  001DC0  1632               	andwf	___ftdiv@sign,f,c
  7869  001DC2  8E25               	bsf	___ftdiv@f1+1,7,c
  7870  001DC4  0EFF               	movlw	255
  7871  001DC6  1624               	andwf	___ftdiv@f1,f,c
  7872  001DC8  0EFF               	movlw	255
  7873  001DCA  1625               	andwf	___ftdiv@f1+1,f,c
  7874  001DCC  0E00               	movlw	0
  7875  001DCE  1626               	andwf	___ftdiv@f1+2,f,c
  7876  001DD0  8E28               	bsf	___ftdiv@f2+1,7,c
  7877  001DD2  0EFF               	movlw	255
  7878  001DD4  1627               	andwf	___ftdiv@f2,f,c
  7879  001DD6  0EFF               	movlw	255
  7880  001DD8  1628               	andwf	___ftdiv@f2+1,f,c
  7881  001DDA  0E00               	movlw	0
  7882  001DDC  1629               	andwf	___ftdiv@f2+2,f,c
  7883  001DDE  0E18               	movlw	24
  7884  001DE0  6E2D               	movwf	___ftdiv@cntr,c
  7885  001DE2  90D8               	bcf	status,0,c
  7886  001DE4  362E               	rlcf	___ftdiv@f3,f,c
  7887  001DE6  362F               	rlcf	___ftdiv@f3+1,f,c
  7888  001DE8  3630               	rlcf	___ftdiv@f3+2,f,c
  7889  001DEA  5027               	movf	___ftdiv@f2,w,c
  7890  001DEC  5C24               	subwf	___ftdiv@f1,w,c
  7891  001DEE  5028               	movf	___ftdiv@f2+1,w,c
  7892  001DF0  5825               	subwfb	___ftdiv@f1+1,w,c
  7893  001DF2  5029               	movf	___ftdiv@f2+2,w,c
  7894  001DF4  5826               	subwfb	___ftdiv@f1+2,w,c
  7895  001DF6  A0D8               	btfss	status,0,c
  7896  001DF8  D007               	goto	l1412
  7897  001DFA  5027               	movf	___ftdiv@f2,w,c
  7898  001DFC  5E24               	subwf	___ftdiv@f1,f,c
  7899  001DFE  5028               	movf	___ftdiv@f2+1,w,c
  7900  001E00  5A25               	subwfb	___ftdiv@f1+1,f,c
  7901  001E02  5029               	movf	___ftdiv@f2+2,w,c
  7902  001E04  5A26               	subwfb	___ftdiv@f1+2,f,c
  7903  001E06  802E               	bsf	___ftdiv@f3,0,c
  7904  001E08                     l1412:
  7905  001E08  90D8               	bcf	status,0,c
  7906  001E0A  3624               	rlcf	___ftdiv@f1,f,c
  7907  001E0C  3625               	rlcf	___ftdiv@f1+1,f,c
  7908  001E0E  3626               	rlcf	___ftdiv@f1+2,f,c
  7909  001E10  2E2D               	decfsz	___ftdiv@cntr,f,c
  7910  001E12  D7E7               	goto	l1411
  7911  001E14  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  7912  001E18  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7913  001E1C  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7914  001E20  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  7915  001E24  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  7916  001E28  EC43  F010         	call	___ftpack	;wreg free
  7917  001E2C  C001  F024         	movff	?___ftpack,?___ftdiv
  7918  001E30  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  7919  001E34  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  7920  001E38  0012               	return	
  7921  001E3A                     __end_of___ftdiv:
  7922                           	opt stack 0
  7923                           tblptru	equ	0xFF8
  7924                           tblptrh	equ	0xFF7
  7925                           tblptrl	equ	0xFF6
  7926                           tablat	equ	0xFF5
  7927                           prodh	equ	0xFF4
  7928                           prodl	equ	0xFF3
  7929                           indf0	equ	0xFEF
  7930                           postinc0	equ	0xFEE
  7931                           fsr0h	equ	0xFEA
  7932                           fsr0l	equ	0xFE9
  7933                           wreg	equ	0xFE8
  7934                           indf1	equ	0xFE7
  7935                           postdec1	equ	0xFE5
  7936                           fsr1h	equ	0xFE2
  7937                           fsr1l	equ	0xFE1
  7938                           indf2	equ	0xFDF
  7939                           postinc2	equ	0xFDE
  7940                           postdec2	equ	0xFDD
  7941                           fsr2h	equ	0xFDA
  7942                           fsr2l	equ	0xFD9
  7943                           status	equ	0xFD8
  7944                           
  7945 ;; *************** function ___awtoft *****************
  7946 ;; Defined at:
  7947 ;;		line 32 in file "/opt/microchip/xc8/v1.44/sources/common/awtoft.c"
  7948 ;; Parameters:    Size  Location     Type
  7949 ;;  c               2    8[COMRAM] int 
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;  sign            1   11[COMRAM] unsigned char 
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  3    8[COMRAM] float 
  7954 ;; Registers used:
  7955 ;;		wreg, status,2, status,0, cstack
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7961 ;;      Params:         3       0       0       0       0       0       0
  7962 ;;      Locals:         1       0       0       0       0       0       0
  7963 ;;      Temps:          0       0       0       0       0       0       0
  7964 ;;      Totals:         4       0       0       0       0       0       0
  7965 ;;Total ram usage:        4 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    1
  7968 ;; This function calls:
  7969 ;;		___ftpack
  7970 ;; This function is called by:
  7971 ;;		_read_temperature
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text37
  7976  002A66                     __ptext37:
  7977                           	opt stack 0
  7978  002A66                     ___awtoft:
  7979                           	opt stack 28
  7980                           
  7981                           ;incstack = 0
  7982  002A66  0E00               	movlw	0
  7983  002A68  6E0C               	movwf	___awtoft@sign,c
  7984  002A6A  AE0A               	btfss	___awtoft@c+1,7,c
  7985  002A6C  D006               	goto	l1301
  7986  002A6E  6C09               	negf	___awtoft@c,c
  7987  002A70  1E0A               	comf	___awtoft@c+1,f,c
  7988  002A72  B0D8               	btfsc	status,0,c
  7989  002A74  2A0A               	incf	___awtoft@c+1,f,c
  7990  002A76  0E01               	movlw	1
  7991  002A78  6E0C               	movwf	___awtoft@sign,c
  7992  002A7A                     l1301:
  7993  002A7A  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7994  002A7E  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7995  002A82  6A03               	clrf	___ftpack@arg+2,c
  7996  002A84  0E8E               	movlw	142
  7997  002A86  6E04               	movwf	___ftpack@exp,c
  7998  002A88  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7999  002A8C  EC43  F010         	call	___ftpack	;wreg free
  8000  002A90  C001  F009         	movff	?___ftpack,?___awtoft
  8001  002A94  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  8002  002A98  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  8003  002A9C  0012               	return	
  8004  002A9E                     __end_of___awtoft:
  8005                           	opt stack 0
  8006                           tblptru	equ	0xFF8
  8007                           tblptrh	equ	0xFF7
  8008                           tblptrl	equ	0xFF6
  8009                           tablat	equ	0xFF5
  8010                           prodh	equ	0xFF4
  8011                           prodl	equ	0xFF3
  8012                           indf0	equ	0xFEF
  8013                           postinc0	equ	0xFEE
  8014                           fsr0h	equ	0xFEA
  8015                           fsr0l	equ	0xFE9
  8016                           wreg	equ	0xFE8
  8017                           indf1	equ	0xFE7
  8018                           postdec1	equ	0xFE5
  8019                           fsr1h	equ	0xFE2
  8020                           fsr1l	equ	0xFE1
  8021                           indf2	equ	0xFDF
  8022                           postinc2	equ	0xFDE
  8023                           postdec2	equ	0xFDD
  8024                           fsr2h	equ	0xFDA
  8025                           fsr2l	equ	0xFD9
  8026                           status	equ	0xFD8
  8027                           
  8028 ;; *************** function ___ftpack *****************
  8029 ;; Defined at:
  8030 ;;		line 62 in file "/opt/microchip/xc8/v1.44/sources/common/float.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  arg             3    0[COMRAM] unsigned um
  8033 ;;  exp             1    3[COMRAM] unsigned char 
  8034 ;;  sign            1    4[COMRAM] unsigned char 
  8035 ;; Auto vars:     Size  Location     Type
  8036 ;;		None
  8037 ;; Return value:  Size  Location     Type
  8038 ;;                  3    0[COMRAM] float 
  8039 ;; Registers used:
  8040 ;;		wreg, status,2, status,0
  8041 ;; Tracked objects:
  8042 ;;		On entry : 0/0
  8043 ;;		On exit  : 0/0
  8044 ;;		Unchanged: 0/0
  8045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8046 ;;      Params:         5       0       0       0       0       0       0
  8047 ;;      Locals:         0       0       0       0       0       0       0
  8048 ;;      Temps:          3       0       0       0       0       0       0
  8049 ;;      Totals:         8       0       0       0       0       0       0
  8050 ;;Total ram usage:        8 bytes
  8051 ;; Hardware stack levels used:    1
  8052 ;; This function calls:
  8053 ;;		Nothing
  8054 ;; This function is called by:
  8055 ;;		___awtoft
  8056 ;;		___ftadd
  8057 ;;		___ftdiv
  8058 ;;		___ftmul
  8059 ;;		___lltoft
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           	psect	text38
  8064  002086                     __ptext38:
  8065                           	opt stack 0
  8066  002086                     ___ftpack:
  8067                           	opt stack 25
  8068                           
  8069                           ;incstack = 0
  8070  002086  5004               	movf	___ftpack@exp,w,c
  8071  002088  B4D8               	btfsc	status,2,c
  8072  00208A  D005               	goto	u3480
  8073  00208C  5001               	movf	___ftpack@arg,w,c
  8074  00208E  1002               	iorwf	___ftpack@arg+1,w,c
  8075  002090  1003               	iorwf	___ftpack@arg+2,w,c
  8076  002092  A4D8               	btfss	status,2,c
  8077  002094  D00C               	goto	l1344
  8078  002096                     u3480:
  8079  002096  0E00               	movlw	0
  8080  002098  6E01               	movwf	?___ftpack,c
  8081  00209A  0E00               	movlw	0
  8082  00209C  6E02               	movwf	?___ftpack+1,c
  8083  00209E  0E00               	movlw	0
  8084  0020A0  6E03               	movwf	?___ftpack+2,c
  8085  0020A2  0012               	return	
  8086  0020A4  2A04               	incf	___ftpack@exp,f,c
  8087  0020A6  90D8               	bcf	status,0,c
  8088  0020A8  3203               	rrcf	___ftpack@arg+2,f,c
  8089  0020AA  3202               	rrcf	___ftpack@arg+1,f,c
  8090  0020AC  3201               	rrcf	___ftpack@arg,f,c
  8091  0020AE                     l1344:
  8092  0020AE  0E00               	movlw	0
  8093  0020B0  1401               	andwf	___ftpack@arg,w,c
  8094  0020B2  6E06               	movwf	??___ftpack& (0+255),c
  8095  0020B4  0E00               	movlw	0
  8096  0020B6  1402               	andwf	___ftpack@arg+1,w,c
  8097  0020B8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8098  0020BA  0EFE               	movlw	254
  8099  0020BC  1403               	andwf	___ftpack@arg+2,w,c
  8100  0020BE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8101  0020C0  5006               	movf	??___ftpack,w,c
  8102  0020C2  1007               	iorwf	??___ftpack+1,w,c
  8103  0020C4  1008               	iorwf	??___ftpack+2,w,c
  8104  0020C6  B4D8               	btfsc	status,2,c
  8105  0020C8  D00C               	goto	l1347
  8106  0020CA  D7EC               	goto	l1345
  8107  0020CC  2A04               	incf	___ftpack@exp,f,c
  8108  0020CE  0E01               	movlw	1
  8109  0020D0  2601               	addwf	___ftpack@arg,f,c
  8110  0020D2  0E00               	movlw	0
  8111  0020D4  2202               	addwfc	___ftpack@arg+1,f,c
  8112  0020D6  0E00               	movlw	0
  8113  0020D8  2203               	addwfc	___ftpack@arg+2,f,c
  8114  0020DA  90D8               	bcf	status,0,c
  8115  0020DC  3203               	rrcf	___ftpack@arg+2,f,c
  8116  0020DE  3202               	rrcf	___ftpack@arg+1,f,c
  8117  0020E0  3201               	rrcf	___ftpack@arg,f,c
  8118  0020E2                     l1347:
  8119  0020E2  0E00               	movlw	0
  8120  0020E4  1401               	andwf	___ftpack@arg,w,c
  8121  0020E6  6E06               	movwf	??___ftpack& (0+255),c
  8122  0020E8  0E00               	movlw	0
  8123  0020EA  1402               	andwf	___ftpack@arg+1,w,c
  8124  0020EC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8125  0020EE  0EFF               	movlw	255
  8126  0020F0  1403               	andwf	___ftpack@arg+2,w,c
  8127  0020F2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8128  0020F4  5006               	movf	??___ftpack,w,c
  8129  0020F6  1007               	iorwf	??___ftpack+1,w,c
  8130  0020F8  1008               	iorwf	??___ftpack+2,w,c
  8131  0020FA  B4D8               	btfsc	status,2,c
  8132  0020FC  D006               	goto	l1350
  8133  0020FE  D7E6               	goto	l1348
  8134  002100  0604               	decf	___ftpack@exp,f,c
  8135  002102  90D8               	bcf	status,0,c
  8136  002104  3601               	rlcf	___ftpack@arg,f,c
  8137  002106  3602               	rlcf	___ftpack@arg+1,f,c
  8138  002108  3603               	rlcf	___ftpack@arg+2,f,c
  8139  00210A                     l1350:
  8140  00210A  BE02               	btfsc	___ftpack@arg+1,7,c
  8141  00210C  D003               	goto	u3520
  8142  00210E  0E02               	movlw	2
  8143  002110  6004               	cpfslt	___ftpack@exp,c
  8144  002112  D7F6               	goto	l1351
  8145  002114                     u3520:
  8146  002114  A004               	btfss	___ftpack@exp,0,c
  8147  002116  9E02               	bcf	___ftpack@arg+1,7,c
  8148  002118  90D8               	bcf	status,0,c
  8149  00211A  3204               	rrcf	___ftpack@exp,f,c
  8150  00211C  5004               	movf	___ftpack@exp,w,c
  8151  00211E  1203               	iorwf	___ftpack@arg+2,f,c
  8152  002120  5005               	movf	___ftpack@sign,w,c
  8153  002122  A4D8               	btfss	status,2,c
  8154  002124  8E03               	bsf	___ftpack@arg+2,7,c
  8155  002126  C001  F001         	movff	___ftpack@arg,?___ftpack
  8156  00212A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8157  00212E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8158  002132  0012               	return	
  8159  002134                     __end_of___ftpack:
  8160                           	opt stack 0
  8161                           tblptru	equ	0xFF8
  8162                           tblptrh	equ	0xFF7
  8163                           tblptrl	equ	0xFF6
  8164                           tablat	equ	0xFF5
  8165                           prodh	equ	0xFF4
  8166                           prodl	equ	0xFF3
  8167                           indf0	equ	0xFEF
  8168                           postinc0	equ	0xFEE
  8169                           fsr0h	equ	0xFEA
  8170                           fsr0l	equ	0xFE9
  8171                           wreg	equ	0xFE8
  8172                           indf1	equ	0xFE7
  8173                           postdec1	equ	0xFE5
  8174                           fsr1h	equ	0xFE2
  8175                           fsr1l	equ	0xFE1
  8176                           indf2	equ	0xFDF
  8177                           postinc2	equ	0xFDE
  8178                           postdec2	equ	0xFDD
  8179                           fsr2h	equ	0xFDA
  8180                           fsr2l	equ	0xFD9
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function _ReadADC *****************
  8184 ;; Defined at:
  8185 ;;		line 24 in file "adcread.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;		None
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;		None
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  2    0[COMRAM] int 
  8192 ;; Registers used:
  8193 ;;		wreg, status,2
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8199 ;;      Params:         2       0       0       0       0       0       0
  8200 ;;      Locals:         0       0       0       0       0       0       0
  8201 ;;      Temps:          2       0       0       0       0       0       0
  8202 ;;      Totals:         4       0       0       0       0       0       0
  8203 ;;Total ram usage:        4 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; This function calls:
  8206 ;;		Nothing
  8207 ;; This function is called by:
  8208 ;;		_read_temperature
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           	psect	text39
  8213  002C78                     __ptext39:
  8214                           	opt stack 0
  8215  002C78                     _ReadADC:
  8216                           	opt stack 29
  8217                           
  8218                           ;adcread.c: 26: return (((unsigned int)ADRESH)<<8)|(ADRESL);
  8219                           
  8220                           ;incstack = 0
  8221  002C78  50C4               	movf	4036,w,c	;volatile
  8222  002C7A  6E03               	movwf	??_ReadADC& (0+255),c
  8223  002C7C  50C3               	movf	4035,w,c	;volatile
  8224  002C7E  6E01               	movwf	?_ReadADC,c
  8225  002C80  C003  F002         	movff	??_ReadADC,?_ReadADC+1
  8226  002C84  0012               	return	
  8227  002C86                     __end_of_ReadADC:
  8228                           	opt stack 0
  8229                           tblptru	equ	0xFF8
  8230                           tblptrh	equ	0xFF7
  8231                           tblptrl	equ	0xFF6
  8232                           tablat	equ	0xFF5
  8233                           prodh	equ	0xFF4
  8234                           prodl	equ	0xFF3
  8235                           indf0	equ	0xFEF
  8236                           postinc0	equ	0xFEE
  8237                           fsr0h	equ	0xFEA
  8238                           fsr0l	equ	0xFE9
  8239                           wreg	equ	0xFE8
  8240                           indf1	equ	0xFE7
  8241                           postdec1	equ	0xFE5
  8242                           fsr1h	equ	0xFE2
  8243                           fsr1l	equ	0xFE1
  8244                           indf2	equ	0xFDF
  8245                           postinc2	equ	0xFDE
  8246                           postdec2	equ	0xFDD
  8247                           fsr2h	equ	0xFDA
  8248                           fsr2l	equ	0xFD9
  8249                           status	equ	0xFD8
  8250                           
  8251 ;; *************** function _ConvertADC *****************
  8252 ;; Defined at:
  8253 ;;		line 22 in file "adcconv.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;		None
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;		None
  8258 ;; Return value:  Size  Location     Type
  8259 ;;                  1    wreg      void 
  8260 ;; Registers used:
  8261 ;;		None
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8267 ;;      Params:         0       0       0       0       0       0       0
  8268 ;;      Locals:         0       0       0       0       0       0       0
  8269 ;;      Temps:          0       0       0       0       0       0       0
  8270 ;;      Totals:         0       0       0       0       0       0       0
  8271 ;;Total ram usage:        0 bytes
  8272 ;; Hardware stack levels used:    1
  8273 ;; This function calls:
  8274 ;;		Nothing
  8275 ;; This function is called by:
  8276 ;;		_read_temperature
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           	psect	text40
  8281  002CAE                     __ptext40:
  8282                           	opt stack 0
  8283  002CAE                     _ConvertADC:
  8284                           	opt stack 29
  8285                           
  8286                           ;adcconv.c: 24: ADCON0bits.GO = 1;
  8287                           
  8288                           ;incstack = 0
  8289  002CAE  82C2               	bsf	4034,1,c	;volatile
  8290  002CB0  0012               	return		;funcret
  8291  002CB2                     __end_of_ConvertADC:
  8292                           	opt stack 0
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           indf0	equ	0xFEF
  8300                           postinc0	equ	0xFEE
  8301                           fsr0h	equ	0xFEA
  8302                           fsr0l	equ	0xFE9
  8303                           wreg	equ	0xFE8
  8304                           indf1	equ	0xFE7
  8305                           postdec1	equ	0xFE5
  8306                           fsr1h	equ	0xFE2
  8307                           fsr1l	equ	0xFE1
  8308                           indf2	equ	0xFDF
  8309                           postinc2	equ	0xFDE
  8310                           postdec2	equ	0xFDD
  8311                           fsr2h	equ	0xFDA
  8312                           fsr2l	equ	0xFD9
  8313                           status	equ	0xFD8
  8314                           
  8315 ;; *************** function _BusyADC *****************
  8316 ;; Defined at:
  8317 ;;		line 26 in file "adcbusy.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;		None
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;		None
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      unsigned char 
  8324 ;; Registers used:
  8325 ;;		wreg
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8331 ;;      Params:         0       0       0       0       0       0       0
  8332 ;;      Locals:         0       0       0       0       0       0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0
  8334 ;;      Totals:         0       0       0       0       0       0       0
  8335 ;;Total ram usage:        0 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; This function calls:
  8338 ;;		Nothing
  8339 ;; This function is called by:
  8340 ;;		_read_temperature
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           	psect	text41
  8345  002C92                     __ptext41:
  8346                           	opt stack 0
  8347  002C92                     _BusyADC:
  8348                           	opt stack 29
  8349                           
  8350                           ;adcbusy.c: 28: return(ADCON0bits.GO);
  8351                           
  8352                           ;incstack = 0
  8353  002C92  A2C2               	btfss	4034,1,c	;volatile
  8354  002C94  D002               	goto	u5540
  8355  002C96  0E01               	movlw	1
  8356  002C98  0012               	return	
  8357  002C9A                     u5540:
  8358  002C9A  0E00               	movlw	0
  8359  002C9C  0012               	return	
  8360  002C9E                     __end_of_BusyADC:
  8361                           	opt stack 0
  8362                           tblptru	equ	0xFF8
  8363                           tblptrh	equ	0xFF7
  8364                           tblptrl	equ	0xFF6
  8365                           tablat	equ	0xFF5
  8366                           prodh	equ	0xFF4
  8367                           prodl	equ	0xFF3
  8368                           indf0	equ	0xFEF
  8369                           postinc0	equ	0xFEE
  8370                           fsr0h	equ	0xFEA
  8371                           fsr0l	equ	0xFE9
  8372                           wreg	equ	0xFE8
  8373                           indf1	equ	0xFE7
  8374                           postdec1	equ	0xFE5
  8375                           fsr1h	equ	0xFE2
  8376                           fsr1l	equ	0xFE1
  8377                           indf2	equ	0xFDF
  8378                           postinc2	equ	0xFDE
  8379                           postdec2	equ	0xFDD
  8380                           fsr2h	equ	0xFDA
  8381                           fsr2l	equ	0xFD9
  8382                           status	equ	0xFD8
  8383                           
  8384 ;; *************** function _read_data *****************
  8385 ;; Defined at:
  8386 ;;		line 184 in file "main.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;		None
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;  counter         2   15[COMRAM] int 
  8391 ;;  tla             2   13[COMRAM] int 
  8392 ;;  tha             2   11[COMRAM] int 
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  2    9[COMRAM] int 
  8395 ;; Registers used:
  8396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8402 ;;      Params:         2       0       0       0       0       0       0
  8403 ;;      Locals:         6       0       0       0       0       0       0
  8404 ;;      Temps:          0       0       0       0       0       0       0
  8405 ;;      Totals:         8       0       0       0       0       0       0
  8406 ;;Total ram usage:        8 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    3
  8409 ;; This function calls:
  8410 ;;		_HDByteReadI2C
  8411 ;; This function is called by:
  8412 ;;		_main
  8413 ;;		_print_all_data
  8414 ;; This function uses a non-reentrant model
  8415 ;;
  8416                           
  8417                           	psect	text42
  8418  001FD2                     __ptext42:
  8419                           	opt stack 0
  8420  001FD2                     _read_data:
  8421                           	opt stack 27
  8422                           
  8423                           ;main.c: 186: int counter = block_size;
  8424                           
  8425                           ;incstack = 0
  8426  001FD2  C0BC  F010         	movff	_block_size,read_data@counter
  8427  001FD6  C0BD  F011         	movff	_block_size+1,read_data@counter+1
  8428                           
  8429                           ;main.c: 187: int tla = eeprom_laddress;
  8430  001FDA  C0A8  F00E         	movff	_eeprom_laddress,read_data@tla
  8431  001FDE  6A0F               	clrf	read_data@tla+1,c
  8432                           
  8433                           ;main.c: 188: int tha = eeprom_haddress;
  8434  001FE0  C0A7  F00C         	movff	_eeprom_haddress,read_data@tha
  8435  001FE4  6A0D               	clrf	read_data@tha+1,c
  8436                           
  8437                           ;main.c: 189: while(tla > 0x00 && counter > 0)
  8438  001FE6  D006               	goto	l182
  8439  001FE8                     l4983:
  8440                           
  8441                           ;main.c: 190: {
  8442                           ;main.c: 191: counter--;
  8443  001FE8  0610               	decf	read_data@counter,f,c
  8444  001FEA  A0D8               	btfss	status,0,c
  8445  001FEC  0611               	decf	read_data@counter+1,f,c
  8446                           
  8447                           ;main.c: 192: tla--;
  8448  001FEE  060E               	decf	read_data@tla,f,c
  8449  001FF0  A0D8               	btfss	status,0,c
  8450  001FF2  060F               	decf	read_data@tla+1,f,c
  8451  001FF4                     l182:
  8452  001FF4  BE0F               	btfsc	read_data@tla+1,7,c
  8453  001FF6  D00C               	goto	u5710
  8454  001FF8  500F               	movf	read_data@tla+1,w,c
  8455  001FFA  E103               	bnz	u5700
  8456  001FFC  040E               	decf	read_data@tla,w,c
  8457  001FFE  A0D8               	btfss	status,0,c
  8458  002000  D007               	goto	u5710
  8459  002002                     u5700:
  8460  002002  BE11               	btfsc	read_data@counter+1,7,c
  8461  002004  D005               	goto	u5710
  8462  002006  5011               	movf	read_data@counter+1,w,c
  8463  002008  E1EF               	bnz	l4983
  8464  00200A  0410               	decf	read_data@counter,w,c
  8465  00200C  B0D8               	btfsc	status,0,c
  8466  00200E  D7EC               	goto	l183
  8467  002010                     u5710:
  8468                           
  8469                           ;main.c: 193: }
  8470                           ;main.c: 194: if(counter > 0)
  8471  002010  BE11               	btfsc	read_data@counter+1,7,c
  8472  002012  D021               	goto	l192
  8473  002014  5011               	movf	read_data@counter+1,w,c
  8474  002016  E103               	bnz	u5720
  8475  002018  0410               	decf	read_data@counter,w,c
  8476  00201A  A0D8               	btfss	status,0,c
  8477  00201C  D01C               	goto	l192
  8478  00201E                     u5720:
  8479                           
  8480                           ;main.c: 195: {
  8481                           ;main.c: 196: tla = 0xFF;
  8482  00201E  0E00               	movlw	0
  8483  002020  6E0F               	movwf	read_data@tla+1,c
  8484  002022  680E               	setf	read_data@tla,c
  8485                           
  8486                           ;main.c: 197: if(tha > 0)
  8487  002024  BE0D               	btfsc	read_data@tha+1,7,c
  8488  002026  D014               	goto	l188
  8489  002028  500D               	movf	read_data@tha+1,w,c
  8490  00202A  E103               	bnz	u5730
  8491  00202C  040C               	decf	read_data@tha,w,c
  8492  00202E  A0D8               	btfss	status,0,c
  8493  002030  D00F               	goto	l188
  8494  002032                     u5730:
  8495                           
  8496                           ;main.c: 198: {
  8497                           ;main.c: 199: tha--;
  8498  002032  060C               	decf	read_data@tha,f,c
  8499  002034  A0D8               	btfss	status,0,c
  8500  002036  060D               	decf	read_data@tha+1,f,c
  8501                           
  8502                           ;main.c: 200: while(counter > 0)
  8503  002038  D003               	goto	l189
  8504  00203A                     l4997:
  8505                           
  8506                           ;main.c: 201: {
  8507                           ;main.c: 202: tla--;
  8508  00203A  060E               	decf	read_data@tla,f,c
  8509  00203C  A0D8               	btfss	status,0,c
  8510  00203E  060F               	decf	read_data@tla+1,f,c
  8511  002040                     l189:
  8512  002040  BE11               	btfsc	read_data@counter+1,7,c
  8513  002042  D009               	goto	l192
  8514  002044  5011               	movf	read_data@counter+1,w,c
  8515  002046  E1F9               	bnz	l4997
  8516  002048  0410               	decf	read_data@counter,w,c
  8517  00204A  A0D8               	btfss	status,0,c
  8518  00204C  D004               	goto	l192
  8519  00204E  D7F5               	goto	l190
  8520  002050                     l188:
  8521                           
  8522                           ;main.c: 205: else
  8523                           ;main.c: 206: {
  8524                           ;main.c: 208: return -1;
  8525  002050  680A               	setf	?_read_data,c
  8526  002052  680B               	setf	?_read_data+1,c
  8527  002054  0012               	return	
  8528  002056                     l192:
  8529                           
  8530                           ;main.c: 209: }
  8531                           ;main.c: 210: }
  8532                           ;main.c: 211: if(HDByteReadI2C(0xA0,tha,tla,result,block_size) == 0)
  8533  002056  C00C  F004         	movff	read_data@tha,HDByteReadI2C@HighAdd
  8534  00205A  C00E  F005         	movff	read_data@tla,HDByteReadI2C@LowAdd
  8535  00205E  0EA9               	movlw	low _result
  8536  002060  6E06               	movwf	HDByteReadI2C@data,c
  8537  002062  0E00               	movlw	high _result
  8538  002064  6E07               	movwf	HDByteReadI2C@data+1,c
  8539  002066  C0BC  F008         	movff	_block_size,HDByteReadI2C@length
  8540  00206A  0EA0               	movlw	160
  8541  00206C  ECF3  F011         	call	_HDByteReadI2C
  8542  002070  0900               	iorlw	0
  8543  002072  A4D8               	btfss	status,2,c
  8544  002074  D005               	goto	l194
  8545                           
  8546                           ;main.c: 212: return 0;
  8547  002076  0E00               	movlw	0
  8548  002078  6E0B               	movwf	?_read_data+1,c
  8549  00207A  0E00               	movlw	0
  8550  00207C  6E0A               	movwf	?_read_data,c
  8551  00207E  0012               	return	
  8552  002080                     l194:
  8553                           
  8554                           ;main.c: 213: else return -1;
  8555  002080  680A               	setf	?_read_data,c
  8556  002082  680B               	setf	?_read_data+1,c
  8557  002084  0012               	return	
  8558  002086                     __end_of_read_data:
  8559                           	opt stack 0
  8560                           tblptru	equ	0xFF8
  8561                           tblptrh	equ	0xFF7
  8562                           tblptrl	equ	0xFF6
  8563                           tablat	equ	0xFF5
  8564                           prodh	equ	0xFF4
  8565                           prodl	equ	0xFF3
  8566                           indf0	equ	0xFEF
  8567                           postinc0	equ	0xFEE
  8568                           fsr0h	equ	0xFEA
  8569                           fsr0l	equ	0xFE9
  8570                           wreg	equ	0xFE8
  8571                           indf1	equ	0xFE7
  8572                           postdec1	equ	0xFE5
  8573                           fsr1h	equ	0xFE2
  8574                           fsr1l	equ	0xFE1
  8575                           indf2	equ	0xFDF
  8576                           postinc2	equ	0xFDE
  8577                           postdec2	equ	0xFDD
  8578                           fsr2h	equ	0xFDA
  8579                           fsr2l	equ	0xFD9
  8580                           status	equ	0xFD8
  8581                           
  8582 ;; *************** function _HDByteReadI2C *****************
  8583 ;; Defined at:
  8584 ;;		line 72 in file "main.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  ControlByte     1    wreg     unsigned char 
  8587 ;;  HighAdd         1    3[COMRAM] unsigned char 
  8588 ;;  LowAdd          1    4[COMRAM] unsigned char 
  8589 ;;  data            2    5[COMRAM] PTR unsigned char 
  8590 ;;		 -> result(6), 
  8591 ;;  length          1    7[COMRAM] unsigned char 
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;  ControlByte     1    8[COMRAM] unsigned char 
  8594 ;; Return value:  Size  Location     Type
  8595 ;;                  1    wreg      unsigned char 
  8596 ;; Registers used:
  8597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8598 ;; Tracked objects:
  8599 ;;		On entry : 0/0
  8600 ;;		On exit  : 0/0
  8601 ;;		Unchanged: 0/0
  8602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8603 ;;      Params:         5       0       0       0       0       0       0
  8604 ;;      Locals:         1       0       0       0       0       0       0
  8605 ;;      Temps:          0       0       0       0       0       0       0
  8606 ;;      Totals:         6       0       0       0       0       0       0
  8607 ;;Total ram usage:        6 bytes
  8608 ;; Hardware stack levels used:    1
  8609 ;; Hardware stack levels required when called:    2
  8610 ;; This function calls:
  8611 ;;		_IdleI2C
  8612 ;;		_WriteI2C
  8613 ;;		_getsI2C
  8614 ;; This function is called by:
  8615 ;;		_read_data
  8616 ;; This function uses a non-reentrant model
  8617 ;;
  8618                           
  8619                           	psect	text43
  8620  0023E6                     __ptext43:
  8621                           	opt stack 0
  8622  0023E6                     _HDByteReadI2C:
  8623                           	opt stack 27
  8624                           
  8625                           ;incstack = 0
  8626                           ;HDByteReadI2C@ControlByte stored from wreg
  8627  0023E6  6E09               	movwf	HDByteReadI2C@ControlByte,c
  8628                           
  8629                           ;main.c: 74: IdleI2C();
  8630  0023E8  EC19  F016         	call	_IdleI2C	;wreg free
  8631                           
  8632                           ;main.c: 75: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  8633  0023EC  80C5               	bsf	4037,0,c	;volatile
  8634  0023EE  B0C5               	btfsc	4037,0,c	;volatile
  8635  0023F0  D7FE               	goto	l115
  8636  0023F2                     u5370:
  8637                           
  8638                           ;main.c: 76: while ( SSPCON2bits.SEN );
  8639  0023F2  B0C5               	btfsc	4037,0,c	;volatile
  8640  0023F4  D7FE               	goto	u5370
  8641                           
  8642                           ;main.c: 77: WriteI2C( ControlByte );
  8643  0023F6  5009               	movf	HDByteReadI2C@ControlByte,w,c
  8644  0023F8  EC01  F013         	call	_WriteI2C
  8645                           
  8646                           ;main.c: 78: IdleI2C();
  8647  0023FC  EC19  F016         	call	_IdleI2C	;wreg free
  8648                           
  8649                           ;main.c: 79: WriteI2C( HighAdd );
  8650  002400  5004               	movf	HDByteReadI2C@HighAdd,w,c
  8651  002402  EC01  F013         	call	_WriteI2C
  8652                           
  8653                           ;main.c: 80: IdleI2C();
  8654  002406  EC19  F016         	call	_IdleI2C	;wreg free
  8655  00240A  B2C5               	btfsc	4037,1,c	;volatile
  8656  00240C  D7FE               	goto	l121
  8657                           
  8658                           ;main.c: 82: WriteI2C( LowAdd );
  8659  00240E  5005               	movf	HDByteReadI2C@LowAdd,w,c
  8660  002410  EC01  F013         	call	_WriteI2C
  8661                           
  8662                           ;main.c: 83: IdleI2C();
  8663  002414  EC19  F016         	call	_IdleI2C	;wreg free
  8664                           
  8665                           ;main.c: 84: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  8666  002418  82C5               	bsf	4037,1,c	;volatile
  8667  00241A  B2C5               	btfsc	4037,1,c	;volatile
  8668  00241C  D7FE               	goto	l124
  8669  00241E                     u5400:
  8670                           
  8671                           ;main.c: 85: while ( SSPCON2bits.RSEN );
  8672  00241E  B2C5               	btfsc	4037,1,c	;volatile
  8673  002420  D7FE               	goto	u5400
  8674                           
  8675                           ;main.c: 86: WriteI2C( ControlByte | 0x01 );
  8676  002422  5009               	movf	HDByteReadI2C@ControlByte,w,c
  8677  002424  0901               	iorlw	1
  8678  002426  EC01  F013         	call	_WriteI2C
  8679                           
  8680                           ;main.c: 87: IdleI2C();
  8681  00242A  EC19  F016         	call	_IdleI2C	;wreg free
  8682                           
  8683                           ;main.c: 88: getsI2C( data, length );
  8684  00242E  C006  F001         	movff	HDByteReadI2C@data,getsI2C@rdptr
  8685  002432  C007  F002         	movff	HDByteReadI2C@data+1,getsI2C@rdptr+1
  8686  002436  C008  F003         	movff	HDByteReadI2C@length,getsI2C@length
  8687  00243A  EC0C  F014         	call	_getsI2C	;wreg free
  8688                           
  8689                           ;main.c: 89: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  8690  00243E  8AC5               	bsf	4037,5,c	;volatile
  8691  002440  88C5               	bsf	4037,4,c	;volatile
  8692  002442  B8C5               	btfsc	4037,4,c	;volatile
  8693  002444  D7FE               	goto	l130
  8694  002446                     u5420:
  8695                           
  8696                           ;main.c: 90: while ( SSPCON2bits.ACKEN );
  8697  002446  B8C5               	btfsc	4037,4,c	;volatile
  8698  002448  D7FE               	goto	u5420
  8699                           
  8700                           ;main.c: 91: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  8701  00244A  84C5               	bsf	4037,2,c	;volatile
  8702  00244C  B4C5               	btfsc	4037,2,c	;volatile
  8703  00244E  D7FE               	goto	l136
  8704  002450                     u5440:
  8705                           
  8706                           ;main.c: 92: while ( SSPCON2bits.PEN );
  8707  002450  B4C5               	btfsc	4037,2,c	;volatile
  8708  002452  D7FE               	goto	u5440
  8709                           
  8710                           ;main.c: 93: return ( 0 );
  8711  002454  0E00               	movlw	0
  8712  002456  0012               	return	
  8713  002458                     __end_of_HDByteReadI2C:
  8714                           	opt stack 0
  8715                           tblptru	equ	0xFF8
  8716                           tblptrh	equ	0xFF7
  8717                           tblptrl	equ	0xFF6
  8718                           tablat	equ	0xFF5
  8719                           prodh	equ	0xFF4
  8720                           prodl	equ	0xFF3
  8721                           indf0	equ	0xFEF
  8722                           postinc0	equ	0xFEE
  8723                           fsr0h	equ	0xFEA
  8724                           fsr0l	equ	0xFE9
  8725                           wreg	equ	0xFE8
  8726                           indf1	equ	0xFE7
  8727                           postdec1	equ	0xFE5
  8728                           fsr1h	equ	0xFE2
  8729                           fsr1l	equ	0xFE1
  8730                           indf2	equ	0xFDF
  8731                           postinc2	equ	0xFDE
  8732                           postdec2	equ	0xFDD
  8733                           fsr2h	equ	0xFDA
  8734                           fsr2l	equ	0xFD9
  8735                           status	equ	0xFD8
  8736                           
  8737 ;; *************** function _getsI2C *****************
  8738 ;; Defined at:
  8739 ;;		line 17 in file "i2c_gets.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;  rdptr           2    0[COMRAM] PTR unsigned char 
  8742 ;;		 -> result(6), 
  8743 ;;  length          1    2[COMRAM] unsigned char 
  8744 ;; Auto vars:     Size  Location     Type
  8745 ;;		None
  8746 ;; Return value:  Size  Location     Type
  8747 ;;                  1    wreg      char 
  8748 ;; Registers used:
  8749 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8750 ;; Tracked objects:
  8751 ;;		On entry : 0/0
  8752 ;;		On exit  : 0/0
  8753 ;;		Unchanged: 0/0
  8754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8755 ;;      Params:         3       0       0       0       0       0       0
  8756 ;;      Locals:         0       0       0       0       0       0       0
  8757 ;;      Temps:          0       0       0       0       0       0       0
  8758 ;;      Totals:         3       0       0       0       0       0       0
  8759 ;;Total ram usage:        3 bytes
  8760 ;; Hardware stack levels used:    1
  8761 ;; Hardware stack levels required when called:    1
  8762 ;; This function calls:
  8763 ;;		_ReadI2C
  8764 ;; This function is called by:
  8765 ;;		_HDByteReadI2C
  8766 ;;		_EESequentialRead
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	text44
  8771  002818                     __ptext44:
  8772                           	opt stack 0
  8773  002818                     _getsI2C:
  8774                           	opt stack 27
  8775                           
  8776                           ;i2c_gets.c: 19: while ( length-- )
  8777                           
  8778                           ;incstack = 0
  8779  002818  D020               	goto	u4850
  8780  00281A                     
  8781                           ;i2c_gets.c: 20: {
  8782                           ;i2c_gets.c: 21: *rdptr++ = ReadI2C();
  8783  00281A  EC00  F016         	call	_ReadI2C	;wreg free
  8784  00281E  C001  FFD9         	movff	getsI2C@rdptr,fsr2l
  8785  002822  C002  FFDA         	movff	getsI2C@rdptr+1,fsr2h
  8786  002826  6EDF               	movwf	indf2,c
  8787  002828  4A01               	infsnz	getsI2C@rdptr,f,c
  8788  00282A  2A02               	incf	getsI2C@rdptr+1,f,c
  8789  00282C  B6C5               	btfsc	4037,3,c	;volatile
  8790  00282E  D7FE               	goto	l786
  8791                           
  8792                           ;i2c_gets.c: 24: if ( PIR2bits.BCLIF )
  8793  002830  A6A1               	btfss	4001,3,c	;volatile
  8794  002832  D002               	goto	l788
  8795                           
  8796                           ;i2c_gets.c: 25: {
  8797                           ;i2c_gets.c: 26: return ( -1 );
  8798  002834  0EFF               	movlw	255
  8799  002836  0012               	return	
  8800  002838                     l788:
  8801                           
  8802                           ;i2c_gets.c: 27: }
  8803                           ;i2c_gets.c: 29: if( ((SSPCON1&0x0F)==0x08) || ((SSPCON1&0x0F)==0x0B) )
  8804  002838  50C6               	movf	4038,w,c	;volatile
  8805  00283A  0B0F               	andlw	15
  8806  00283C  0A08               	xorlw	8
  8807  00283E  B4D8               	btfsc	status,2,c
  8808  002840  D005               	goto	u4830
  8809  002842  50C6               	movf	4038,w,c	;volatile
  8810  002844  0B0F               	andlw	15
  8811  002846  0A0B               	xorlw	11
  8812  002848  A4D8               	btfss	status,2,c
  8813  00284A  D007               	goto	u4850
  8814  00284C                     u4830:
  8815                           
  8816                           ;i2c_gets.c: 30: {
  8817                           ;i2c_gets.c: 31: if ( length )
  8818  00284C  5003               	movf	getsI2C@length,w,c
  8819  00284E  B4D8               	btfsc	status,2,c
  8820  002850  D004               	goto	u4850
  8821                           
  8822                           ;i2c_gets.c: 32: {
  8823                           ;i2c_gets.c: 33: SSPCON2bits.ACKDT = 0;
  8824  002852  9AC5               	bcf	4037,5,c	;volatile
  8825                           
  8826                           ;i2c_gets.c: 34: SSPCON2bits.ACKEN = 1;
  8827  002854  88C5               	bsf	4037,4,c	;volatile
  8828  002856  B8C5               	btfsc	4037,4,c	;volatile
  8829  002858  D7FE               	goto	l795
  8830  00285A                     u4850:
  8831  00285A  0603               	decf	getsI2C@length,f,c
  8832  00285C  2803               	incf	getsI2C@length,w,c
  8833  00285E  A4D8               	btfss	status,2,c
  8834  002860  D7DC               	goto	l784
  8835                           
  8836                           ;i2c_gets.c: 36: }
  8837                           ;i2c_gets.c: 37: }
  8838                           ;i2c_gets.c: 39: }
  8839                           ;i2c_gets.c: 40: return ( 0 );
  8840  002862  0E00               	movlw	0
  8841  002864  0012               	return	
  8842  002866                     __end_of_getsI2C:
  8843                           	opt stack 0
  8844                           tblptru	equ	0xFF8
  8845                           tblptrh	equ	0xFF7
  8846                           tblptrl	equ	0xFF6
  8847                           tablat	equ	0xFF5
  8848                           prodh	equ	0xFF4
  8849                           prodl	equ	0xFF3
  8850                           indf0	equ	0xFEF
  8851                           postinc0	equ	0xFEE
  8852                           fsr0h	equ	0xFEA
  8853                           fsr0l	equ	0xFE9
  8854                           wreg	equ	0xFE8
  8855                           indf1	equ	0xFE7
  8856                           postdec1	equ	0xFE5
  8857                           fsr1h	equ	0xFE2
  8858                           fsr1l	equ	0xFE1
  8859                           indf2	equ	0xFDF
  8860                           postinc2	equ	0xFDE
  8861                           postdec2	equ	0xFDD
  8862                           fsr2h	equ	0xFDA
  8863                           fsr2l	equ	0xFD9
  8864                           status	equ	0xFD8
  8865                           
  8866 ;; *************** function _ReadI2C *****************
  8867 ;; Defined at:
  8868 ;;		line 11 in file "i2c_read.c"
  8869 ;; Parameters:    Size  Location     Type
  8870 ;;		None
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;		None
  8873 ;; Return value:  Size  Location     Type
  8874 ;;                  1    wreg      unsigned char 
  8875 ;; Registers used:
  8876 ;;		wreg, status,2, status,0
  8877 ;; Tracked objects:
  8878 ;;		On entry : 0/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8882 ;;      Params:         0       0       0       0       0       0       0
  8883 ;;      Locals:         0       0       0       0       0       0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0
  8885 ;;      Totals:         0       0       0       0       0       0       0
  8886 ;;Total ram usage:        0 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; This function calls:
  8889 ;;		Nothing
  8890 ;; This function is called by:
  8891 ;;		_getsI2C
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           	psect	text45
  8896  002C00                     __ptext45:
  8897                           	opt stack 0
  8898  002C00                     _ReadI2C:
  8899                           	opt stack 27
  8900                           
  8901                           ;i2c_read.c: 13: if( ((SSPCON1&0x0F)==0x08) || ((SSPCON1&0x0F)==0x0B) )
  8902                           
  8903                           ;incstack = 0
  8904  002C00  50C6               	movf	4038,w,c	;volatile
  8905  002C02  0B0F               	andlw	15
  8906  002C04  0A08               	xorlw	8
  8907  002C06  B4D8               	btfsc	status,2,c
  8908  002C08  D004               	goto	u4280
  8909  002C0A  50C6               	movf	4038,w,c	;volatile
  8910  002C0C  0B0F               	andlw	15
  8911  002C0E  0A0B               	xorlw	11
  8912  002C10  B4D8               	btfsc	status,2,c
  8913  002C12                     u4280:
  8914                           
  8915                           ;i2c_read.c: 14: SSPCON2bits.RCEN = 1;
  8916  002C12  86C5               	bsf	4037,3,c	;volatile
  8917  002C14                     
  8918                           ;i2c_read.c: 15: while ( !SSPSTATbits.BF );
  8919  002C14  A0C7               	btfss	4039,0,c	;volatile
  8920  002C16  D7FE               	goto	l857
  8921                           
  8922                           ;i2c_read.c: 16: return ( SSPBUF );
  8923  002C18  50C9               	movf	4041,w,c	;volatile
  8924  002C1A  0012               	return	
  8925  002C1C                     __end_of_ReadI2C:
  8926                           	opt stack 0
  8927                           tblptru	equ	0xFF8
  8928                           tblptrh	equ	0xFF7
  8929                           tblptrl	equ	0xFF6
  8930                           tablat	equ	0xFF5
  8931                           prodh	equ	0xFF4
  8932                           prodl	equ	0xFF3
  8933                           indf0	equ	0xFEF
  8934                           postinc0	equ	0xFEE
  8935                           fsr0h	equ	0xFEA
  8936                           fsr0l	equ	0xFE9
  8937                           wreg	equ	0xFE8
  8938                           indf1	equ	0xFE7
  8939                           postdec1	equ	0xFE5
  8940                           fsr1h	equ	0xFE2
  8941                           fsr1l	equ	0xFE1
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           fsr2h	equ	0xFDA
  8946                           fsr2l	equ	0xFD9
  8947                           status	equ	0xFD8
  8948                           
  8949 ;; *************** function _WriteI2C *****************
  8950 ;; Defined at:
  8951 ;;		line 12 in file "i2c_writ.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;  data_out        1    wreg     unsigned char 
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  data_out        1    1[COMRAM] unsigned char 
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      char 
  8958 ;; Registers used:
  8959 ;;		wreg, status,2, status,0, cstack
  8960 ;; Tracked objects:
  8961 ;;		On entry : 0/0
  8962 ;;		On exit  : 0/0
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8965 ;;      Params:         0       0       0       0       0       0       0
  8966 ;;      Locals:         1       0       0       0       0       0       0
  8967 ;;      Temps:          0       0       0       0       0       0       0
  8968 ;;      Totals:         1       0       0       0       0       0       0
  8969 ;;Total ram usage:        1 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    1
  8972 ;; This function calls:
  8973 ;;		_IdleI2C
  8974 ;; This function is called by:
  8975 ;;		_HDByteWriteI2C
  8976 ;;		_HDByteReadI2C
  8977 ;;		_EEAckPolling
  8978 ;;		_EEByteWrite
  8979 ;;		_EECurrentAddRead
  8980 ;;		_EEPageWrite
  8981 ;;		_EERandomRead
  8982 ;;		_EESequentialRead
  8983 ;;		_putsI2C
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text46
  8988  002602                     __ptext46:
  8989                           	opt stack 0
  8990  002602                     _WriteI2C:
  8991                           	opt stack 26
  8992                           
  8993                           ;incstack = 0
  8994                           ;WriteI2C@data_out stored from wreg
  8995  002602  6E02               	movwf	WriteI2C@data_out,c
  8996                           
  8997                           ;i2c_writ.c: 14: SSPBUF = data_out;
  8998  002604  C002  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  8999                           
  9000                           ;i2c_writ.c: 15: if ( SSPCON1bits.WCOL )
  9001  002608  AEC6               	btfss	4038,7,c	;volatile
  9002  00260A  D002               	goto	l895
  9003                           
  9004                           ;i2c_writ.c: 16: return ( -1 );
  9005  00260C  0EFF               	movlw	255
  9006  00260E  0012               	return	
  9007  002610                     l895:
  9008                           
  9009                           ;i2c_writ.c: 17: else
  9010                           ;i2c_writ.c: 18: {
  9011                           ;i2c_writ.c: 19: if( ((SSPCON1&0x0F)!=0x08) && ((SSPCON1&0x0F)!=0x0B) )
  9012  002610  50C6               	movf	4038,w,c	;volatile
  9013  002612  0B0F               	andlw	15
  9014  002614  0A08               	xorlw	8
  9015  002616  B4D8               	btfsc	status,2,c
  9016  002618  D00F               	goto	l898
  9017  00261A  50C6               	movf	4038,w,c	;volatile
  9018  00261C  0B0F               	andlw	15
  9019  00261E  0A0B               	xorlw	11
  9020  002620  B4D8               	btfsc	status,2,c
  9021  002622  D00A               	goto	l898
  9022                           
  9023                           ;i2c_writ.c: 20: {
  9024                           ;i2c_writ.c: 21: SSPCON1bits.CKP = 1;
  9025  002624  88C6               	bsf	4038,4,c	;volatile
  9026  002626  A69E               	btfss	3998,3,c	;volatile
  9027  002628  D7FE               	goto	l900
  9028                           
  9029                           ;i2c_writ.c: 24: if ( ( !SSPSTATbits.R_W ) && ( !SSPSTATbits.BF ) )
  9030  00262A  A4C7               	btfss	4039,2,c	;volatile
  9031  00262C  B0C7               	btfsc	4039,0,c	;volatile
  9032  00262E  D002               	goto	l902
  9033                           
  9034                           ;i2c_writ.c: 25: {
  9035                           ;i2c_writ.c: 26: return ( -2 );
  9036  002630  0EFE               	movlw	254
  9037                           
  9038                           ;i2c_writ.c: 27: }
  9039  002632  0012               	return	
  9040  002634                     l902:
  9041                           
  9042                           ;i2c_writ.c: 28: else
  9043                           ;i2c_writ.c: 29: {
  9044                           ;i2c_writ.c: 30: return ( 0 );
  9045  002634  0E00               	movlw	0
  9046                           
  9047                           ;i2c_writ.c: 31: }
  9048                           ;i2c_writ.c: 32: }
  9049  002636  0012               	return	
  9050  002638                     l898:
  9051                           
  9052                           ;i2c_writ.c: 33: else if( ((SSPCON1&0x0F)==0x08) || ((SSPCON1&0x0F)==0x0B) )
  9053  002638  50C6               	movf	4038,w,c	;volatile
  9054  00263A  0B0F               	andlw	15
  9055  00263C  0A08               	xorlw	8
  9056  00263E  B4D8               	btfsc	status,2,c
  9057  002640  D005               	goto	u3630
  9058  002642  50C6               	movf	4038,w,c	;volatile
  9059  002644  0B0F               	andlw	15
  9060  002646  0A0B               	xorlw	11
  9061  002648  A4D8               	btfss	status,2,c
  9062  00264A  0012               	return	
  9063  00264C                     u3630:
  9064                           
  9065                           ;i2c_writ.c: 34: {
  9066                           ;i2c_writ.c: 35: while( SSPSTATbits.BF );
  9067  00264C  B0C7               	btfsc	4039,0,c	;volatile
  9068  00264E  D7FE               	goto	u3630
  9069                           
  9070                           ;i2c_writ.c: 36: IdleI2C();
  9071  002650  EC19  F016         	call	_IdleI2C	;wreg free
  9072                           
  9073                           ;i2c_writ.c: 37: if ( SSPCON2bits.ACKSTAT )
  9074  002654  ACC5               	btfss	4037,6,c	;volatile
  9075  002656  D002               	goto	l911
  9076                           
  9077                           ;i2c_writ.c: 38: return ( -2 );
  9078  002658  0EFE               	movlw	254
  9079  00265A  0012               	return	
  9080  00265C                     l911:
  9081                           
  9082                           ;i2c_writ.c: 39: else return ( 0 );
  9083  00265C  0E00               	movlw	0
  9084  00265E  0012               	return	
  9085  002660                     __end_of_WriteI2C:
  9086                           	opt stack 0
  9087                           tblptru	equ	0xFF8
  9088                           tblptrh	equ	0xFF7
  9089                           tblptrl	equ	0xFF6
  9090                           tablat	equ	0xFF5
  9091                           prodh	equ	0xFF4
  9092                           prodl	equ	0xFF3
  9093                           indf0	equ	0xFEF
  9094                           postinc0	equ	0xFEE
  9095                           fsr0h	equ	0xFEA
  9096                           fsr0l	equ	0xFE9
  9097                           wreg	equ	0xFE8
  9098                           indf1	equ	0xFE7
  9099                           postdec1	equ	0xFE5
  9100                           fsr1h	equ	0xFE2
  9101                           fsr1l	equ	0xFE1
  9102                           indf2	equ	0xFDF
  9103                           postinc2	equ	0xFDE
  9104                           postdec2	equ	0xFDD
  9105                           fsr2h	equ	0xFDA
  9106                           fsr2l	equ	0xFD9
  9107                           status	equ	0xFD8
  9108                           
  9109 ;; *************** function _IdleI2C *****************
  9110 ;; Defined at:
  9111 ;;		line 24 in file "i2c_idle.c"
  9112 ;; Parameters:    Size  Location     Type
  9113 ;;		None
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;		None
  9116 ;; Return value:  Size  Location     Type
  9117 ;;                  1    wreg      void 
  9118 ;; Registers used:
  9119 ;;		wreg, status,2, status,0
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9125 ;;      Params:         0       0       0       0       0       0       0
  9126 ;;      Locals:         0       0       0       0       0       0       0
  9127 ;;      Temps:          1       0       0       0       0       0       0
  9128 ;;      Totals:         1       0       0       0       0       0       0
  9129 ;;Total ram usage:        1 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; This function calls:
  9132 ;;		Nothing
  9133 ;; This function is called by:
  9134 ;;		_HDByteWriteI2C
  9135 ;;		_HDByteReadI2C
  9136 ;;		_EEAckPolling
  9137 ;;		_WriteI2C
  9138 ;;		_EEByteWrite
  9139 ;;		_EECurrentAddRead
  9140 ;;		_EEPageWrite
  9141 ;;		_EERandomRead
  9142 ;;		_EESequentialRead
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           	psect	text47
  9147  002C32                     __ptext47:
  9148                           	opt stack 0
  9149  002C32                     _IdleI2C:
  9150                           	opt stack 26
  9151                           
  9152                           ;i2c_idle.c: 27: continue;
  9153                           
  9154                           ;i2c_idle.c: 26: while ( ( SSPCON2 & 0x1F ) || ( SSPSTATbits.R_W ) )
  9155                           
  9156                           ;incstack = 0
  9157  002C32  CFC5 F001          	movff	4037,??_IdleI2C	;volatile
  9158  002C36  0E1F               	movlw	31
  9159  002C38  1601               	andwf	??_IdleI2C,f,c
  9160  002C3A  A4D8               	btfss	status,2,c
  9161  002C3C  D7FA               	goto	_IdleI2C
  9162  002C3E  A4C7               	btfss	4039,2,c	;volatile
  9163  002C40  0012               	return	
  9164  002C42  D7F7               	goto	_IdleI2C
  9165  002C44                     __end_of_IdleI2C:
  9166                           	opt stack 0
  9167                           tblptru	equ	0xFF8
  9168                           tblptrh	equ	0xFF7
  9169                           tblptrl	equ	0xFF6
  9170                           tablat	equ	0xFF5
  9171                           prodh	equ	0xFF4
  9172                           prodl	equ	0xFF3
  9173                           indf0	equ	0xFEF
  9174                           postinc0	equ	0xFEE
  9175                           fsr0h	equ	0xFEA
  9176                           fsr0l	equ	0xFE9
  9177                           wreg	equ	0xFE8
  9178                           indf1	equ	0xFE7
  9179                           postdec1	equ	0xFE5
  9180                           fsr1h	equ	0xFE2
  9181                           fsr1l	equ	0xFE1
  9182                           indf2	equ	0xFDF
  9183                           postinc2	equ	0xFDE
  9184                           postdec2	equ	0xFDD
  9185                           fsr2h	equ	0xFDA
  9186                           fsr2l	equ	0xFD9
  9187                           status	equ	0xFD8
  9188                           
  9189 ;; *************** function _initTimer *****************
  9190 ;; Defined at:
  9191 ;;		line 129 in file "main.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;		None
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;  timer_value     2    5[COMRAM] unsigned int 
  9196 ;;  timer_config    1    7[COMRAM] unsigned char 
  9197 ;;  timer_config    1    4[COMRAM] unsigned char 
  9198 ;; Return value:  Size  Location     Type
  9199 ;;                  1    wreg      void 
  9200 ;; Registers used:
  9201 ;;		wreg, status,2, status,0, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9207 ;;      Params:         0       0       0       0       0       0       0
  9208 ;;      Locals:         4       0       0       0       0       0       0
  9209 ;;      Temps:          0       0       0       0       0       0       0
  9210 ;;      Totals:         4       0       0       0       0       0       0
  9211 ;;Total ram usage:        4 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    1
  9214 ;; This function calls:
  9215 ;;		_OpenTimer1
  9216 ;;		_WriteTimer1
  9217 ;; This function is called by:
  9218 ;;		_main
  9219 ;; This function uses a non-reentrant model
  9220 ;;
  9221                           
  9222                           	psect	text48
  9223  002B34                     __ptext48:
  9224                           	opt stack 0
  9225  002B34                     _initTimer:
  9226                           	opt stack 29
  9227                           
  9228                           ;main.c: 131: unsigned char timer_config1=0x00;
  9229                           
  9230                           ;incstack = 0
  9231  002B34  0E00               	movlw	0
  9232  002B36  6E08               	movwf	initTimer@timer_config1,c
  9233                           
  9234                           ;main.c: 132: unsigned char timer_config2=0x00;
  9235  002B38  0E00               	movlw	0
  9236  002B3A  6E05               	movwf	initTimer@timer_config2,c
  9237                           
  9238                           ;main.c: 133: unsigned int timer_value=0x00;
  9239  002B3C  0E00               	movlw	0
  9240  002B3E  6E07               	movwf	initTimer@timer_value+1,c
  9241  002B40  0E00               	movlw	0
  9242  002B42  6E06               	movwf	initTimer@timer_value,c
  9243                           
  9244                           ;main.c: 134: timer_config1 = 0b11111111 & 0b11111111 & 0b11011111 & 0b11111111 & 0b1111
      +                          1111 & 0b11111111;
  9245  002B44  0EDF               	movlw	223
  9246  002B46  6E08               	movwf	initTimer@timer_config1,c
  9247                           
  9248                           ;main.c: 135: OpenTimer1(timer_config1);
  9249  002B48  5008               	movf	initTimer@timer_config1,w,c
  9250  002B4A  EC85  F015         	call	_OpenTimer1
  9251                           
  9252                           ;main.c: 136: WriteTimer1(timer_value);
  9253  002B4E  C006  F001         	movff	initTimer@timer_value,WriteTimer1@timer1
  9254  002B52  C007  F002         	movff	initTimer@timer_value+1,WriteTimer1@timer1+1
  9255  002B56  EC22  F016         	call	_WriteTimer1	;wreg free
  9256  002B5A  0012               	return		;funcret
  9257  002B5C                     __end_of_initTimer:
  9258                           	opt stack 0
  9259                           tblptru	equ	0xFF8
  9260                           tblptrh	equ	0xFF7
  9261                           tblptrl	equ	0xFF6
  9262                           tablat	equ	0xFF5
  9263                           prodh	equ	0xFF4
  9264                           prodl	equ	0xFF3
  9265                           indf0	equ	0xFEF
  9266                           postinc0	equ	0xFEE
  9267                           fsr0h	equ	0xFEA
  9268                           fsr0l	equ	0xFE9
  9269                           wreg	equ	0xFE8
  9270                           indf1	equ	0xFE7
  9271                           postdec1	equ	0xFE5
  9272                           fsr1h	equ	0xFE2
  9273                           fsr1l	equ	0xFE1
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           fsr2h	equ	0xFDA
  9278                           fsr2l	equ	0xFD9
  9279                           status	equ	0xFD8
  9280                           
  9281 ;; *************** function _WriteTimer1 *****************
  9282 ;; Defined at:
  9283 ;;		line 14 in file "t1write.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;  timer1          2    0[COMRAM] unsigned int 
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;  timer           2    2[COMRAM] struct Timers
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  1    wreg      void 
  9290 ;; Registers used:
  9291 ;;		None
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9297 ;;      Params:         2       0       0       0       0       0       0
  9298 ;;      Locals:         2       0       0       0       0       0       0
  9299 ;;      Temps:          0       0       0       0       0       0       0
  9300 ;;      Totals:         4       0       0       0       0       0       0
  9301 ;;Total ram usage:        4 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; This function calls:
  9304 ;;		Nothing
  9305 ;; This function is called by:
  9306 ;;		_initTimer
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           	psect	text49
  9311  002C44                     __ptext49:
  9312                           	opt stack 0
  9313  002C44                     _WriteTimer1:
  9314                           	opt stack 29
  9315                           
  9316                           ;t1write.c: 16: union Timers timer;
  9317                           ;t1write.c: 18: timer.lt = timer1;
  9318                           
  9319                           ;incstack = 0
  9320  002C44  C001  F003         	movff	WriteTimer1@timer1,WriteTimer1@timer
  9321  002C48  C002  F004         	movff	WriteTimer1@timer1+1,WriteTimer1@timer+1
  9322                           
  9323                           ;t1write.c: 20: TMR1H = timer.bt[1];
  9324  002C4C  C004  FFCF         	movff	WriteTimer1@timer+1,4047	;volatile
  9325                           
  9326                           ;t1write.c: 21: TMR1L = timer.bt[0];
  9327  002C50  C003  FFCE         	movff	WriteTimer1@timer,4046	;volatile
  9328  002C54  0012               	return		;funcret
  9329  002C56                     __end_of_WriteTimer1:
  9330                           	opt stack 0
  9331                           tblptru	equ	0xFF8
  9332                           tblptrh	equ	0xFF7
  9333                           tblptrl	equ	0xFF6
  9334                           tablat	equ	0xFF5
  9335                           prodh	equ	0xFF4
  9336                           prodl	equ	0xFF3
  9337                           indf0	equ	0xFEF
  9338                           postinc0	equ	0xFEE
  9339                           fsr0h	equ	0xFEA
  9340                           fsr0l	equ	0xFE9
  9341                           wreg	equ	0xFE8
  9342                           indf1	equ	0xFE7
  9343                           postdec1	equ	0xFE5
  9344                           fsr1h	equ	0xFE2
  9345                           fsr1l	equ	0xFE1
  9346                           indf2	equ	0xFDF
  9347                           postinc2	equ	0xFDE
  9348                           postdec2	equ	0xFDD
  9349                           fsr2h	equ	0xFDA
  9350                           fsr2l	equ	0xFD9
  9351                           status	equ	0xFD8
  9352                           
  9353 ;; *************** function _OpenTimer1 *****************
  9354 ;; Defined at:
  9355 ;;		line 16 in file "t1open.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;  config          1    wreg     unsigned char 
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;  config          1    0[COMRAM] unsigned char 
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  1    wreg      void 
  9362 ;; Registers used:
  9363 ;;		wreg, status,2, status,0
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9369 ;;      Params:         0       0       0       0       0       0       0
  9370 ;;      Locals:         1       0       0       0       0       0       0
  9371 ;;      Temps:          0       0       0       0       0       0       0
  9372 ;;      Totals:         1       0       0       0       0       0       0
  9373 ;;Total ram usage:        1 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; This function calls:
  9376 ;;		Nothing
  9377 ;; This function is called by:
  9378 ;;		_initTimer
  9379 ;; This function uses a non-reentrant model
  9380 ;;
  9381                           
  9382                           	psect	text50
  9383  002B0A                     __ptext50:
  9384                           	opt stack 0
  9385  002B0A                     _OpenTimer1:
  9386                           	opt stack 29
  9387                           
  9388                           ;incstack = 0
  9389                           ;OpenTimer1@config stored from wreg
  9390  002B0A  6E01               	movwf	OpenTimer1@config,c
  9391                           
  9392                           ;t1open.c: 18: T1CON = (0x7e & config);
  9393  002B0C  5001               	movf	OpenTimer1@config,w,c
  9394  002B0E  0B7E               	andlw	126
  9395  002B10  6ECD               	movwf	4045,c	;volatile
  9396                           
  9397                           ;t1open.c: 21: if( config & 0x40 )
  9398  002B12  AC01               	btfss	OpenTimer1@config,6,c
  9399  002B14  D002               	goto	l934
  9400                           
  9401                           ;t1open.c: 22: T1CONbits.RD16 = 1;
  9402  002B16  8ECD               	bsf	4045,7,c	;volatile
  9403  002B18  D001               	goto	l935
  9404  002B1A                     l934:
  9405                           
  9406                           ;t1open.c: 23: else
  9407                           ;t1open.c: 24: T1CONbits.RD16 = 0;
  9408  002B1A  9ECD               	bcf	4045,7,c	;volatile
  9409  002B1C                     l935:
  9410                           
  9411                           ;t1open.c: 26: TMR1H=0;
  9412  002B1C  0E00               	movlw	0
  9413  002B1E  6ECF               	movwf	4047,c	;volatile
  9414                           
  9415                           ;t1open.c: 27: TMR1L=0;
  9416  002B20  0E00               	movlw	0
  9417  002B22  6ECE               	movwf	4046,c	;volatile
  9418                           
  9419                           ;t1open.c: 28: PIR1bits.TMR1IF=0;
  9420  002B24  909E               	bcf	3998,0,c	;volatile
  9421                           
  9422                           ;t1open.c: 30: if(config&0x80)
  9423  002B26  AE01               	btfss	OpenTimer1@config,7,c
  9424  002B28  D002               	goto	l936
  9425                           
  9426                           ;t1open.c: 31: PIE1bits.TMR1IE=1;
  9427  002B2A  809D               	bsf	3997,0,c	;volatile
  9428  002B2C  D001               	goto	l937
  9429  002B2E                     l936:
  9430                           
  9431                           ;t1open.c: 32: else
  9432                           ;t1open.c: 33: PIE1bits.TMR1IE=0;
  9433  002B2E  909D               	bcf	3997,0,c	;volatile
  9434  002B30                     l937:
  9435                           
  9436                           ;t1open.c: 35: T1CONbits.TMR1ON = 1;
  9437  002B30  80CD               	bsf	4045,0,c	;volatile
  9438  002B32  0012               	return		;funcret
  9439  002B34                     __end_of_OpenTimer1:
  9440                           	opt stack 0
  9441                           tblptru	equ	0xFF8
  9442                           tblptrh	equ	0xFF7
  9443                           tblptrl	equ	0xFF6
  9444                           tablat	equ	0xFF5
  9445                           prodh	equ	0xFF4
  9446                           prodl	equ	0xFF3
  9447                           indf0	equ	0xFEF
  9448                           postinc0	equ	0xFEE
  9449                           fsr0h	equ	0xFEA
  9450                           fsr0l	equ	0xFE9
  9451                           wreg	equ	0xFE8
  9452                           indf1	equ	0xFE7
  9453                           postdec1	equ	0xFE5
  9454                           fsr1h	equ	0xFE2
  9455                           fsr1l	equ	0xFE1
  9456                           indf2	equ	0xFDF
  9457                           postinc2	equ	0xFDE
  9458                           postdec2	equ	0xFDD
  9459                           fsr2h	equ	0xFDA
  9460                           fsr2l	equ	0xFD9
  9461                           status	equ	0xFD8
  9462                           
  9463 ;; *************** function _initADC *****************
  9464 ;; Defined at:
  9465 ;;		line 119 in file "main.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;		None
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;  portconfig      1   10[COMRAM] unsigned char 
  9470 ;;  adc_config2     1    9[COMRAM] unsigned char 
  9471 ;;  adc_config1     1    8[COMRAM] unsigned char 
  9472 ;;  i               1    7[COMRAM] unsigned char 
  9473 ;;  config3         1    6[COMRAM] unsigned char 
  9474 ;;  channel         1    5[COMRAM] unsigned char 
  9475 ;; Return value:  Size  Location     Type
  9476 ;;                  1    wreg      void 
  9477 ;; Registers used:
  9478 ;;		wreg, status,2, status,0, cstack
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/0
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9484 ;;      Params:         0       0       0       0       0       0       0
  9485 ;;      Locals:         6       0       0       0       0       0       0
  9486 ;;      Temps:          0       0       0       0       0       0       0
  9487 ;;      Totals:         6       0       0       0       0       0       0
  9488 ;;Total ram usage:        6 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:    1
  9491 ;; This function calls:
  9492 ;;		_OpenADC
  9493 ;; This function is called by:
  9494 ;;		_main
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text51
  9499  002AD4                     __ptext51:
  9500                           	opt stack 0
  9501  002AD4                     _initADC:
  9502                           	opt stack 29
  9503                           
  9504                           ;main.c: 121: unsigned char channel=0x00,adc_config1=0x00,adc_config2=0x00,config3=0x00,
      +                          portconfig=0x00,i=0;
  9505                           
  9506                           ;incstack = 0
  9507  002AD4  0E00               	movlw	0
  9508  002AD6  6E06               	movwf	initADC@channel,c
  9509  002AD8  0E00               	movlw	0
  9510  002ADA  6E09               	movwf	initADC@adc_config1,c
  9511  002ADC  0E00               	movlw	0
  9512  002ADE  6E0A               	movwf	initADC@adc_config2,c
  9513  002AE0  0E00               	movlw	0
  9514  002AE2  6E07               	movwf	initADC@config3,c
  9515  002AE4  0E00               	movlw	0
  9516  002AE6  6E0B               	movwf	initADC@portconfig,c
  9517  002AE8  0E00               	movlw	0
  9518  002AEA  6E08               	movwf	initADC@i,c
  9519                           
  9520                           ;main.c: 122: TRISAbits.RA0 = 1;
  9521  002AEC  8092               	bsf	3986,0,c	;volatile
  9522                           
  9523                           ;main.c: 123: adc_config1 = 0b11001111 & 0b11111111 & 0b11110101 ;
  9524  002AEE  0EC5               	movlw	197
  9525  002AF0  6E09               	movwf	initADC@adc_config1,c
  9526                           
  9527                           ;main.c: 124: adc_config2 = 0b10000111 & 0b01111111 & 0b11111100 ;
  9528  002AF2  0E04               	movlw	4
  9529  002AF4  6E0A               	movwf	initADC@adc_config2,c
  9530                           
  9531                           ;main.c: 125: portconfig = 0b11111110 ;
  9532  002AF6  0EFE               	movlw	254
  9533  002AF8  6E0B               	movwf	initADC@portconfig,c
  9534                           
  9535                           ;main.c: 126: OpenADC(adc_config1,adc_config2,portconfig);
  9536  002AFA  C00A  F001         	movff	initADC@adc_config2,OpenADC@config2
  9537  002AFE  C00B  F002         	movff	initADC@portconfig,OpenADC@portconfig
  9538  002B02  5009               	movf	initADC@adc_config1,w,c
  9539  002B04  EC30  F013         	call	_OpenADC
  9540  002B08  0012               	return		;funcret
  9541  002B0A                     __end_of_initADC:
  9542                           	opt stack 0
  9543                           tblptru	equ	0xFF8
  9544                           tblptrh	equ	0xFF7
  9545                           tblptrl	equ	0xFF6
  9546                           tablat	equ	0xFF5
  9547                           prodh	equ	0xFF4
  9548                           prodl	equ	0xFF3
  9549                           indf0	equ	0xFEF
  9550                           postinc0	equ	0xFEE
  9551                           fsr0h	equ	0xFEA
  9552                           fsr0l	equ	0xFE9
  9553                           wreg	equ	0xFE8
  9554                           indf1	equ	0xFE7
  9555                           postdec1	equ	0xFE5
  9556                           fsr1h	equ	0xFE2
  9557                           fsr1l	equ	0xFE1
  9558                           indf2	equ	0xFDF
  9559                           postinc2	equ	0xFDE
  9560                           postdec2	equ	0xFDD
  9561                           fsr2h	equ	0xFDA
  9562                           fsr2l	equ	0xFD9
  9563                           status	equ	0xFD8
  9564                           
  9565 ;; *************** function _OpenADC *****************
  9566 ;; Defined at:
  9567 ;;		line 68 in file "adcopen.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;  config          1    wreg     unsigned char 
  9570 ;;  config2         1    0[COMRAM] unsigned char 
  9571 ;;  portconfig      1    1[COMRAM] unsigned char 
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;  config          1    4[COMRAM] unsigned char 
  9574 ;; Return value:  Size  Location     Type
  9575 ;;                  1    wreg      void 
  9576 ;; Registers used:
  9577 ;;		wreg, status,2, status,0
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9583 ;;      Params:         2       0       0       0       0       0       0
  9584 ;;      Locals:         1       0       0       0       0       0       0
  9585 ;;      Temps:          2       0       0       0       0       0       0
  9586 ;;      Totals:         5       0       0       0       0       0       0
  9587 ;;Total ram usage:        5 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; This function calls:
  9590 ;;		Nothing
  9591 ;; This function is called by:
  9592 ;;		_initADC
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           	psect	text52
  9597  002660                     __ptext52:
  9598                           	opt stack 0
  9599  002660                     _OpenADC:
  9600                           	opt stack 29
  9601                           
  9602                           ;incstack = 0
  9603                           ;OpenADC@config stored from wreg
  9604  002660  6E05               	movwf	OpenADC@config,c
  9605                           
  9606                           ;adcopen.c: 72: ADCON0 = 0;
  9607  002662  0E00               	movlw	0
  9608  002664  6EC2               	movwf	4034,c	;volatile
  9609                           
  9610                           ;adcopen.c: 73: ADCON2 = 0;
  9611  002666  0E00               	movlw	0
  9612  002668  6EC0               	movwf	4032,c	;volatile
  9613                           
  9614                           ;adcopen.c: 75: ADCON0 = (config2 >> 1) & 0b00111100;
  9615  00266A  90D8               	bcf	status,0,c
  9616  00266C  3001               	rrcf	OpenADC@config2,w,c
  9617  00266E  0B3C               	andlw	60
  9618  002670  6EC2               	movwf	4034,c	;volatile
  9619                           
  9620                           ;adcopen.c: 76: ADCON1 = (portconfig & 0b00001111) |
  9621                           ;adcopen.c: 77: ((config2 << 4) & 0b00110000);
  9622  002672  C001  F003         	movff	OpenADC@config2,??_OpenADC
  9623  002676  3A03               	swapf	??_OpenADC,f,c
  9624  002678  0EF0               	movlw	240
  9625  00267A  1603               	andwf	??_OpenADC,f,c
  9626  00267C  0E30               	movlw	48
  9627  00267E  1603               	andwf	??_OpenADC,f,c
  9628  002680  5002               	movf	OpenADC@portconfig,w,c
  9629  002682  0B0F               	andlw	15
  9630  002684  1003               	iorwf	??_OpenADC,w,c
  9631  002686  6EC1               	movwf	4033,c	;volatile
  9632                           
  9633                           ;adcopen.c: 78: ADCON2 = (config & 0b10000000) |
  9634                           ;adcopen.c: 79: ((config >> 4) & 0b00000111) |
  9635                           ;adcopen.c: 80: ((config << 2) & 0b00111000);
  9636  002688  C005  F003         	movff	OpenADC@config,??_OpenADC
  9637  00268C  90D8               	bcf	status,0,c
  9638  00268E  3603               	rlcf	??_OpenADC,f,c
  9639  002690  90D8               	bcf	status,0,c
  9640  002692  3603               	rlcf	??_OpenADC,f,c
  9641  002694  0E38               	movlw	56
  9642  002696  1603               	andwf	??_OpenADC,f,c
  9643  002698  C005  F004         	movff	OpenADC@config,??_OpenADC+1
  9644  00269C  3A04               	swapf	??_OpenADC+1,f,c
  9645  00269E  0E0F               	movlw	15
  9646  0026A0  1604               	andwf	??_OpenADC+1,f,c
  9647  0026A2  0E07               	movlw	7
  9648  0026A4  1604               	andwf	??_OpenADC+1,f,c
  9649  0026A6  5005               	movf	OpenADC@config,w,c
  9650  0026A8  0B80               	andlw	128
  9651  0026AA  1004               	iorwf	??_OpenADC+1,w,c
  9652  0026AC  1003               	iorwf	??_OpenADC,w,c
  9653  0026AE  6EC0               	movwf	4032,c	;volatile
  9654                           
  9655                           ;adcopen.c: 82: if( config2 & 0b10000000 )
  9656  0026B0  AE01               	btfss	OpenADC@config2,7,c
  9657  0026B2  D003               	goto	l408
  9658                           
  9659                           ;adcopen.c: 83: {
  9660                           ;adcopen.c: 84: PIR1bits.ADIF = 0;
  9661  0026B4  9C9E               	bcf	3998,6,c	;volatile
  9662                           
  9663                           ;adcopen.c: 85: PIE1bits.ADIE = 1;
  9664  0026B6  8C9D               	bsf	3997,6,c	;volatile
  9665                           
  9666                           ;adcopen.c: 86: INTCONbits.PEIE = 1;
  9667  0026B8  8CF2               	bsf	intcon,6,c	;volatile
  9668  0026BA                     l408:
  9669                           
  9670                           ;adcopen.c: 87: }
  9671                           ;adcopen.c: 88: ADCON0bits.ADON = 1;
  9672  0026BA  80C2               	bsf	4034,0,c	;volatile
  9673  0026BC  0012               	return		;funcret
  9674  0026BE                     __end_of_OpenADC:
  9675                           	opt stack 0
  9676                           tblptru	equ	0xFF8
  9677                           tblptrh	equ	0xFF7
  9678                           tblptrl	equ	0xFF6
  9679                           tablat	equ	0xFF5
  9680                           prodh	equ	0xFF4
  9681                           prodl	equ	0xFF3
  9682                           intcon	equ	0xFF2
  9683                           indf0	equ	0xFEF
  9684                           postinc0	equ	0xFEE
  9685                           fsr0h	equ	0xFEA
  9686                           fsr0l	equ	0xFE9
  9687                           wreg	equ	0xFE8
  9688                           indf1	equ	0xFE7
  9689                           postdec1	equ	0xFE5
  9690                           fsr1h	equ	0xFE2
  9691                           fsr1l	equ	0xFE1
  9692                           indf2	equ	0xFDF
  9693                           postinc2	equ	0xFDE
  9694                           postdec2	equ	0xFDD
  9695                           fsr2h	equ	0xFDA
  9696                           fsr2l	equ	0xFD9
  9697                           status	equ	0xFD8
  9698                           
  9699 ;; *************** function _alarm *****************
  9700 ;; Defined at:
  9701 ;;		line 310 in file "main.c"
  9702 ;; Parameters:    Size  Location     Type
  9703 ;;		None
  9704 ;; Auto vars:     Size  Location     Type
  9705 ;;		None
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  1    wreg      void 
  9708 ;; Registers used:
  9709 ;;		wreg, status,2, status,0, cstack
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9715 ;;      Params:         0       0       0       0       0       0       0
  9716 ;;      Locals:         0       0       0       0       0       0       0
  9717 ;;      Temps:          2       0       0       0       0       0       0
  9718 ;;      Totals:         2       0       0       0       0       0       0
  9719 ;;Total ram usage:        2 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    1
  9722 ;; This function calls:
  9723 ;;		_ClosePWM1
  9724 ;;		_OpenPWM1
  9725 ;;		_SetDCPWM1
  9726 ;;		_SetOutputPWM1
  9727 ;; This function is called by:
  9728 ;;		_main
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           	psect	text53
  9733  0028B2                     __ptext53:
  9734                           	opt stack 0
  9735  0028B2                     _alarm:
  9736                           	opt stack 29
  9737                           
  9738                           ;main.c: 311: OpenPWM1(((100000/2.0f)/4)-1);
  9739                           
  9740                           ;incstack = 0
  9741  0028B2  0ED3               	movlw	211
  9742  0028B4  EC2B  F016         	call	_OpenPWM1
  9743                           
  9744                           ;main.c: 312: SetDCPWM1((100000/2.0f)/2);
  9745  0028B8  0E61               	movlw	97
  9746  0028BA  6E02               	movwf	SetDCPWM1@dutycycle+1,c
  9747  0028BC  0EA8               	movlw	168
  9748  0028BE  6E01               	movwf	SetDCPWM1@dutycycle,c
  9749  0028C0  EC16  F015         	call	_SetDCPWM1	;wreg free
  9750                           
  9751                           ;main.c: 313: SetOutputPWM1(0b00111111,0b11111100);
  9752  0028C4  0EFC               	movlw	252
  9753  0028C6  6E01               	movwf	SetOutputPWM1@outputmode,c
  9754  0028C8  0E3F               	movlw	63
  9755  0028CA  EC33  F014         	call	_SetOutputPWM1
  9756                           
  9757                           ;main.c: 314: _delay((unsigned long)((1000)*(4000000/4000.0)));
  9758  0028CE  0E06               	movlw	6
  9759  0028D0  6E08               	movwf	(??_alarm+1)& (0+255),c
  9760  0028D2  0E13               	movlw	19
  9761  0028D4  6E07               	movwf	??_alarm& (0+255),c
  9762  0028D6  0EAE               	movlw	174
  9763  0028D8                     u6977:
  9764  0028D8  2EE8               	decfsz	wreg,f,c
  9765  0028DA  D7FE               	bra	u6977
  9766  0028DC  2E07               	decfsz	??_alarm& (0+255),f,c
  9767  0028DE  D7FC               	bra	u6977
  9768  0028E0  2E08               	decfsz	(??_alarm+1)& (0+255),f,c
  9769  0028E2  D7FA               	bra	u6977
  9770                           
  9771                           ;main.c: 315: ClosePWM1();
  9772  0028E4  EC54  F016         	call	_ClosePWM1	;wreg free
  9773                           
  9774                           ;main.c: 316: _delay((unsigned long)((100)*(4000000/4000.0)));
  9775  0028E8  0E82               	movlw	130
  9776  0028EA  6E07               	movwf	??_alarm& (0+255),c
  9777  0028EC  0EDE               	movlw	222
  9778  0028EE                     u6987:
  9779  0028EE  2EE8               	decfsz	wreg,f,c
  9780  0028F0  D7FE               	bra	u6987
  9781  0028F2  2E07               	decfsz	??_alarm& (0+255),f,c
  9782  0028F4  D7FC               	bra	u6987
  9783  0028F6  0012               	return	
  9784  0028F8                     __end_of_alarm:
  9785                           	opt stack 0
  9786                           tblptru	equ	0xFF8
  9787                           tblptrh	equ	0xFF7
  9788                           tblptrl	equ	0xFF6
  9789                           tablat	equ	0xFF5
  9790                           prodh	equ	0xFF4
  9791                           prodl	equ	0xFF3
  9792                           intcon	equ	0xFF2
  9793                           indf0	equ	0xFEF
  9794                           postinc0	equ	0xFEE
  9795                           fsr0h	equ	0xFEA
  9796                           fsr0l	equ	0xFE9
  9797                           wreg	equ	0xFE8
  9798                           indf1	equ	0xFE7
  9799                           postdec1	equ	0xFE5
  9800                           fsr1h	equ	0xFE2
  9801                           fsr1l	equ	0xFE1
  9802                           indf2	equ	0xFDF
  9803                           postinc2	equ	0xFDE
  9804                           postdec2	equ	0xFDD
  9805                           fsr2h	equ	0xFDA
  9806                           fsr2l	equ	0xFD9
  9807                           status	equ	0xFD8
  9808                           
  9809 ;; *************** function _SetOutputPWM1 *****************
  9810 ;; Defined at:
  9811 ;;		line 22 in file "pw1setoc.c"
  9812 ;; Parameters:    Size  Location     Type
  9813 ;;  outputconfig    1    wreg     unsigned char 
  9814 ;;  outputmode      1    0[COMRAM] unsigned char 
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;  outputconfig    1    1[COMRAM] unsigned char 
  9817 ;;  eccpmx          1    0        unsigned char 
  9818 ;; Return value:  Size  Location     Type
  9819 ;;                  1    wreg      void 
  9820 ;; Registers used:
  9821 ;;		wreg, status,2, status,0
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9827 ;;      Params:         1       0       0       0       0       0       0
  9828 ;;      Locals:         1       0       0       0       0       0       0
  9829 ;;      Temps:          0       0       0       0       0       0       0
  9830 ;;      Totals:         2       0       0       0       0       0       0
  9831 ;;Total ram usage:        2 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; This function calls:
  9834 ;;		Nothing
  9835 ;; This function is called by:
  9836 ;;		_alarm
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840                           	psect	text54
  9841  002866                     __ptext54:
  9842                           	opt stack 0
  9843  002866                     _SetOutputPWM1:
  9844                           	opt stack 29
  9845                           
  9846                           ;incstack = 0
  9847                           ;SetOutputPWM1@outputconfig stored from wreg
  9848  002866  6E02               	movwf	SetOutputPWM1@outputconfig,c
  9849                           
  9850                           ;pw1setoc.c: 24: char eccpmx;
  9851                           ;pw1setoc.c: 35: outputconfig |= 0b00111111;
  9852  002868  0E3F               	movlw	63
  9853  00286A  1202               	iorwf	SetOutputPWM1@outputconfig,f,c
  9854                           
  9855                           ;pw1setoc.c: 36: outputmode |= 0b11111100;
  9856  00286C  0EFC               	movlw	252
  9857  00286E  1201               	iorwf	SetOutputPWM1@outputmode,f,c
  9858                           
  9859                           ;pw1setoc.c: 37: CCP1CON = (CCP1CON | 0b11000000) & outputconfig;
  9860  002870  50BD               	movf	4029,w,c	;volatile
  9861  002872  09C0               	iorlw	192
  9862  002874  1402               	andwf	SetOutputPWM1@outputconfig,w,c
  9863  002876  6EBD               	movwf	4029,c	;volatile
  9864                           
  9865                           ;pw1setoc.c: 39: CCP1CON = (CCP1CON | 0b00001111) & outputmode;
  9866  002878  50BD               	movf	4029,w,c	;volatile
  9867  00287A  090F               	iorlw	15
  9868  00287C  1401               	andwf	SetOutputPWM1@outputmode,w,c
  9869  00287E  6EBD               	movwf	4029,c	;volatile
  9870                           
  9871                           ;pw1setoc.c: 52: if (0b00111111 == outputconfig)
  9872  002880  0E3F               	movlw	63
  9873  002882  1802               	xorwf	SetOutputPWM1@outputconfig,w,c
  9874  002884  A4D8               	btfss	status,2,c
  9875  002886  D002               	goto	l987
  9876                           
  9877                           ;pw1setoc.c: 53: {
  9878                           ;pw1setoc.c: 54: TRISCbits.TRISC2 = 0;
  9879  002888  9494               	bcf	3988,2,c	;volatile
  9880                           
  9881                           ;pw1setoc.c: 55: }
  9882  00288A  0012               	return	
  9883  00288C                     l987:
  9884                           
  9885                           ;pw1setoc.c: 56: else if (((outputconfig) == 0b10111111))
  9886  00288C  0EBF               	movlw	191
  9887  00288E  1802               	xorwf	SetOutputPWM1@outputconfig,w,c
  9888  002890  A4D8               	btfss	status,2,c
  9889  002892  D003               	goto	l989
  9890                           
  9891                           ;pw1setoc.c: 57: {
  9892                           ;pw1setoc.c: 58: TRISCbits.TRISC2 = 0;
  9893  002894  9494               	bcf	3988,2,c	;volatile
  9894                           
  9895                           ;pw1setoc.c: 59: TRISDbits.TRISD5 = 0;
  9896  002896  9A95               	bcf	3989,5,c	;volatile
  9897                           
  9898                           ;pw1setoc.c: 60: }
  9899  002898  0012               	return	
  9900  00289A                     l989:
  9901                           
  9902                           ;pw1setoc.c: 61: else if (((outputconfig) == 0b01111111 || (outputconfig) == 0b11111111)
      +                          )
  9903  00289A  0E7F               	movlw	127
  9904  00289C  1802               	xorwf	SetOutputPWM1@outputconfig,w,c
  9905  00289E  B4D8               	btfsc	status,2,c
  9906  0028A0  D003               	goto	u5630
  9907  0028A2  2802               	incf	SetOutputPWM1@outputconfig,w,c
  9908  0028A4  A4D8               	btfss	status,2,c
  9909  0028A6  0012               	return	
  9910  0028A8                     u5630:
  9911                           
  9912                           ;pw1setoc.c: 62: {
  9913                           ;pw1setoc.c: 63: TRISCbits.TRISC2 = 0;
  9914  0028A8  9494               	bcf	3988,2,c	;volatile
  9915                           
  9916                           ;pw1setoc.c: 64: TRISDbits.TRISD5 = 0;
  9917  0028AA  9A95               	bcf	3989,5,c	;volatile
  9918                           
  9919                           ;pw1setoc.c: 65: TRISDbits.TRISD6 = 0;
  9920  0028AC  9C95               	bcf	3989,6,c	;volatile
  9921                           
  9922                           ;pw1setoc.c: 66: TRISDbits.TRISD7 = 0;
  9923  0028AE  9E95               	bcf	3989,7,c	;volatile
  9924  0028B0  0012               	return	
  9925  0028B2                     __end_of_SetOutputPWM1:
  9926                           	opt stack 0
  9927                           tblptru	equ	0xFF8
  9928                           tblptrh	equ	0xFF7
  9929                           tblptrl	equ	0xFF6
  9930                           tablat	equ	0xFF5
  9931                           prodh	equ	0xFF4
  9932                           prodl	equ	0xFF3
  9933                           intcon	equ	0xFF2
  9934                           indf0	equ	0xFEF
  9935                           postinc0	equ	0xFEE
  9936                           fsr0h	equ	0xFEA
  9937                           fsr0l	equ	0xFE9
  9938                           wreg	equ	0xFE8
  9939                           indf1	equ	0xFE7
  9940                           postdec1	equ	0xFE5
  9941                           fsr1h	equ	0xFE2
  9942                           fsr1l	equ	0xFE1
  9943                           indf2	equ	0xFDF
  9944                           postinc2	equ	0xFDE
  9945                           postdec2	equ	0xFDD
  9946                           fsr2h	equ	0xFDA
  9947                           fsr2l	equ	0xFD9
  9948                           status	equ	0xFD8
  9949                           
  9950 ;; *************** function _SetDCPWM1 *****************
  9951 ;; Defined at:
  9952 ;;		line 7 in file "pw1setdc.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  dutycycle       2    0[COMRAM] unsigned int 
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;  DCycle          2    4[COMRAM] struct PWMDC
  9957 ;; Return value:  Size  Location     Type
  9958 ;;                  1    wreg      void 
  9959 ;; Registers used:
  9960 ;;		wreg, status,2, status,0
  9961 ;; Tracked objects:
  9962 ;;		On entry : 0/0
  9963 ;;		On exit  : 0/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9966 ;;      Params:         2       0       0       0       0       0       0
  9967 ;;      Locals:         2       0       0       0       0       0       0
  9968 ;;      Temps:          2       0       0       0       0       0       0
  9969 ;;      Totals:         6       0       0       0       0       0       0
  9970 ;;Total ram usage:        6 bytes
  9971 ;; Hardware stack levels used:    1
  9972 ;; This function calls:
  9973 ;;		Nothing
  9974 ;; This function is called by:
  9975 ;;		_alarm
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           	psect	text55
  9980  002A2C                     __ptext55:
  9981                           	opt stack 0
  9982  002A2C                     _SetDCPWM1:
  9983                           	opt stack 29
  9984                           
  9985                           ;pw1setdc.c: 9: union PWMDC DCycle;
  9986                           ;pw1setdc.c: 12: DCycle.lpwm = dutycycle << 6;
  9987                           
  9988                           ;incstack = 0
  9989  002A2C  C001  F003         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  9990  002A30  C002  F004         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  9991  002A34  0E06               	movlw	6
  9992  002A36                     u5595:
  9993  002A36  90D8               	bcf	status,0,c
  9994  002A38  3603               	rlcf	??_SetDCPWM1,f,c
  9995  002A3A  3604               	rlcf	??_SetDCPWM1+1,f,c
  9996  002A3C  2EE8               	decfsz	wreg,f,c
  9997  002A3E  D7FB               	goto	u5595
  9998  002A40  C003  F005         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  9999  002A44  C004  F006         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
 10000                           
 10001                           ;pw1setdc.c: 15: CCPR1L = DCycle.bpwm[1];
 10002  002A48  C006  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
 10003                           
 10004                           ;pw1setdc.c: 18: CCP1CON = (CCP1CON & 0xCF) | ((DCycle.bpwm[0] >> 2) & 0x30);
 10005  002A4C  C005  F003         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
 10006  002A50  90D8               	bcf	status,0,c
 10007  002A52  3203               	rrcf	??_SetDCPWM1,f,c
 10008  002A54  90D8               	bcf	status,0,c
 10009  002A56  3203               	rrcf	??_SetDCPWM1,f,c
 10010  002A58  0E30               	movlw	48
 10011  002A5A  1603               	andwf	??_SetDCPWM1,f,c
 10012  002A5C  50BD               	movf	4029,w,c	;volatile
 10013  002A5E  0BCF               	andlw	207
 10014  002A60  1003               	iorwf	??_SetDCPWM1,w,c
 10015  002A62  6EBD               	movwf	4029,c	;volatile
 10016  002A64  0012               	return		;funcret
 10017  002A66                     __end_of_SetDCPWM1:
 10018                           	opt stack 0
 10019                           tblptru	equ	0xFF8
 10020                           tblptrh	equ	0xFF7
 10021                           tblptrl	equ	0xFF6
 10022                           tablat	equ	0xFF5
 10023                           prodh	equ	0xFF4
 10024                           prodl	equ	0xFF3
 10025                           intcon	equ	0xFF2
 10026                           indf0	equ	0xFEF
 10027                           postinc0	equ	0xFEE
 10028                           fsr0h	equ	0xFEA
 10029                           fsr0l	equ	0xFE9
 10030                           wreg	equ	0xFE8
 10031                           indf1	equ	0xFE7
 10032                           postdec1	equ	0xFE5
 10033                           fsr1h	equ	0xFE2
 10034                           fsr1l	equ	0xFE1
 10035                           indf2	equ	0xFDF
 10036                           postinc2	equ	0xFDE
 10037                           postdec2	equ	0xFDD
 10038                           fsr2h	equ	0xFDA
 10039                           fsr2l	equ	0xFD9
 10040                           status	equ	0xFD8
 10041                           
 10042 ;; *************** function _OpenPWM1 *****************
 10043 ;; Defined at:
 10044 ;;		line 8 in file "pw1open.c"
 10045 ;; Parameters:    Size  Location     Type
 10046 ;;  period          1    wreg     unsigned char 
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;  period          1    0[COMRAM] unsigned char 
 10049 ;; Return value:  Size  Location     Type
 10050 ;;                  1    wreg      void 
 10051 ;; Registers used:
 10052 ;;		wreg, status,2, status,0
 10053 ;; Tracked objects:
 10054 ;;		On entry : 0/0
 10055 ;;		On exit  : 0/0
 10056 ;;		Unchanged: 0/0
 10057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10058 ;;      Params:         0       0       0       0       0       0       0
 10059 ;;      Locals:         1       0       0       0       0       0       0
 10060 ;;      Temps:          0       0       0       0       0       0       0
 10061 ;;      Totals:         1       0       0       0       0       0       0
 10062 ;;Total ram usage:        1 bytes
 10063 ;; Hardware stack levels used:    1
 10064 ;; This function calls:
 10065 ;;		Nothing
 10066 ;; This function is called by:
 10067 ;;		_alarm
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           	psect	text56
 10072  002C56                     __ptext56:
 10073                           	opt stack 0
 10074  002C56                     _OpenPWM1:
 10075                           	opt stack 29
 10076                           
 10077                           ;incstack = 0
 10078                           ;OpenPWM1@period stored from wreg
 10079  002C56  6E01               	movwf	OpenPWM1@period,c
 10080                           
 10081                           ;pw1open.c: 11: CCP1CON |= 0b00001100;
 10082  002C58  0E0C               	movlw	12
 10083  002C5A  12BD               	iorwf	4029,f,c	;volatile
 10084                           
 10085                           ;pw1open.c: 13: TRISCbits.TRISC2 = 0;
 10086  002C5C  9494               	bcf	3988,2,c	;volatile
 10087                           
 10088                           ;pw1open.c: 15: T2CONbits.TMR2ON = 0;
 10089  002C5E  94CA               	bcf	4042,2,c	;volatile
 10090                           
 10091                           ;pw1open.c: 16: PR2 = period;
 10092  002C60  C001  FFCB         	movff	OpenPWM1@period,4043	;volatile
 10093                           
 10094                           ;pw1open.c: 17: T2CONbits.TMR2ON = 1;
 10095  002C64  84CA               	bsf	4042,2,c	;volatile
 10096  002C66  0012               	return		;funcret
 10097  002C68                     __end_of_OpenPWM1:
 10098                           	opt stack 0
 10099                           tblptru	equ	0xFF8
 10100                           tblptrh	equ	0xFF7
 10101                           tblptrl	equ	0xFF6
 10102                           tablat	equ	0xFF5
 10103                           prodh	equ	0xFF4
 10104                           prodl	equ	0xFF3
 10105                           intcon	equ	0xFF2
 10106                           indf0	equ	0xFEF
 10107                           postinc0	equ	0xFEE
 10108                           fsr0h	equ	0xFEA
 10109                           fsr0l	equ	0xFE9
 10110                           wreg	equ	0xFE8
 10111                           indf1	equ	0xFE7
 10112                           postdec1	equ	0xFE5
 10113                           fsr1h	equ	0xFE2
 10114                           fsr1l	equ	0xFE1
 10115                           indf2	equ	0xFDF
 10116                           postinc2	equ	0xFDE
 10117                           postdec2	equ	0xFDD
 10118                           fsr2h	equ	0xFDA
 10119                           fsr2l	equ	0xFD9
 10120                           status	equ	0xFD8
 10121                           
 10122 ;; *************** function _ClosePWM1 *****************
 10123 ;; Defined at:
 10124 ;;		line 7 in file "pw1close.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;		None
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;		None
 10129 ;; Return value:  Size  Location     Type
 10130 ;;                  1    wreg      void 
 10131 ;; Registers used:
 10132 ;;		wreg, status,2
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10138 ;;      Params:         0       0       0       0       0       0       0
 10139 ;;      Locals:         0       0       0       0       0       0       0
 10140 ;;      Temps:          0       0       0       0       0       0       0
 10141 ;;      Totals:         0       0       0       0       0       0       0
 10142 ;;Total ram usage:        0 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; This function calls:
 10145 ;;		Nothing
 10146 ;; This function is called by:
 10147 ;;		_alarm
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151                           	psect	text57
 10152  002CA8                     __ptext57:
 10153                           	opt stack 0
 10154  002CA8                     _ClosePWM1:
 10155                           	opt stack 29
 10156                           
 10157                           ;pw1close.c: 9: CCP1CON=0;
 10158                           
 10159                           ;incstack = 0
 10160  002CA8  0E00               	movlw	0
 10161  002CAA  6EBD               	movwf	4029,c	;volatile
 10162  002CAC  0012               	return		;funcret
 10163  002CAE                     __end_of_ClosePWM1:
 10164                           	opt stack 0
 10165                           tblptru	equ	0xFF8
 10166                           tblptrh	equ	0xFF7
 10167                           tblptrl	equ	0xFF6
 10168                           tablat	equ	0xFF5
 10169                           prodh	equ	0xFF4
 10170                           prodl	equ	0xFF3
 10171                           intcon	equ	0xFF2
 10172                           indf0	equ	0xFEF
 10173                           postinc0	equ	0xFEE
 10174                           fsr0h	equ	0xFEA
 10175                           fsr0l	equ	0xFE9
 10176                           wreg	equ	0xFE8
 10177                           indf1	equ	0xFE7
 10178                           postdec1	equ	0xFE5
 10179                           fsr1h	equ	0xFE2
 10180                           fsr1l	equ	0xFE1
 10181                           indf2	equ	0xFDF
 10182                           postinc2	equ	0xFDE
 10183                           postdec2	equ	0xFDD
 10184                           fsr2h	equ	0xFDA
 10185                           fsr2l	equ	0xFD9
 10186                           status	equ	0xFD8
 10187                           
 10188 ;; *************** function _OpenI2C *****************
 10189 ;; Defined at:
 10190 ;;		line 14 in file "i2c_open.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;  sync_mode       1    wreg     unsigned char 
 10193 ;;  slew            1    0[COMRAM] unsigned char 
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;  sync_mode       1    1[COMRAM] unsigned char 
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  1    wreg      void 
 10198 ;; Registers used:
 10199 ;;		wreg, status,2, status,0
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10205 ;;      Params:         1       0       0       0       0       0       0
 10206 ;;      Locals:         1       0       0       0       0       0       0
 10207 ;;      Temps:          0       0       0       0       0       0       0
 10208 ;;      Totals:         2       0       0       0       0       0       0
 10209 ;;Total ram usage:        2 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; This function calls:
 10212 ;;		Nothing
 10213 ;; This function is called by:
 10214 ;;		_main
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           	psect	text58
 10219  002BE2                     __ptext58:
 10220                           	opt stack 0
 10221  002BE2                     _OpenI2C:
 10222                           	opt stack 30
 10223                           
 10224                           ;incstack = 0
 10225                           ;OpenI2C@sync_mode stored from wreg
 10226  002BE2  6E02               	movwf	OpenI2C@sync_mode,c
 10227                           
 10228                           ;i2c_open.c: 16: SSPSTAT &= 0x3F;
 10229  002BE4  0E3F               	movlw	63
 10230  002BE6  16C7               	andwf	4039,f,c	;volatile
 10231                           
 10232                           ;i2c_open.c: 17: SSPCON1 = 0x00;
 10233  002BE8  0E00               	movlw	0
 10234  002BEA  6EC6               	movwf	4038,c	;volatile
 10235                           
 10236                           ;i2c_open.c: 18: SSPCON2 = 0x00;
 10237  002BEC  0E00               	movlw	0
 10238  002BEE  6EC5               	movwf	4037,c	;volatile
 10239                           
 10240                           ;i2c_open.c: 19: SSPCON1 |= sync_mode;
 10241  002BF0  5002               	movf	OpenI2C@sync_mode,w,c
 10242  002BF2  12C6               	iorwf	4038,f,c	;volatile
 10243                           
 10244                           ;i2c_open.c: 20: SSPSTAT |= slew;
 10245  002BF4  5001               	movf	OpenI2C@slew,w,c
 10246  002BF6  12C7               	iorwf	4039,f,c	;volatile
 10247                           
 10248                           ;i2c_open.c: 22: TRISCbits.TRISC3 = 1;
 10249  002BF8  8694               	bsf	3988,3,c	;volatile
 10250                           
 10251                           ;i2c_open.c: 23: TRISCbits.TRISC4 = 1;
 10252  002BFA  8894               	bsf	3988,4,c	;volatile
 10253                           
 10254                           ;i2c_open.c: 24: SSPCON1 |= 0b00100000;
 10255  002BFC  8AC6               	bsf	4038,5,c	;volatile
 10256  002BFE  0012               	return		;funcret
 10257  002C00                     __end_of_OpenI2C:
 10258                           	opt stack 0
 10259                           tblptru	equ	0xFF8
 10260                           tblptrh	equ	0xFF7
 10261                           tblptrl	equ	0xFF6
 10262                           tablat	equ	0xFF5
 10263                           prodh	equ	0xFF4
 10264                           prodl	equ	0xFF3
 10265                           intcon	equ	0xFF2
 10266                           indf0	equ	0xFEF
 10267                           postinc0	equ	0xFEE
 10268                           fsr0h	equ	0xFEA
 10269                           fsr0l	equ	0xFE9
 10270                           wreg	equ	0xFE8
 10271                           indf1	equ	0xFE7
 10272                           postdec1	equ	0xFE5
 10273                           fsr1h	equ	0xFE2
 10274                           fsr1l	equ	0xFE1
 10275                           indf2	equ	0xFDF
 10276                           postinc2	equ	0xFDE
 10277                           postdec2	equ	0xFDD
 10278                           fsr2h	equ	0xFDA
 10279                           fsr2l	equ	0xFD9
 10280                           status	equ	0xFD8
 10281                           tblptru	equ	0xFF8
 10282                           tblptrh	equ	0xFF7
 10283                           tblptrl	equ	0xFF6
 10284                           tablat	equ	0xFF5
 10285                           prodh	equ	0xFF4
 10286                           prodl	equ	0xFF3
 10287                           intcon	equ	0xFF2
 10288                           indf0	equ	0xFEF
 10289                           postinc0	equ	0xFEE
 10290                           fsr0h	equ	0xFEA
 10291                           fsr0l	equ	0xFE9
 10292                           wreg	equ	0xFE8
 10293                           indf1	equ	0xFE7
 10294                           postdec1	equ	0xFE5
 10295                           fsr1h	equ	0xFE2
 10296                           fsr1l	equ	0xFE1
 10297                           indf2	equ	0xFDF
 10298                           postinc2	equ	0xFDE
 10299                           postdec2	equ	0xFDD
 10300                           fsr2h	equ	0xFDA
 10301                           fsr2l	equ	0xFD9
 10302                           status	equ	0xFD8
 10303                           
 10304                           	psect	rparam
 10305  0000                     tblptru	equ	0xFF8
 10306                           tblptrh	equ	0xFF7
 10307                           tblptrl	equ	0xFF6
 10308                           tablat	equ	0xFF5
 10309                           prodh	equ	0xFF4
 10310                           prodl	equ	0xFF3
 10311                           intcon	equ	0xFF2
 10312                           indf0	equ	0xFEF
 10313                           postinc0	equ	0xFEE
 10314                           fsr0h	equ	0xFEA
 10315                           fsr0l	equ	0xFE9
 10316                           wreg	equ	0xFE8
 10317                           indf1	equ	0xFE7
 10318                           postdec1	equ	0xFE5
 10319                           fsr1h	equ	0xFE2
 10320                           fsr1l	equ	0xFE1
 10321                           indf2	equ	0xFDF
 10322                           postinc2	equ	0xFDE
 10323                           postdec2	equ	0xFDD
 10324                           fsr2h	equ	0xFDA
 10325                           fsr2l	equ	0xFD9
 10326                           status	equ	0xFD8


Data Sizes:
    Strings     77
    Constant    118
    Data        12
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    127     127
    BANK0           128     35      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_11(CODE[7]), main@time(BANK0[20]), print_data@temp(COMRAM[3]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_9(CODE[8]), STR_8(CODE[9]), STR_2(CODE[12]), STR_1(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> main@str_tmp(BANK0[10]), main@time(BANK0[20]), print_data@str_temp2(COMRAM[3]), print_data@temp(COMRAM[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    getsI2C@rdptr	PTR unsigned char  size(2) Largest target is 6
		 -> result(BANK0[6]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 14
		 -> STR_10(CODE[12]), main@str_tmp(BANK0[10]), STR_7(CODE[5]), STR_6(CODE[4]), 
		 -> STR_5(CODE[14]), STR_4(CODE[4]), STR_3(CODE[10]), print_data@str_temp2(COMRAM[3]), 

    write_data@date	PTR unsigned char  size(2) Largest target is 3
		 -> main@date(BANK0[3]), 

    write_data@temp	PTR unsigned char  size(2) Largest target is 3
		 -> converted_temp(BANK0[3]), 

    write_one_block@d	PTR unsigned char  size(2) Largest target is 3
		 -> main@date(BANK0[3]), converted_temp(BANK0[3]), 

    HDByteReadI2C@data	PTR unsigned char  size(2) Largest target is 6
		 -> result(BANK0[6]), 


Critical Paths under _main in COMRAM

    _write_data->_write_one_block
    _write_one_block->_HDByteWriteI2C
    _HDByteWriteI2C->_EEAckPolling
    _EEAckPolling->_WriteI2C
    _test_readwrite->_print_data
    _print_data->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _putsXLCD->_WriteDataXLCD
    _initXLCD->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _read_temperature->___ftdiv
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _read_data->_HDByteReadI2C
    _HDByteReadI2C->_getsI2C
    _WriteI2C->_IdleI2C
    _initTimer->_WriteTimer1
    _initADC->_OpenADC
    _alarm->_SetDCPWM1

Critical Paths under _main in BANK0

    _main->_test_readwrite

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                34    34      0  120576
                                            126 COMRAM     1     1      0
                                              2 BANK0     33    33      0
                            _OpenI2C
                             ___ftge
                              _alarm
                            _initADC
                          _initTimer
                           _initXLCD
                           _putsXLCD
                          _read_data
                   _read_temperature
                            _sprintf
                     _test_readwrite
                         _write_data
 ---------------------------------------------------------------------------------
 (1) _write_data                                           6     2      4    1335
                                             14 COMRAM     6     2      4
                    _write_one_block
 ---------------------------------------------------------------------------------
 (2) _write_one_block                                      7     3      4    1139
                                              7 COMRAM     7     3      4
                     _HDByteWriteI2C
 ---------------------------------------------------------------------------------
 (3) _HDByteWriteI2C                                       4     1      3     654
                                              3 COMRAM     4     1      3
                       _EEAckPolling
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _EEAckPolling                                         1     1      0      66
                                              2 COMRAM     1     1      0
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (1) _test_readwrite                                       2     2      0   53182
                                              0 BANK0      2     2      0
                           _initXLCD
                         _print_data
                           _putsXLCD
 ---------------------------------------------------------------------------------
 (2) _print_data                                          18    18      0   52309
                                            108 COMRAM    18    18      0
                           _initXLCD
                           _putsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             48    36     12   50983
                                             63 COMRAM    45    33     12
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                                7     4      3   11907
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              10     7      3   11709
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     896
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _putsXLCD                                             2     0      2     697
                                              1 COMRAM     2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (3) _WriteDataXLCD                                        1     1      0      44
                                              0 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _initXLCD                                             0     0      0     176
                           _BusyXLCD
                           _OpenXLCD
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (4) _OpenXLCD                                             1     1      0     132
                                              4 COMRAM     1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (4) _WriteCmdXLCD                                         1     1      0      44
                                              0 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (5) _SetDDRamAddr                                         4     4      0      44
                                              0 COMRAM     4     4      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (5) _DelayPORXLCD                                         1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Delay10KTCYx                                         2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_temperature                                     0     0      0   10972
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                           ___awtoft
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            _ReadADC (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3063
                                             35 COMRAM    15     9      6
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2672
                                              8 COMRAM     4     1      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _read_data                                            8     6      2     991
                                              9 COMRAM     8     6      2
                      _HDByteReadI2C
 ---------------------------------------------------------------------------------
 (2) _HDByteReadI2C                                        6     1      5     829
                                              3 COMRAM     6     1      5
                            _IdleI2C
                           _WriteI2C
                            _getsI2C
 ---------------------------------------------------------------------------------
 (3) _getsI2C                                              3     0      3     371
                                              0 COMRAM     3     0      3
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (4) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             1     1      0      22
                                              1 COMRAM     1     1      0
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (5) _IdleI2C                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initTimer                                            4     4      0     258
                                              4 COMRAM     4     4      0
                         _OpenTimer1
                        _WriteTimer1
 ---------------------------------------------------------------------------------
 (2) _WriteTimer1                                          4     2      2     144
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer1                                           1     1      0      66
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initADC                                              6     6      0     381
                                              5 COMRAM     6     6      0
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     306
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _alarm                                                2     2      0     376
                                              6 COMRAM     2     2      0
                          _ClosePWM1
                           _OpenPWM1
                          _SetDCPWM1
                      _SetOutputPWM1
 ---------------------------------------------------------------------------------
 (2) _SetOutputPWM1                                        3     2      1     210
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _SetDCPWM1                                            6     4      2     144
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _OpenPWM1                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClosePWM1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OpenI2C                                              2     1      1     120
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenI2C
   ___ftge
   _alarm
     _ClosePWM1
     _OpenPWM1
     _SetDCPWM1
     _SetOutputPWM1
   _initADC
     _OpenADC
   _initTimer
     _OpenTimer1
     _WriteTimer1
   _initXLCD
     _BusyXLCD
       _DelayFor18TCY
     _OpenXLCD
       _BusyXLCD
         _DelayFor18TCY
       _Delay10KTCYx
       _DelayPORXLCD
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _WriteCmdXLCD
       _DelayFor18TCY
   _putsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _read_data
     _HDByteReadI2C
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _getsI2C
         _ReadI2C
   _read_temperature
     _BusyADC
     _ConvertADC
     _ReadADC
     ___awtoft
       _ReadADC (ARG)
       ___ftpack (ARG)
     ___ftdiv
       _ReadADC (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         _ReadADC (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       _ReadADC (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ReadADC (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       _ReadADC (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         _ReadADC (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ReadADC (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         _ReadADC (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           _ReadADC (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ReadADC (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         _ReadADC (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _test_readwrite
     _initXLCD
       _BusyXLCD
         _DelayFor18TCY
       _OpenXLCD
         _BusyXLCD
           _DelayFor18TCY
         _Delay10KTCYx
         _DelayPORXLCD
         _SetDDRamAddr
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
     _print_data
       _initXLCD
         _BusyXLCD
           _DelayFor18TCY
         _OpenXLCD
           _BusyXLCD
             _DelayFor18TCY
           _Delay10KTCYx
           _DelayPORXLCD
           _SetDDRamAddr
             _DelayFor18TCY
           _WriteCmdXLCD
             _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
       _putsXLCD
         _BusyXLCD
           _DelayFor18TCY
         _WriteDataXLCD
           _DelayFor18TCY
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               _ReadADC (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           _ReadADC (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 _ReadADC (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               _ReadADC (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ReadADC (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             _ReadADC (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _putsXLCD
       _BusyXLCD
         _DelayFor18TCY
       _WriteDataXLCD
         _DelayFor18TCY
   _write_data
     _write_one_block
       _HDByteWriteI2C
         _EEAckPolling
           _IdleI2C
           _WriteI2C
             _IdleI2C
         _IdleI2C
         _WriteI2C
           _IdleI2C

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     23      3E       5       48.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7F      7F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BD      15        0.0%
DATA                 0      0      BD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Nov  3 12:01:35 2017

                        l9 2A18                _SSPSTATbits 000FC7                         l97 27D0  
             ___awdiv@sign 000C        ___wmul@multiplicand 0011                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000                __CFG_OSC$XT 000000               ___ftadd@exp1 0039  
             ___ftadd@exp2 0038               ___ftadd@sign 0037                        l103 2802  
                      l121 240A                        l130 2442                        l115 23EE  
                      l124 241A                        l204 1E52                        l206 1EA4  
                      l136 244C                        l241 18FA                        l233 17E2  
                      l154 2BCA                        l306 274E                        l307 271C  
                      l171 1FC2                        l172 1FAC                        l173 1F86  
                      l165 1F4E                        l237 18A6                        l229 17B8  
                      l190 203A                        l182 1FF4                        l166 1F28  
                      l183 1FE8                        l175 1FC8                        l408 26BA  
                      l192 2056                        l272 2186                        l281 21B6  
                      l194 2080                        l266 216C                        l275 2196  
                      l188 2050                        l284 21C6                        l189 2040  
                      l278 21A6                        l470 2486                        l462 2470  
                      l199 25A2                        l480 24A6                        l472 2488  
                      l457 2460                        l467 247E                        l900 2626  
                      l484 24B4                        l477 2498                        l902 2634  
                      l478 24AE                        l911 265C                        l489 24C4  
                      l934 2B1A                        l935 2B1C                        l936 2B2E  
                      l784 281A                        l937 2B30                        l857 2C14  
                      l786 282C                        l795 2856                        l788 2838  
                      l895 2610                        l898 2638                        l987 288C  
                      l989 289A               __CFG_CPB$OFF 000000                        _PR2 000FCB  
             __CFG_CPD$OFF 000000       __size_of_WriteTimer1 0012                        _min 00A4  
                      _sec 00A5      __size_of_WriteCmdXLCD 003E               ___awmod@sign 0006  
                      wreg 000FE8        HDByteReadI2C@LowAdd 0005      __end_of_SetOutputPWM1 28B2  
             __CFG_LVP$OFF 000000               ___ftdiv@cntr 002D               ___ftdiv@sign 0032  
             __CFG_WDT$OFF 000000                       l1020 10CA                       l1013 14E4  
                     l1101 0F5E                       l1102 0ED8                       l1030 06D2  
                     l1023 117A                       l1031 06EE                       l1016 15B0  
                     l1024 12CA                       l1040 0770                       l1032 0764  
                     l1041 0872                       l1033 074E                       l1026 137A  
                     l1050 082C                       l1034 0718                       l1019 119E  
                     l1051 07FA                       l1044 0774                       l1301 2A7A  
                     l1061 09DE                       l1037 083E                       l1045 079C  
                     l1054 0DEC                       l1062 0A1C                       l1046 07AA  
                     l1063 0AD8                       l1055 0886                       l1047 07A6  
                     l1312 1A62                       l1080 0C4A                       l1072 0B3C  
                     l1056 08C6                       l1401 172A                       l1081 0C34  
                     l1410 1DA4                       l1402 1746                       l1314 1A80  
                     l1090 0DCC                       l1066 0A84                       l1058 0956  
                     l1411 1DE2                       l1307 2C1E                       l1403 1776  
                     l1315 1AC2                       l1083 0C6E                       l1059 09BA  
                     l1412 1E08                       l1324 1B54                       l1316 1AF2  
                     l1420 19CC                       l1092 0E26                       l1084 0C72  
                     l1325 1B48                       l1093 0E3E                       l1085 0C94  
                     l1077 0C2A                       l1350 210A                       l1502 231A  
                     l1318 1B30                       l1422 1A08                       l1086 0DC2  
                     l1078 0B98                       l1351 2100                       l1503 230E  
                     l1319 1B20                       l1423 19F8                       l1087 0CE4  
                     l1344 20AE                       l1408 1D7C                       l1440 1C88  
                     l1512 2556                       l1416 193E                       l1280 22CA  
                     l1345 20A4                       l1433 2208                       l1513 254A  
                     l1281 22D4                       l1273 227C                       l1097 0E96  
                     l1089 0DE2                       l1442 1CB0                       l1434 2238  
                     l1506 234E                       l1418 196A                       l1282 22E2  
                     l1274 228C                       l1290 24F6                       l1347 20E2  
                     l1443 1CE2                       l1451 2B98                       l1507 235C  
                     l1523 26D0                       l1419 19A4                       l1099 0EB6  
                     l1348 20CC                       l1444 1CF2                       l1516 257E  
                     l1524 26C4                       l1428 1A2C                       l1276 22AA  
                     l1461 1B98                       l1517 258C                       l1429 1A20  
                     l1277 22A2                       l1293 2516                       l1446 1D0A  
                     l1390 16BE                       l1470 1C26                       l1294 2520  
                     l1286 24DC                       l1447 1D1A                       l1375 1642  
                     l1463 1C0E                       l1295 252E                       l1287 24E8  
                     l1384 16D2                       l1472 1C4E                       l1464 1BFE  
                     l1457 290E                       l1289 24FE                       l1379 166C  
                     l1476 2BBC                       l1389 16C8                       l1469 1C32  
                     l1398 1706                       l1399 16FC                       l3613 2264  
                     l4613 0B40                       l4525 07FA                       l4703 0E42  
                     l4641 0C34                       l4733 0F5A                       l4729 0ED8  
                     l4593 0A60                       l4585 0A1C                       l4851 1E42  
                     l4861 1E74                       l4863 1E94                       l4873 1EDE  
                     l4983 1FE8                       l4997 203A                       STR_1 06BB  
                     STR_2 0685                       STR_3 069D                       STR_4 06C0  
                     STR_5 0677                       STR_7 06B6                       STR_8 0688  
                     STR_9 06A7                       _LATA 000F89                       _LATB 000F8A  
                     u4030 2502                       u4110 248C                       u4200 2176  
                     u5100 0A60                       u5020 08FE                       u4060 2464  
                     u3520 2114                       u5025 08F4                       u4170 24B8  
                     u4411 194E                       u5140 0B78                       u5060 09EE  
                     u3630 264C                       u3710 1634                       u5310 0F6E  
                     u5070 0A2C                       u4280 2C12                       u5400 241E  
                     u3480 2096                       u5320 0F88                       u4601 1B7C  
                     u3810 16DA                       u5170 0C58                       u5420 2446  
                     u5340 2746                       u3740 165E                       u4620 1BB6  
                     u4540 1B5A                       u5180 0C68                       u5500 1F6A  
                     u3901 1C98                       u5350 276E                       u4470 1A32  
                     u5270 0E7A                       u5510 1F78                       u3671 1600  
                     u4391 1922                       u5440 2450                       u3840 170E  
                     u4720 255A                       u3665 278C                       u3681 1614  
                     u4625 1BAE                       u5370 23F2                       u3770 169C  
                     u5347 273C                       u5700 2002                       u5540 2C9A  
                     u4660 1C38                       u5357 2764                       u5630 28A8  
                     u4830 284C                       u5710 2010                       u4750 27D4  
                     u5720 201E                       u4920 07D6                       u5560 1E74  
                     u5641 1D64                       u3881 1C70                       u4850 285A  
                     u5730 2032                       u4690 231E                       u3970 22AE  
                     u4770 2806                       u5580 1EDE                       u4780 280A  
                     u5661 1D8C                       u5830 1854                       u4927 07CC  
                     u4960 0822                       u5595 2A36                       u5860 189A  
                     u4967 0818                       u6907 1900                       u6917 238A  
                     u6927 23AC                       u6937 23D6                       u6947 2C6E  
                     u6957 2C24                       u6967 2CA0                       u6977 28D8  
                     u6897 18F2                       u6987 28EE        HDByteReadI2C@length 0008  
     HDByteReadI2C@HighAdd 0004                       _main 179C               ___ftpack@arg 0001  
                     _hour 00A3                       _msec 00A6               ___ftpack@exp 0004  
                     fsr0h 000FEA                       indf0 000FEF                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf1 000FE7                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9     __size_of_WriteDataXLCD 003E  
                     prodh 000FF4                       prodl 000FF3                       start 0000  
            __CFG_IESO$OFF 000000                main@str_tmp 0096            __end_of_IdleI2C 2C44  
             _sprintf$3115 0052             write_data@date 0011              __CFG_MCLRE$ON 000000  
           write_data@temp 000F               ___ftmul@cntr 0022               ___param_bank 000000  
             ___ftmul@sign 0023            __end_of_BusyADC 2C9E            __end_of_ReadI2C 2C1C  
          __end_of_ReadADC 2C86            __end_of_OpenI2C 2C00            __end_of_OpenADC 26BE  
             ___fttol@exp1 0039              _HDByteReadI2C 23E6               ___fttol@lval 0035  
             _WriteCmdXLCD 29B4              ?_SetDDRamAddr 0001                      ?_main 0001  
          __end_of___awdiv 22EC            __end_of___ftadd 179C                      STR_10 0691  
                    STR_11 06AF            __end_of___awmod 2538            __end_of___ftdiv 1E3A  
          __end_of___ftneg 2BA6            __end_of___lldiv 236E            __end_of___ftmul 1D54  
          ___awdiv@divisor 0009                      _T1CON 000FCD            __end_of___llmod 259E  
          __end_of___ftsub 2938            __end_of___fttol 1C60            ___awdiv@counter 000B  
                    _TMR1H 000FCF                      _TMR1L 000FCE                      _PORTB 000F81  
                    _TRISB 000F93                      _TRISC 000F94      __size_of_Delay10KTCYx 0016  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000       __end_of_EEAckPolling 24C8  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
             ___lltoft@exp 0011            __end_of_getsI2C 2866             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_initADC 2B0A             __CFG_EBTRB$OFF 000000  
                    _alarm 28B2              ___awtoft@sign 000C            __end_of_dpowers 0629  
                    _scale 0F96            __end_of_isdigit 2BC4              ___ftpack@sign 0005  
               _ConvertADC 2CAE             __CFG_BOREN$OFF 000000                      tablat 000FF5  
                    status 000FD8            __end_of_sprintf 0F96   __end_of_read_temperature 2602  
      print_data@str_temp2 007A            __initialization 2A9E               __end_of_main 1912  
           ?_HDByteReadI2C 0004           __end_of_BusyXLCD 2A2C               _Delay10KTCYx 2C1C  
    __size_of_DelayPORXLCD 0010             ??_SetDDRamAddr 0001           __end_of_OpenPWM1 2C68  
         __end_of_OpenXLCD 21D8                     ??_main 007F              ___fttol@sign1 0034  
            __activetblptr 000002              _WriteDataXLCD 2976       __size_of__tdiv_to_l_ 0132  
       __size_of_ClosePWM1 0006                     ?_alarm 0001             _converted_temp 00AF  
                   _ADCON0 000FC2                     _ADCON1 000FC1                     _ADCON2 000FC0  
         ___llmod@dividend 000E                     ?_scale 0024                     _ADRESH 000FC4  
                   _ADRESL 000FC3                     _CCPR1L 000FBE           ___awdiv@dividend 0007  
         __end_of_WriteI2C 2660           __end_of___awtoft 2A9E           __end_of___ftpack 2134  
HDByteWriteI2C@ControlByte 0007           __end_of___lltoft 271A                OpenI2C@slew 0001  
               _OpenTimer1 2B0A                  ??_IdleI2C 0001         __size_of_SetDCPWM1 003A  
                   _SSPADD 000FC8                     _SSPBUF 000FC9                  ??_BusyADC 0001  
                ??_ReadI2C 0001                  ??_ReadADC 0003             _HDByteWriteI2C 27C8  
                ??_OpenI2C 0002                  ??_OpenADC 0003               _DelayPORXLCD 2C68  
 __size_of_write_one_block 00B4             __CFG_XINST$OFF 000000           __end_of__powers_ 0650  
                   ___ftge 21D8                     ___wmul 2B5C                  ??___awdiv 000B  
                ??___ftadd 0034             __CFG_STVREN$ON 000000                  ??___awmod 0005  
                ??___ftdiv 002A                  ??___ftneg 0004                  ??___lldiv 0009  
                ??___ftmul 001B                  ??___llmod 0016                  ??___ftsub 0040  
                ??___fttol 002F           __end_of_initXLCD 2BE2           OpenTimer1@config 0001  
                   _fround 139E                     clear_0 2AC4           ___awdiv@quotient 000D  
          ___awmod@divisor 0003                     _result 00A9            ___awmod@counter 0005  
                ??_getsI2C 0004             ?_WriteDataXLCD 0001             print_data@temp 0077  
           print_data@time 0071                  ??_initADC 0006      ___ftmul@f3_as_product 001F  
                ??_isdigit 0001           ??_test_readwrite 0080               __mediumconst 0000  
      write_one_block@size 000A                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8           __end_of_putsXLCD 2776           read_data@counter 0010  
                ??_sprintf 004C  SetOutputPWM1@outputconfig 0002                ?_ConvertADC 0001  
      EEAckPolling@control 0003     __end_of_HDByteWriteI2C 2818                 __accesstop 0080  
  __end_of__initialization 2ACA            __CFG_PBADEN$OFF 000000                 ___ftadd@f1 002E  
               ___ftadd@f2 0031                 ___ftge@ff1 0001                 ___ftge@ff2 0004  
            ___rparam_used 000001                 ___ftdiv@f1 0024                 ___ftdiv@f2 0027  
               ___ftdiv@f3 002E                 ___ftneg@f1 0001                 ___awtoft@c 0009  
        __end_of_ClosePWM1 2CAE            ??_HDByteReadI2C 0009                 ___ftmul@f1 0015  
               ___ftmul@f2 0018                 ___ftsub@f1 003A                 ___ftsub@f2 003D  
               ___fttol@f1 002B             __pcstackCOMRAM 0001               __pidataBANK0 2C86  
            __end_of_alarm 28F8                 ___lltoft@c 0009              __end_of_scale 139E  
    __size_of_EEAckPolling 0070          __end_of_SetDCPWM1 2A66                 __div_to_l_ 1A44  
                  ??_alarm 0007            __div_to_l_@exp1 000C            __div_to_l_@cntr 000B  
                  ??_scale 0027     __size_of_DelayFor18TCY 000A            __div_to_l_@quot 0007  
               __pbssBANK0 00A3                  ?_BusyXLCD 0001                ?_OpenTimer1 0001  
          ?_HDByteWriteI2C 0004            WriteCmdXLCD@cmd 0001       __end_of_SetDDRamAddr 27C8  
       __size_of_initTimer 0028                  ?_OpenPWM1 0001                  ?_OpenXLCD 0001  
            __div_to_l_@f1 0001              __div_to_l_@f2 0004         __size_of_read_data 00B4  
             _EEAckPolling 2458                    ?___ftge 0001          WriteDataXLCD@data 0001  
                  ?___wmul 000F                    _CCP1CON 000FBD                 _block_size 00BC  
          ??_WriteDataXLCD 0001           WriteTimer1@timer 0003              ??_WriteTimer1 0003  
                  ?_fround 0024          ??_write_one_block 000C        __size_of_ConvertADC 0004  
                ?_WriteI2C 0001                  ?___awtoft 0009                  ?___ftpack 0001  
                ?___lltoft 0009                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                 ??_BusyXLCD 0001                  ?_initXLCD 0001  
                  _IdleI2C 2C32                    _BusyADC 2C92                    _ReadI2C 2C00  
                  _ReadADC 2C78                 ??_OpenPWM1 0001                 ??_OpenXLCD 0005  
        ?_read_temperature 0001                    _OpenI2C 2BE2                    _OpenADC 2660  
        __end_of__npowers_ 0677                    __Hparam 0000                 _scale$3114 0027  
                  __Lparam 0000         ??_read_temperature 0033            __size_of___ftge 0090  
                  ___awdiv 2268              _DelayFor18TCY 2C9E                    ___ftadd 15F0  
                  ___awmod 24C8                    ___ftdiv 1D54                    ___ftneg 2B82  
                  ___lldiv 22EC            __size_of___wmul 0026                    ___ftmul 1C60  
                  ___llmod 2538                    ___ftsub 28F8                    ___fttol 1B6C  
                ?_putsXLCD 0002     __size_of_SetOutputPWM1 004C               __psmallconst 0600  
                  __pcinit 2A9E                 ??_WriteI2C 0002                 ??___awtoft 000C  
               ??___ftpack 0006            __size_of_fround 0252                    __ramtop 0600  
      __size_of_OpenTimer1 002A                 ??___lltoft 000D                    _getsI2C 2818  
                  __ptext0 179C                    __ptext1 2938                    __ptext2 1F1E  
                  __ptext3 27C8                    __ptext4 2458                    __ptext5 236E  
                  __ptext6 1E3A                    __ptext7 06C6                    __ptext8 0F96  
                  __ptext9 2BA6                    _initADC 2AD4                  _T1CONbits 000FCD  
              ?__div_to_l_ 0001          __end_of_initTimer 2B5C                    _dpowers 0601  
                _T2CONbits 000FCA                    _isdigit 2BA6          __end_of_read_data 2086  
         ___awmod@dividend 0001        __end_of_WriteTimer1 2C56             OpenADC@config2 0001  
                  _sprintf 06C6       end_of_initialization 2ACA                 ??_initXLCD 0006  
            __Lmediumconst 0000               read_data@tha 000C               read_data@tla 000E  
          ___lldiv@divisor 0005            ___lldiv@counter 000D             ?_DelayFor18TCY 0001  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 ??_putsXLCD 0004             __tdiv_to_l_@f1 0001  
           __tdiv_to_l_@f2 0004              ??__tdiv_to_l_ 0007       initTimer@timer_value 0006  
               _print_data 1E3A                  _TRISAbits 000F92                  _TRISCbits 000F94  
                _TRISDbits 000F95      __size_of_SetDDRamAddr 0052               ??_ConvertADC 0001  
            _SetOutputPWM1 2866                ___ftdiv@exp 0031                print_data@j 007D  
         write_one_block@d 0008           write_one_block@i 000D        __size_of__div_to_l_ 0128  
              ___ftmul@exp 001E                  _ClosePWM1 2CA8             __end_of___ftge 2268  
           __end_of___wmul 2B82                 _write_data 2938                _WriteTimer1 2C44  
       __end_of_ConvertADC 2CB2             __end_of_fround 15F0               _SetDDRamAddr 2776  
       SetDDRamAddr@DDaddr 0004        start_initialization 2A9E                  _SetDCPWM1 2A2C  
          SetDCPWM1@DCycle 0005        __end_of__tdiv_to_l_ 1A44           ??_HDByteWriteI2C 0007  
          _eeprom_haddress 00A7             ?_SetOutputPWM1 0001           WriteI2C@data_out 0002  
          _eeprom_laddress 00A8               ??_OpenTimer1 0001            ___llmod@divisor 0012  
        __size_of_BusyXLCD 003A            ___llmod@counter 0016            _write_one_block 1F1E  
          ??_DelayFor18TCY 0001          __size_of_OpenPWM1 0012          __size_of_OpenXLCD 00A4  
                 ??___ftge 0007      __end_of_HDByteReadI2C 2458                   ??___wmul 0013  
               ?_ClosePWM1 0001              ?_WriteCmdXLCD 0001                __pdataBANK0 00B2  
         __CFG_LPT1OSC$OFF 000000                   ??_fround 0027              sprintf@tmpval 005F  
        initADC@portconfig 000B         __end_of_OpenTimer1 2B34                ?_print_data 0001  
               fround@prec 002D          __size_of_WriteI2C 005E          __size_of___awtoft 0038  
        __size_of___ftpack 00AE          __size_of___lltoft 005C              __pcstackBANK0 0080  
               ?_SetDCPWM1 0001               _isdigit$2685 0002                   ?_IdleI2C 0001  
              sprintf@flag 005B                sprintf@fval 0067    __size_of_test_readwrite 0078  
              sprintf@prec 006A                   ?_BusyADC 0001                   ?_ReadI2C 0001  
                 ?_ReadADC 0001      HDByteWriteI2C@HighAdd 0004          __size_of_initXLCD 001E  
        OpenADC@portconfig 0002                   ?_OpenI2C 0001                   ?_OpenADC 0001  
  SetOutputPWM1@outputmode 0001             putsXLCD@buffer 0002          __CFG_CCP2MX$PORTC 000000  
           ??_WriteCmdXLCD 0001                   ?___awdiv 0007                   ?___ftadd 002E  
                 ?___awmod 0001                   ?___ftdiv 0024                   ?___ftneg 0001  
                 ?___lldiv 0001                   ?___ftmul 0015                   ?___llmod 000E  
                 ?___ftsub 003A                  __npowers_ 0650                   ?___fttol 002B  
            ?_Delay10KTCYx 0001             initADC@channel 0006                ?_write_data 000F  
           initADC@config3 0007                __tdiv_to_l_ 1912                   ?_getsI2C 0001  
        __size_of_putsXLCD 005C      __end_of_WriteDataXLCD 29B4                   ?_initADC 0001  
             ??__div_to_l_ 0007  __size_of_read_temperature 0064                __smallconst 0600  
        WriteTimer1@timer1 0001                   ?_isdigit 0001            ??_SetOutputPWM1 0002  
                _initTimer 2B34             __size_of_alarm 0046                   ?_sprintf 0040  
                _read_data 1FD2             __size_of_scale 0408    __end_of_write_one_block 1FD2  
       HDByteWriteI2C@data 0006             ___wmul@product 0013              OpenADC@config 0005  
                 _LATAbits 000F89                   _PIE1bits 000F9D              ?_DelayPORXLCD 0001  
      __size_of_print_data 00E4                   _PIR1bits 000F9E            OpenXLCD@lcdtype 0005  
       __end_of__div_to_l_ 1B6C                   _PIR2bits 000FA1           __CFG_WDTPS$32768 000000  
                _temp_size 00BA             ??_Delay10KTCYx 0001                  _time_size 00B8  
              ??_ClosePWM1 0001                 _ADCON0bits 000FC2          ___wmul@multiplier 000F  
        HDByteReadI2C@data 0006                ??_SetDCPWM1 0003           Delay10KTCYx@unit 0002  
        print_data@funion2 0074                 ?_initTimer 0001                 ?_read_data 000A  
                copy_data0 2AB2                   _BusyXLCD 29F2           OpenI2C@sync_mode 0002  
       SetDCPWM1@dutycycle 0001        __size_of_write_data 003E         initADC@adc_config1 0009  
       initADC@adc_config2 000A           __size_of_IdleI2C 0012             ??_DelayPORXLCD 0001  
                 _OpenPWM1 2C56                   _OpenXLCD 2134           __size_of_BusyADC 000C  
         __size_of_ReadI2C 001C           __size_of_ReadADC 000E                   __Hrparam 0000  
         __size_of_OpenI2C 001E           __size_of_OpenADC 005E                   __Lrparam 0000  
         __size_of___awdiv 0084           __size_of___ftadd 01AC           __size_of___awmod 0070  
            getsI2C@length 0003           __size_of___ftdiv 00E6           __size_of___ftneg 0024  
         __size_of___lldiv 0082           __size_of___ftmul 00F4           __size_of___llmod 0066  
         __size_of___ftsub 0040           __size_of___fttol 00F4                   _WriteI2C 2602  
             ?_WriteTimer1 0001                   ___awtoft 2A66                   ___ftpack 2086  
              _fround$3112 002A                _fround$3113 0027                   ___lltoft 26BE  
         __size_of_getsI2C 004E                 sprintf@len 0055                 sprintf@exp 005D  
               sprintf@val 0063           __size_of_initADC 0036             OpenPWM1@period 0001  
         __size_of_isdigit 001E       HDByteWriteI2C@LowAdd 0005                   __ptext10 139E  
                 __ptext11 2B5C                   __ptext20 28F8                   __ptext12 24C8  
                 __ptext21 15F0                   __ptext13 2268                   __ptext30 2C68  
                 __ptext22 2B82                   __ptext14 1912                   __ptext31 2C1C  
                 __ptext23 21D8                   __ptext15 1A44                   __ptext40 2CAE  
                 __ptext32 29F2                   __ptext24 271A                   __ptext16 26BE  
                 __ptext41 2C92                   __ptext33 2C9E                   __ptext25 2976  
                 __ptext17 2538                   __ptext50 2B0A                   __ptext42 1FD2  
                 __ptext34 259E                   __ptext26 2BC4                   __ptext18 22EC  
                 __ptext51 2AD4                   __ptext43 23E6                   __ptext35 1C60  
                 __ptext27 2134                   __ptext19 1B6C                   __ptext52 2660  
                 __ptext44 2818                   __ptext36 1D54                   __ptext28 29B4  
                 __ptext53 28B2                   __ptext45 2C00                   __ptext37 2A66  
                 __ptext29 2776                   __ptext54 2866                   __ptext46 2602  
                 __ptext38 2086                   __ptext55 2A2C                   __ptext47 2C32  
                 __ptext39 2C78                   __ptext56 2C56                   __ptext48 2B34  
                 __ptext57 2CA8                   __ptext49 2C44                   __ptext58 2BE2  
                 __powers_ 0629       __end_of_WriteCmdXLCD 29F2           ?_write_one_block 0008  
         __size_of_sprintf 08D0                   _initXLCD 2BC4             _test_readwrite 236E  
                 _max_temp 00B5              __size_of_main 0176                   _min_temp 00B2  
            ?_EEAckPolling 0001                   _putsXLCD 271A                   main@date 00A0  
                 main@time 0082                   initADC@i 0008               ??_print_data 006D  
         _read_temperature 259E                 _INTCONbits 000FF2   HDByteReadI2C@ControlByte 0009  
              ??_initTimer 0005                   isdigit@c 0003                   scale@scl 002A  
              ??_read_data 000C               getsI2C@rdptr 0001       __end_of_Delay10KTCYx 2C32  
   __end_of_test_readwrite 23E6                  sprintf@ap 0059                  sprintf@cp 0057  
         __tdiv_to_l_@exp1 000F                  sprintf@sp 0040           __tdiv_to_l_@cntr 000E  
         __tdiv_to_l_@quot 000A           ___lldiv@dividend 0001             ??_EEAckPolling 0003  
       __end_of_print_data 1F1E      __end_of_DelayFor18TCY 2CA8     initTimer@timer_config1 0008  
   initTimer@timer_config2 0005               ??_write_data 0013               ?__tdiv_to_l_ 0001  
                 sprintf@c 006C                   sprintf@f 0042       __end_of_DelayPORXLCD 2C78  
         ___lldiv@quotient 0009                _SSPCON1bits 000FC6                _SSPCON2bits 000FC5  
          ?_test_readwrite 0001     __size_of_HDByteReadI2C 0072         __end_of_write_data 2976  
  __size_of_HDByteWriteI2C 0050  
